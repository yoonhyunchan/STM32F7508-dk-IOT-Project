
test5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006770  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b4c  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800848c  0800848c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800848c  0800848c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008494  08008494  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800849c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  2000007c  08008518  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08008518  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001578f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e31  00000000  00000000  0003583b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00038670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00039708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e4e  00000000  00000000  0003a668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b02  00000000  00000000  000634b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f95a3  00000000  00000000  00077fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017155b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b8  00000000  00000000  001715ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006928 	.word	0x08006928

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006928 	.word	0x08006928

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80005ba:	af3c      	add	r7, sp, #240	; 0xf0
  uint8_t buffer[MAX_PRODUCTS][BUFFER_SIZE];
  uint8_t total_price_buffer[BUFFER_SIZE];


  // 구조체 초기
  cart.product_num = 0;
 80005bc:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <main+0x110>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
  cart.cart_total_price = 0;
 80005c2:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <main+0x110>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f001 fddf 	bl	800218c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f893 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 fa0d 	bl	80009f0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80005d6:	f000 f91d 	bl	8000814 <MX_DMA2D_Init>
  MX_QUADSPI_Init();
 80005da:	f000 f94d 	bl	8000878 <MX_QUADSPI_Init>
  MX_USART6_UART_Init();
 80005de:	f000 f9d7 	bl	8000990 <MX_USART6_UART_Init>
  MX_CRC_Init();
 80005e2:	f000 f8f5 	bl	80007d0 <MX_CRC_Init>
  MX_UART4_Init();
 80005e6:	f000 f973 	bl	80008d0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80005ea:	f000 f9a1 	bl	8000930 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  LCD_Config();
 80005ee:	f000 fa83 	bl	8000af8 <LCD_Config>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80005f2:	4835      	ldr	r0, [pc, #212]	; (80006c8 <main+0x114>)
 80005f4:	f000 ff3a 	bl	800146c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80005f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005fc:	f000 ff4e 	bl	800149c <BSP_LCD_SetBackColor>



  // 구조체에 개로운 상품 추
  for(int j=0; j<2; j++){
 8000600:	2300      	movs	r3, #0
 8000602:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000606:	e009      	b.n	800061c <main+0x68>
	  add_product(&cart,j);
 8000608:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800060c:	482d      	ldr	r0, [pc, #180]	; (80006c4 <main+0x110>)
 800060e:	f000 fab3 	bl	8000b78 <add_product>
  for(int j=0; j<2; j++){
 8000612:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000616:	3301      	adds	r3, #1
 8000618:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800061c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000620:	2b01      	cmp	r3, #1
 8000622:	ddf1      	ble.n	8000608 <main+0x54>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0); // EXTI0 인터럽트 우선순위 설정
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	2006      	movs	r0, #6
 800062a:	f001 ff0c 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn); // EXTI0 인터럽트 활성화
 800062e:	2006      	movs	r0, #6
 8000630:	f001 ff25 	bl	800247e <HAL_NVIC_EnableIRQ>
  while (1)
  {

	HAL_Delay(50);
 8000634:	2032      	movs	r0, #50	; 0x32
 8000636:	f001 fe07 	bl	8002248 <HAL_Delay>
	convert_menu_string(cart, buffer);
 800063a:	4c22      	ldr	r4, [pc, #136]	; (80006c4 <main+0x110>)
 800063c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000640:	933a      	str	r3, [sp, #232]	; 0xe8
 8000642:	4668      	mov	r0, sp
 8000644:	f104 0310 	add.w	r3, r4, #16
 8000648:	22e8      	movs	r2, #232	; 0xe8
 800064a:	4619      	mov	r1, r3
 800064c:	f005 fcf6 	bl	800603c <memcpy>
 8000650:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000654:	f000 fb04 	bl	8000c60 <convert_menu_string>
	sprintf(total_price_buffer, " Total Price : %12d", cart.cart_total_price);
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <main+0x110>)
 800065a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	491a      	ldr	r1, [pc, #104]	; (80006cc <main+0x118>)
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fd00 	bl	8006068 <siprintf>

	for (int k=0; k<cart.product_num; k++){
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800066e:	e016      	b.n	800069e <main+0xea>
		  BSP_LCD_DisplayStringAtLine(2*(k+1), buffer[k]);
 8000670:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000674:	3301      	adds	r3, #1
 8000676:	b29b      	uxth	r3, r3
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	b298      	uxth	r0, r3
 800067c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000680:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000684:	4613      	mov	r3, r2
 8000686:	011b      	lsls	r3, r3, #4
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	440b      	add	r3, r1
 800068e:	4619      	mov	r1, r3
 8000690:	f001 f882 	bl	8001798 <BSP_LCD_DisplayStringAtLine>
	for (int k=0; k<cart.product_num; k++){
 8000694:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000698:	3301      	adds	r3, #1
 800069a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <main+0x110>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80006a6:	429a      	cmp	r2, r3
 80006a8:	dbe2      	blt.n	8000670 <main+0xbc>
	  }
	BSP_LCD_DisplayStringAtLine(10, total_price_buffer);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	200a      	movs	r0, #10
 80006b0:	f001 f872 	bl	8001798 <BSP_LCD_DisplayStringAtLine>
	Draw_Line();
 80006b4:	f000 fa34 	bl	8000b20 <Draw_Line>
	HAL_Delay(500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006bc:	f001 fdc4 	bl	8002248 <HAL_Delay>
	HAL_Delay(50);
 80006c0:	e7b8      	b.n	8000634 <main+0x80>
 80006c2:	bf00      	nop
 80006c4:	200002e0 	.word	0x200002e0
 80006c8:	ff0000ff 	.word	0xff0000ff
 80006cc:	08006940 	.word	0x08006940

080006d0 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_6)
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	2b40      	cmp	r3, #64	; 0x40
 80006de:	d105      	bne.n	80006ec <HAL_GPIO_EXTI_Callback+0x1c>
    {
//    	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
    	add_product(&cart, cart.product_num);
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_GPIO_EXTI_Callback+0x24>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <HAL_GPIO_EXTI_Callback+0x24>)
 80006e8:	f000 fa46 	bl	8000b78 <add_product>
    }
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200002e0 	.word	0x200002e0

080006f8 <SystemClock_Config>:
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 fca6 	bl	8006058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <SystemClock_Config+0xd0>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a29      	ldr	r2, [pc, #164]	; (80007c8 <SystemClock_Config+0xd0>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <SystemClock_Config+0xd0>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <SystemClock_Config+0xd4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a24      	ldr	r2, [pc, #144]	; (80007cc <SystemClock_Config+0xd4>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <SystemClock_Config+0xd4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000764:	23d8      	movs	r3, #216	; 0xd8
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800076c:	2309      	movs	r3, #9
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fa25 	bl	8003bc4 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000780:	f000 fabe 	bl	8000d00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000784:	f003 f90c 	bl	80039a0 <HAL_PWREx_EnableOverDrive>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800078e:	f000 fab7 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2302      	movs	r3, #2
 8000798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2107      	movs	r1, #7
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 fcab 	bl	800410c <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007bc:	f000 faa0 	bl	8000d00 <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3750      	adds	r7, #80	; 0x50
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_CRC_Init+0x3c>)
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <MX_CRC_Init+0x40>)
 80007d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_CRC_Init+0x3c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_CRC_Init+0x3c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_CRC_Init+0x3c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_CRC_Init+0x3c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_CRC_Init+0x3c>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_CRC_Init+0x3c>)
 80007fa:	f001 fe5b 	bl	80024b4 <HAL_CRC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000804:	f000 fa7c 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000098 	.word	0x20000098
 8000810:	40023000 	.word	0x40023000

08000814 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_DMA2D_Init+0x5c>)
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <MX_DMA2D_Init+0x60>)
 800081c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_DMA2D_Init+0x5c>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_DMA2D_Init+0x5c>)
 8000826:	2202      	movs	r2, #2
 8000828:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_DMA2D_Init+0x5c>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_DMA2D_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_DMA2D_Init+0x5c>)
 8000838:	2202      	movs	r2, #2
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_DMA2D_Init+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_DMA2D_Init+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <MX_DMA2D_Init+0x5c>)
 800084a:	f002 f96d 	bl	8002b28 <HAL_DMA2D_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000854:	f000 fa54 	bl	8000d00 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000858:	2101      	movs	r1, #1
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_DMA2D_Init+0x5c>)
 800085c:	f002 fac2 	bl	8002de4 <HAL_DMA2D_ConfigLayer>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000866:	f000 fa4b 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000bc 	.word	0x200000bc
 8000874:	4002b000 	.word	0x4002b000

08000878 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_QUADSPI_Init+0x50>)
 800087e:	4a13      	ldr	r2, [pc, #76]	; (80008cc <MX_QUADSPI_Init+0x54>)
 8000880:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_QUADSPI_Init+0x50>)
 8000884:	22ff      	movs	r2, #255	; 0xff
 8000886:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_QUADSPI_Init+0x50>)
 800088a:	2201      	movs	r2, #1
 800088c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_QUADSPI_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_QUADSPI_Init+0x50>)
 8000896:	2201      	movs	r2, #1
 8000898:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_QUADSPI_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_QUADSPI_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_QUADSPI_Init+0x50>)
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_QUADSPI_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_QUADSPI_Init+0x50>)
 80008b4:	f003 f8c4 	bl	8003a40 <HAL_QSPI_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80008be:	f000 fa1f 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000fc 	.word	0x200000fc
 80008cc:	a0001000 	.word	0xa0001000

080008d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_UART4_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_UART4_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_UART4_Init+0x58>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_UART4_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_UART4_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_UART4_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_UART4_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_UART4_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_UART4_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_UART4_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_UART4_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_UART4_Init+0x58>)
 8000914:	f004 fa59 	bl	8004dca <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f9ef 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000148 	.word	0x20000148
 800092c:	40004c00 	.word	0x40004c00

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_USART3_UART_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000974:	f004 fa29 	bl	8004dca <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f9bf 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001d0 	.word	0x200001d0
 800098c:	40004800 	.word	0x40004800

08000990 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USART6_UART_Init+0x58>)
 8000996:	4a15      	ldr	r2, [pc, #84]	; (80009ec <MX_USART6_UART_Init+0x5c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_USART6_UART_Init+0x58>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART6_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_USART6_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART6_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART6_UART_Init+0x58>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART6_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART6_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART6_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART6_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART6_UART_Init+0x58>)
 80009d4:	f004 f9f9 	bl	8004dca <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 f98f 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000258 	.word	0x20000258
 80009ec:	40011400 	.word	0x40011400

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a39      	ldr	r2, [pc, #228]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a33      	ldr	r2, [pc, #204]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a2d      	ldr	r2, [pc, #180]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a27      	ldr	r2, [pc, #156]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	4816      	ldr	r0, [pc, #88]	; (8000af4 <MX_GPIO_Init+0x104>)
 8000a9c:	f002 fc7c 	bl	8003398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <MX_GPIO_Init+0x104>)
 8000ab8:	f002 fac2 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4808      	ldr	r0, [pc, #32]	; (8000af4 <MX_GPIO_Init+0x104>)
 8000ad2:	f002 fab5 	bl	8003040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2017      	movs	r0, #23
 8000adc:	f001 fcb3 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ae0:	2017      	movs	r0, #23
 8000ae2:	f001 fccc 	bl	800247e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3730      	adds	r7, #48	; 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40021800 	.word	0x40021800

08000af8 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* LCD Initialization */
  BSP_LCD_Init();
 8000afc:	f000 fbae 	bl	800125c <BSP_LCD_Init>

  /* LCD Initialization */
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000b00:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 fc41 	bl	800138c <BSP_LCD_LayerDefaultInit>

  /* Enable the LCD */
  BSP_LCD_DisplayOn();
 8000b0a:	f000 ff71 	bl	80019f0 <BSP_LCD_DisplayOn>

  /* Select the LCD Background Layer  */
  BSP_LCD_SelectLayer(0);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 fc9c 	bl	800144c <BSP_LCD_SelectLayer>

  /* Clear the Background Layer */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 fd0a 	bl	8001530 <BSP_LCD_Clear>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <Draw_Line>:

static void Draw_Line(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

	BSP_LCD_DrawLine(10,10,470,10);
 8000b24:	230a      	movs	r3, #10
 8000b26:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8000b2a:	210a      	movs	r1, #10
 8000b2c:	200a      	movs	r0, #10
 8000b2e:	f000 fe4b 	bl	80017c8 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(10,10,10,265);
 8000b32:	f240 1309 	movw	r3, #265	; 0x109
 8000b36:	220a      	movs	r2, #10
 8000b38:	210a      	movs	r1, #10
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f000 fe44 	bl	80017c8 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(470,10,470,265);
 8000b40:	f240 1309 	movw	r3, #265	; 0x109
 8000b44:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8000b48:	210a      	movs	r1, #10
 8000b4a:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8000b4e:	f000 fe3b 	bl	80017c8 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(10,265,470,265);
 8000b52:	f240 1309 	movw	r3, #265	; 0x109
 8000b56:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8000b5a:	f240 1109 	movw	r1, #265	; 0x109
 8000b5e:	200a      	movs	r0, #10
 8000b60:	f000 fe32 	bl	80017c8 <BSP_LCD_DrawLine>
	BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"SMART CART", CENTER_MODE);
 8000b64:	2301      	movs	r3, #1
 8000b66:	4a03      	ldr	r2, [pc, #12]	; (8000b74 <Draw_Line+0x54>)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 fd4c 	bl	8001608 <BSP_LCD_DisplayStringAt>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	08006954 	.word	0x08006954

08000b78 <add_product>:

static void add_product(Cart* cart, int n){
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
	  cart->p[n] = (Product){.price = 10000*(n+1), .quantity = n+1};
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b8a:	fb02 f003 	mul.w	r0, r2, r3
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	1c59      	adds	r1, r3, #1
 8000b92:	687c      	ldr	r4, [r7, #4]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	4423      	add	r3, r4
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
 8000bae:	615a      	str	r2, [r3, #20]
 8000bb0:	687c      	ldr	r4, [r7, #4]
 8000bb2:	683a      	ldr	r2, [r7, #0]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	4423      	add	r3, r4
 8000bbe:	3310      	adds	r3, #16
 8000bc0:	6018      	str	r0, [r3, #0]
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4403      	add	r3, r0
 8000bd0:	3314      	adds	r3, #20
 8000bd2:	6019      	str	r1, [r3, #0]
	  sprintf(cart->p[n].name, "product%d", n+1);
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	1d18      	adds	r0, r3, #4
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	3301      	adds	r3, #1
 8000be8:	461a      	mov	r2, r3
 8000bea:	491c      	ldr	r1, [pc, #112]	; (8000c5c <add_product+0xe4>)
 8000bec:	f005 fa3c 	bl	8006068 <siprintf>
	  cart->p[n].total_price = cart->p[n].price * cart->p[n].quantity;
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	4413      	add	r3, r2
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	440b      	add	r3, r1
 8000bfe:	3310      	adds	r3, #16
 8000c00:	6819      	ldr	r1, [r3, #0]
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	4403      	add	r3, r0
 8000c10:	3314      	adds	r3, #20
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	fb03 f101 	mul.w	r1, r3, r1
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	4403      	add	r3, r0
 8000c26:	3318      	adds	r3, #24
 8000c28:	6019      	str	r1, [r3, #0]
	  cart->product_num++;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	601a      	str	r2, [r3, #0]
	  cart->cart_total_price += cart->p[n].total_price;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4403      	add	r3, r0
 8000c48:	3318      	adds	r3, #24
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	18ca      	adds	r2, r1, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  }
 8000c54:	bf00      	nop
 8000c56:	3724      	adds	r7, #36	; 0x24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd90      	pop	{r4, r7, pc}
 8000c5c:	08006960 	.word	0x08006960

08000c60 <convert_menu_string>:

static void convert_menu_string(Cart cart, uint8_t buffer[][BUFFER_SIZE]){
 8000c60:	b084      	sub	sp, #16
 8000c62:	b5b0      	push	{r4, r5, r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af02      	add	r7, sp, #8
 8000c68:	f107 0418 	add.w	r4, r7, #24
 8000c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int j=0; j<cart.product_num; j++){
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	e035      	b.n	8000ce2 <convert_menu_string+0x82>

		  sprintf(buffer[j], " %s|%d  |%2d|%6d", cart.p[j].name, cart.p[j].price, cart.p[j].quantity, cart.p[j].total_price);
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	461a      	mov	r2, r3
 8000c82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c86:	1898      	adds	r0, r3, r2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	3318      	adds	r3, #24
 8000c94:	443b      	add	r3, r7
 8000c96:	1d1c      	adds	r4, r3, #4
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	3318      	adds	r3, #24
 8000ca4:	443b      	add	r3, r7
 8000ca6:	3310      	adds	r3, #16
 8000ca8:	681d      	ldr	r5, [r3, #0]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	3318      	adds	r3, #24
 8000cb6:	443b      	add	r3, r7
 8000cb8:	3314      	adds	r3, #20
 8000cba:	6819      	ldr	r1, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	3318      	adds	r3, #24
 8000cc8:	443b      	add	r3, r7
 8000cca:	3318      	adds	r3, #24
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	9301      	str	r3, [sp, #4]
 8000cd0:	9100      	str	r1, [sp, #0]
 8000cd2:	462b      	mov	r3, r5
 8000cd4:	4622      	mov	r2, r4
 8000cd6:	4909      	ldr	r1, [pc, #36]	; (8000cfc <convert_menu_string+0x9c>)
 8000cd8:	f005 f9c6 	bl	8006068 <siprintf>
	for(int j=0; j<cart.product_num; j++){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	dbc5      	blt.n	8000c76 <convert_menu_string+0x16>
	  }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	0800696c 	.word	0x0800696c

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	210f      	movs	r1, #15
 8000d46:	f06f 0001 	mvn.w	r0, #1
 8000d4a:	f001 fb7c 	bl	8002446 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_CRC_MspInit+0x38>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10b      	bne.n	8000d86 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_CRC_MspInit+0x3c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <HAL_CRC_MspInit+0x3c>)
 8000d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_CRC_MspInit+0x3c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023000 	.word	0x40023000
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_DMA2D_MspInit+0x38>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d10b      	bne.n	8000dc6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_DMA2D_MspInit+0x3c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <HAL_DMA2D_MspInit+0x3c>)
 8000db4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_DMA2D_MspInit+0x3c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	4002b000 	.word	0x4002b000
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a33      	ldr	r2, [pc, #204]	; (8000ec8 <HAL_QSPI_MspInit+0xec>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d160      	bne.n	8000ec0 <HAL_QSPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e02:	4a32      	ldr	r2, [pc, #200]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6393      	str	r3, [r2, #56]	; 0x38
 8000e0a:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a2c      	ldr	r2, [pc, #176]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a26      	ldr	r2, [pc, #152]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <HAL_QSPI_MspInit+0xf0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> QUADSPI_BK2_NCS
    PH3     ------> QUADSPI_BK2_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e70:	2309      	movs	r3, #9
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <HAL_QSPI_MspInit+0xf4>)
 8000e7c:	f002 f8e0 	bl	8003040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000e80:	230c      	movs	r3, #12
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e90:	2309      	movs	r3, #9
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <HAL_QSPI_MspInit+0xf8>)
 8000e9c:	f002 f8d0 	bl	8003040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4807      	ldr	r0, [pc, #28]	; (8000ed8 <HAL_QSPI_MspInit+0xfc>)
 8000ebc:	f002 f8c0 	bl	8003040 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3730      	adds	r7, #48	; 0x30
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	a0001000 	.word	0xa0001000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	40021c00 	.word	0x40021c00
 8000ed8:	40020400 	.word	0x40020400

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0b0      	sub	sp, #192	; 0xc0
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef8:	2284      	movs	r2, #132	; 0x84
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 f8ab 	bl	8006058 <memset>
  if(huart->Instance==UART4)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a79      	ldr	r2, [pc, #484]	; (80010ec <HAL_UART_MspInit+0x210>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d13c      	bne.n	8000f86 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 fadc 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f26:	f7ff feeb 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f2a:	4b71      	ldr	r3, [pc, #452]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a70      	ldr	r2, [pc, #448]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b6e      	ldr	r3, [pc, #440]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b6b      	ldr	r3, [pc, #428]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a6a      	ldr	r2, [pc, #424]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b68      	ldr	r3, [pc, #416]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
 8000f58:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f72:	2308      	movs	r3, #8
 8000f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	485d      	ldr	r0, [pc, #372]	; (80010f4 <HAL_UART_MspInit+0x218>)
 8000f80:	f002 f85e 	bl	8003040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f84:	e0ae      	b.n	80010e4 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a5b      	ldr	r2, [pc, #364]	; (80010f8 <HAL_UART_MspInit+0x21c>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d15f      	bne.n	8001050 <HAL_UART_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fa9a 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000faa:	f7ff fea9 	bl	8000d00 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fae:	4b50      	ldr	r3, [pc, #320]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a4f      	ldr	r2, [pc, #316]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a49      	ldr	r2, [pc, #292]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	4b44      	ldr	r3, [pc, #272]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a43      	ldr	r2, [pc, #268]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001010:	2307      	movs	r3, #7
 8001012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800101a:	4619      	mov	r1, r3
 800101c:	4837      	ldr	r0, [pc, #220]	; (80010fc <HAL_UART_MspInit+0x220>)
 800101e:	f002 f80f 	bl	8003040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800103c:	2307      	movs	r3, #7
 800103e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001042:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001046:	4619      	mov	r1, r3
 8001048:	482d      	ldr	r0, [pc, #180]	; (8001100 <HAL_UART_MspInit+0x224>)
 800104a:	f001 fff9 	bl	8003040 <HAL_GPIO_Init>
}
 800104e:	e049      	b.n	80010e4 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART6)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a2b      	ldr	r2, [pc, #172]	; (8001104 <HAL_UART_MspInit+0x228>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d144      	bne.n	80010e4 <HAL_UART_MspInit+0x208>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800105a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fa34 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001076:	f7ff fe43 	bl	8000d00 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_UART_MspInit+0x214>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8001080:	f043 0320 	orr.w	r3, r3, #32
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_UART_MspInit+0x214>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80010aa:	23c0      	movs	r3, #192	; 0xc0
 80010ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010c2:	2308      	movs	r3, #8
 80010c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010cc:	4619      	mov	r1, r3
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <HAL_UART_MspInit+0x220>)
 80010d0:	f001 ffb6 	bl	8003040 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2047      	movs	r0, #71	; 0x47
 80010da:	f001 f9b4 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80010de:	2047      	movs	r0, #71	; 0x47
 80010e0:	f001 f9cd 	bl	800247e <HAL_NVIC_EnableIRQ>
}
 80010e4:	bf00      	nop
 80010e6:	37c0      	adds	r7, #192	; 0xc0
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40004c00 	.word	0x40004c00
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40004800 	.word	0x40004800
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40011400 	.word	0x40011400

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f001 f858 	bl	8002208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001160:	2040      	movs	r0, #64	; 0x40
 8001162:	f002 f933 	bl	80033cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <USART6_IRQHandler+0x10>)
 8001172:	f003 fe79 	bl	8004e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000258 	.word	0x20000258

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f004 ff1a 	bl	8005fe8 <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20050000 	.word	0x20050000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	200003d8 	.word	0x200003d8
 80011e8:	20000638 	.word	0x20000638

080011ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001236:	f7ff ffd9 	bl	80011ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f004 fedb 	bl	8005ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff f9b9 	bl	80005b4 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800124c:	0800849c 	.word	0x0800849c
  ldr r2, =_sbss
 8001250:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001254:	20000638 	.word	0x20000638

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>
	...

0800125c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001260:	4b31      	ldr	r3, [pc, #196]	; (8001328 <BSP_LCD_Init+0xcc>)
 8001262:	2228      	movs	r2, #40	; 0x28
 8001264:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001266:	4b30      	ldr	r3, [pc, #192]	; (8001328 <BSP_LCD_Init+0xcc>)
 8001268:	2209      	movs	r2, #9
 800126a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <BSP_LCD_Init+0xcc>)
 800126e:	2235      	movs	r2, #53	; 0x35
 8001270:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <BSP_LCD_Init+0xcc>)
 8001274:	220b      	movs	r2, #11
 8001276:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <BSP_LCD_Init+0xcc>)
 800127a:	f240 121b 	movw	r2, #283	; 0x11b
 800127e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <BSP_LCD_Init+0xcc>)
 8001282:	f240 2215 	movw	r2, #533	; 0x215
 8001286:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <BSP_LCD_Init+0xcc>)
 800128a:	f240 121d 	movw	r2, #285	; 0x11d
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <BSP_LCD_Init+0xcc>)
 8001292:	f240 2235 	movw	r2, #565	; 0x235
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001298:	2100      	movs	r1, #0
 800129a:	4823      	ldr	r0, [pc, #140]	; (8001328 <BSP_LCD_Init+0xcc>)
 800129c:	f000 fca0 	bl	8001be0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012a6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012aa:	f44f 7288 	mov.w	r2, #272	; 0x110
 80012ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <BSP_LCD_Init+0xd0>)
 80012e4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80012e6:	4810      	ldr	r0, [pc, #64]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012e8:	f002 f9ac 	bl	8003644 <HAL_LTDC_GetState>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d103      	bne.n	80012fa <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80012f2:	2100      	movs	r1, #0
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012f6:	f000 fb99 	bl	8001a2c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80012fa:	480b      	ldr	r0, [pc, #44]	; (8001328 <BSP_LCD_Init+0xcc>)
 80012fc:	f002 f87e 	bl	80033fc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001306:	480a      	ldr	r0, [pc, #40]	; (8001330 <BSP_LCD_Init+0xd4>)
 8001308:	f002 f846 	bl	8003398 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2108      	movs	r1, #8
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <BSP_LCD_Init+0xd8>)
 8001312:	f002 f841 	bl	8003398 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001316:	f000 fd83 	bl	8001e20 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <BSP_LCD_Init+0xdc>)
 800131c:	f000 f8d8 	bl	80014d0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200003dc 	.word	0x200003dc
 800132c:	40016800 	.word	0x40016800
 8001330:	40022000 	.word	0x40022000
 8001334:	40022800 	.word	0x40022800
 8001338:	20000004 	.word	0x20000004

0800133c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <BSP_LCD_GetXSize+0x20>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <BSP_LCD_GetXSize+0x24>)
 8001346:	2134      	movs	r1, #52	; 0x34
 8001348:	fb01 f303 	mul.w	r3, r1, r3
 800134c:	4413      	add	r3, r2
 800134e:	3360      	adds	r3, #96	; 0x60
 8001350:	681b      	ldr	r3, [r3, #0]
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	200004c4 	.word	0x200004c4
 8001360:	200003dc 	.word	0x200003dc

08001364 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <BSP_LCD_GetYSize+0x20>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <BSP_LCD_GetYSize+0x24>)
 800136e:	2134      	movs	r1, #52	; 0x34
 8001370:	fb01 f303 	mul.w	r3, r1, r3
 8001374:	4413      	add	r3, r2
 8001376:	3364      	adds	r3, #100	; 0x64
 8001378:	681b      	ldr	r3, [r3, #0]
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	200004c4 	.word	0x200004c4
 8001388:	200003dc 	.word	0x200003dc

0800138c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800138c:	b580      	push	{r7, lr}
 800138e:	b090      	sub	sp, #64	; 0x40
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800139c:	f7ff ffce 	bl	800133c <BSP_LCD_GetXSize>
 80013a0:	4603      	mov	r3, r0
 80013a2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80013a8:	f7ff ffdc 	bl	8001364 <BSP_LCD_GetYSize>
 80013ac:	4603      	mov	r3, r0
 80013ae:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80013b8:	23ff      	movs	r3, #255	; 0xff
 80013ba:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013d8:	2307      	movs	r3, #7
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80013dc:	f7ff ffae 	bl	800133c <BSP_LCD_GetXSize>
 80013e0:	4603      	mov	r3, r0
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80013e4:	f7ff ffbe 	bl	8001364 <BSP_LCD_GetYSize>
 80013e8:	4603      	mov	r3, r0
 80013ea:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80013ec:	88fa      	ldrh	r2, [r7, #6]
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4619      	mov	r1, r3
 80013f4:	4812      	ldr	r0, [pc, #72]	; (8001440 <BSP_LCD_LayerDefaultInit+0xb4>)
 80013f6:	f002 f8e7 	bl	80035c8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80013fa:	88fa      	ldrh	r2, [r7, #6]
 80013fc:	4911      	ldr	r1, [pc, #68]	; (8001444 <BSP_LCD_LayerDefaultInit+0xb8>)
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	3304      	adds	r3, #4
 800140a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800140e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001410:	88fa      	ldrh	r2, [r7, #6]
 8001412:	490c      	ldr	r1, [pc, #48]	; (8001444 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	3308      	adds	r3, #8
 8001420:	4a09      	ldr	r2, [pc, #36]	; (8001448 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001422:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001424:	88fa      	ldrh	r2, [r7, #6]
 8001426:	4907      	ldr	r1, [pc, #28]	; (8001444 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	3740      	adds	r7, #64	; 0x40
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200003dc 	.word	0x200003dc
 8001444:	200004c8 	.word	0x200004c8
 8001448:	20000004 	.word	0x20000004

0800144c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <BSP_LCD_SelectLayer+0x1c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
} 
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	200004c4 	.word	0x200004c4

0800146c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <BSP_LCD_SetTextColor+0x28>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <BSP_LCD_SetTextColor+0x2c>)
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	601a      	str	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	200004c4 	.word	0x200004c4
 8001498:	200004c8 	.word	0x200004c8

0800149c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <BSP_LCD_SetBackColor+0x2c>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4908      	ldr	r1, [pc, #32]	; (80014cc <BSP_LCD_SetBackColor+0x30>)
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3304      	adds	r3, #4
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	601a      	str	r2, [r3, #0]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	200004c4 	.word	0x200004c4
 80014cc:	200004c8 	.word	0x200004c8

080014d0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <BSP_LCD_SetFont+0x2c>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4908      	ldr	r1, [pc, #32]	; (8001500 <BSP_LCD_SetFont+0x30>)
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	3308      	adds	r3, #8
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	601a      	str	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200004c4 	.word	0x200004c4
 8001500:	200004c8 	.word	0x200004c8

08001504 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <BSP_LCD_GetFont+0x24>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4907      	ldr	r1, [pc, #28]	; (800152c <BSP_LCD_GetFont+0x28>)
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3308      	adds	r3, #8
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	200004c4 	.word	0x200004c4
 800152c:	200004c8 	.word	0x200004c8

08001530 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af02      	add	r7, sp, #8
 8001536:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <BSP_LCD_Clear+0x48>)
 800153a:	681c      	ldr	r4, [r3, #0]
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <BSP_LCD_Clear+0x48>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <BSP_LCD_Clear+0x4c>)
 8001542:	2134      	movs	r1, #52	; 0x34
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	4413      	add	r3, r2
 800154a:	335c      	adds	r3, #92	; 0x5c
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	461e      	mov	r6, r3
 8001550:	f7ff fef4 	bl	800133c <BSP_LCD_GetXSize>
 8001554:	4605      	mov	r5, r0
 8001556:	f7ff ff05 	bl	8001364 <BSP_LCD_GetYSize>
 800155a:	4602      	mov	r2, r0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	2300      	movs	r3, #0
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	462a      	mov	r2, r5
 8001568:	4631      	mov	r1, r6
 800156a:	4620      	mov	r0, r4
 800156c:	f000 fc0c 	bl	8001d88 <LL_FillBuffer>
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001578:	200004c4 	.word	0x200004c4
 800157c:	200003dc 	.word	0x200003dc

08001580 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
 800158a:	460b      	mov	r3, r1
 800158c:	80bb      	strh	r3, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <BSP_LCD_DisplayChar+0x80>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	491b      	ldr	r1, [pc, #108]	; (8001604 <BSP_LCD_DisplayChar+0x84>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	3308      	adds	r3, #8
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <BSP_LCD_DisplayChar+0x80>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4c14      	ldr	r4, [pc, #80]	; (8001604 <BSP_LCD_DisplayChar+0x84>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4423      	add	r3, r4
 80015be:	3308      	adds	r3, #8
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015c4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <BSP_LCD_DisplayChar+0x80>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4c0d      	ldr	r4, [pc, #52]	; (8001604 <BSP_LCD_DisplayChar+0x84>)
 80015ce:	4613      	mov	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4423      	add	r3, r4
 80015d8:	3308      	adds	r3, #8
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	889b      	ldrh	r3, [r3, #4]
 80015de:	3307      	adds	r3, #7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da00      	bge.n	80015e6 <BSP_LCD_DisplayChar+0x66>
 80015e4:	3307      	adds	r3, #7
 80015e6:	10db      	asrs	r3, r3, #3
 80015e8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015ec:	18ca      	adds	r2, r1, r3
 80015ee:	88b9      	ldrh	r1, [r7, #4]
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fb10 	bl	8001c18 <DrawChar>
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	200004c4 	.word	0x200004c4
 8001604:	200004c8 	.word	0x200004c8

08001608 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	60ba      	str	r2, [r7, #8]
 8001610:	461a      	mov	r2, r3
 8001612:	4603      	mov	r3, r0
 8001614:	81fb      	strh	r3, [r7, #14]
 8001616:	460b      	mov	r3, r1
 8001618:	81bb      	strh	r3, [r7, #12]
 800161a:	4613      	mov	r3, r2
 800161c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800161e:	2301      	movs	r3, #1
 8001620:	83fb      	strh	r3, [r7, #30]
 8001622:	2300      	movs	r3, #0
 8001624:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001632:	e002      	b.n	800163a <BSP_LCD_DisplayStringAt+0x32>
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	3301      	adds	r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	617a      	str	r2, [r7, #20]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f6      	bne.n	8001634 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001646:	f7ff fe79 	bl	800133c <BSP_LCD_GetXSize>
 800164a:	4601      	mov	r1, r0
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <BSP_LCD_DisplayStringAt+0x188>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4850      	ldr	r0, [pc, #320]	; (8001794 <BSP_LCD_DisplayStringAt+0x18c>)
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4403      	add	r3, r0
 800165c:	3308      	adds	r3, #8
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	889b      	ldrh	r3, [r3, #4]
 8001662:	fbb1 f3f3 	udiv	r3, r1, r3
 8001666:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d01c      	beq.n	80016a8 <BSP_LCD_DisplayStringAt+0xa0>
 800166e:	2b03      	cmp	r3, #3
 8001670:	dc33      	bgt.n	80016da <BSP_LCD_DisplayStringAt+0xd2>
 8001672:	2b01      	cmp	r3, #1
 8001674:	d002      	beq.n	800167c <BSP_LCD_DisplayStringAt+0x74>
 8001676:	2b02      	cmp	r3, #2
 8001678:	d019      	beq.n	80016ae <BSP_LCD_DisplayStringAt+0xa6>
 800167a:	e02e      	b.n	80016da <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad1      	subs	r1, r2, r3
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <BSP_LCD_DisplayStringAt+0x188>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4843      	ldr	r0, [pc, #268]	; (8001794 <BSP_LCD_DisplayStringAt+0x18c>)
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4403      	add	r3, r0
 8001692:	3308      	adds	r3, #8
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	889b      	ldrh	r3, [r3, #4]
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	b29a      	uxth	r2, r3
 80016a0:	89fb      	ldrh	r3, [r7, #14]
 80016a2:	4413      	add	r3, r2
 80016a4:	83fb      	strh	r3, [r7, #30]
      break;
 80016a6:	e01b      	b.n	80016e0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	83fb      	strh	r3, [r7, #30]
      break;
 80016ac:	e018      	b.n	80016e0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	b299      	uxth	r1, r3
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <BSP_LCD_DisplayStringAt+0x188>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4836      	ldr	r0, [pc, #216]	; (8001794 <BSP_LCD_DisplayStringAt+0x18c>)
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4403      	add	r3, r0
 80016c6:	3308      	adds	r3, #8
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	889b      	ldrh	r3, [r3, #4]
 80016cc:	fb11 f303 	smulbb	r3, r1, r3
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	83fb      	strh	r3, [r7, #30]
      break;
 80016d8:	e002      	b.n	80016e0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80016da:	89fb      	ldrh	r3, [r7, #14]
 80016dc:	83fb      	strh	r3, [r7, #30]
      break;
 80016de:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80016e0:	8bfb      	ldrh	r3, [r7, #30]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <BSP_LCD_DisplayStringAt+0xe6>
 80016e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	da1d      	bge.n	800172a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80016f2:	e01a      	b.n	800172a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	89b9      	ldrh	r1, [r7, #12]
 80016fa:	8bfb      	ldrh	r3, [r7, #30]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff3f 	bl	8001580 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <BSP_LCD_DisplayStringAt+0x188>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4923      	ldr	r1, [pc, #140]	; (8001794 <BSP_LCD_DisplayStringAt+0x18c>)
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	3308      	adds	r3, #8
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	889a      	ldrh	r2, [r3, #4]
 8001718:	8bfb      	ldrh	r3, [r7, #30]
 800171a:	4413      	add	r3, r2
 800171c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3301      	adds	r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
    i++;
 8001724:	8bbb      	ldrh	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2dc      	uxtb	r4, r3
 8001738:	f7ff fe00 	bl	800133c <BSP_LCD_GetXSize>
 800173c:	8bb9      	ldrh	r1, [r7, #28]
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <BSP_LCD_DisplayStringAt+0x188>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4d14      	ldr	r5, [pc, #80]	; (8001794 <BSP_LCD_DisplayStringAt+0x18c>)
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	442b      	add	r3, r5
 800174e:	3308      	adds	r3, #8
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	889b      	ldrh	r3, [r3, #4]
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	1ac3      	subs	r3, r0, r3
 800175a:	b299      	uxth	r1, r3
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <BSP_LCD_DisplayStringAt+0x188>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <BSP_LCD_DisplayStringAt+0x18c>)
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4403      	add	r3, r0
 800176c:	3308      	adds	r3, #8
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	4299      	cmp	r1, r3
 8001774:	bf2c      	ite	cs
 8001776:	2301      	movcs	r3, #1
 8001778:	2300      	movcc	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	4023      	ands	r3, r4
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1b7      	bne.n	80016f4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bdb0      	pop	{r4, r5, r7, pc}
 800178e:	bf00      	nop
 8001790:	200004c4 	.word	0x200004c4
 8001794:	200004c8 	.word	0x200004c8

08001798 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80017a4:	f7ff feae 	bl	8001504 <BSP_LCD_GetFont>
 80017a8:	4603      	mov	r3, r0
 80017aa:	88db      	ldrh	r3, [r3, #6]
 80017ac:	88fa      	ldrh	r2, [r7, #6]
 80017ae:	fb12 f303 	smulbb	r3, r2, r3
 80017b2:	b299      	uxth	r1, r3
 80017b4:	2303      	movs	r3, #3
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff ff25 	bl	8001608 <BSP_LCD_DisplayStringAt>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b08b      	sub	sp, #44	; 0x2c
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4604      	mov	r4, r0
 80017d0:	4608      	mov	r0, r1
 80017d2:	4611      	mov	r1, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	80fb      	strh	r3, [r7, #6]
 80017da:	4603      	mov	r3, r0
 80017dc:	80bb      	strh	r3, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	807b      	strh	r3, [r7, #2]
 80017e2:	4613      	mov	r3, r2
 80017e4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80017e6:	2300      	movs	r3, #0
 80017e8:	823b      	strh	r3, [r7, #16]
 80017ea:	2300      	movs	r3, #0
 80017ec:	81fb      	strh	r3, [r7, #14]
 80017ee:	2300      	movs	r3, #0
 80017f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017f2:	2300      	movs	r3, #0
 80017f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80017f6:	2300      	movs	r3, #0
 80017f8:	847b      	strh	r3, [r7, #34]	; 0x22
 80017fa:	2300      	movs	r3, #0
 80017fc:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 80017fe:	2300      	movs	r3, #0
 8001800:	83fb      	strh	r3, [r7, #30]
 8001802:	2300      	movs	r3, #0
 8001804:	83bb      	strh	r3, [r7, #28]
 8001806:	2300      	movs	r3, #0
 8001808:	837b      	strh	r3, [r7, #26]
 800180a:	2300      	movs	r3, #0
 800180c:	833b      	strh	r3, [r7, #24]
 800180e:	2300      	movs	r3, #0
 8001810:	82fb      	strh	r3, [r7, #22]
 8001812:	2300      	movs	r3, #0
 8001814:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	bfb8      	it	lt
 8001824:	425b      	neglt	r3, r3
 8001826:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8001828:	883a      	ldrh	r2, [r7, #0]
 800182a:	88bb      	ldrh	r3, [r7, #4]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	bfb8      	it	lt
 8001832:	425b      	neglt	r3, r3
 8001834:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800183a:	88bb      	ldrh	r3, [r7, #4]
 800183c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	429a      	cmp	r2, r3
 8001844:	d304      	bcc.n	8001850 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800184a:	2301      	movs	r3, #1
 800184c:	843b      	strh	r3, [r7, #32]
 800184e:	e005      	b.n	800185c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8001850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001854:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8001856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800185a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 800185c:	883a      	ldrh	r2, [r7, #0]
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d304      	bcc.n	800186e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8001868:	2301      	movs	r3, #1
 800186a:	83bb      	strh	r3, [r7, #28]
 800186c:	e005      	b.n	800187a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800186e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001872:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8001874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001878:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800187a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800187e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001882:	429a      	cmp	r2, r3
 8001884:	db11      	blt.n	80018aa <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8001886:	2300      	movs	r3, #0
 8001888:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800188a:	2300      	movs	r3, #0
 800188c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800188e:	8a3b      	ldrh	r3, [r7, #16]
 8001890:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8001892:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	da00      	bge.n	800189c <BSP_LCD_DrawLine+0xd4>
 800189a:	3301      	adds	r3, #1
 800189c:	105b      	asrs	r3, r3, #1
 800189e:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 80018a4:	8a3b      	ldrh	r3, [r7, #16]
 80018a6:	82bb      	strh	r3, [r7, #20]
 80018a8:	e010      	b.n	80018cc <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80018aa:	2300      	movs	r3, #0
 80018ac:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80018ae:	2300      	movs	r3, #0
 80018b0:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80018b2:	89fb      	ldrh	r3, [r7, #14]
 80018b4:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80018b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da00      	bge.n	80018c0 <BSP_LCD_DrawLine+0xf8>
 80018be:	3301      	adds	r3, #1
 80018c0:	105b      	asrs	r3, r3, #1
 80018c2:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 80018c4:	8a3b      	ldrh	r3, [r7, #16]
 80018c6:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	827b      	strh	r3, [r7, #18]
 80018d0:	e037      	b.n	8001942 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80018d2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80018d4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <BSP_LCD_DrawLine+0x190>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4c20      	ldr	r4, [pc, #128]	; (800195c <BSP_LCD_DrawLine+0x194>)
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4423      	add	r3, r4
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	f000 f839 	bl	8001960 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 80018ee:	8b3a      	ldrh	r2, [r7, #24]
 80018f0:	8afb      	ldrh	r3, [r7, #22]
 80018f2:	4413      	add	r3, r2
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 80018f8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80018fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001900:	429a      	cmp	r2, r3
 8001902:	db0e      	blt.n	8001922 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8001904:	8b3a      	ldrh	r2, [r7, #24]
 8001906:	8b7b      	ldrh	r3, [r7, #26]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29b      	uxth	r3, r3
 800190c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800190e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001912:	4413      	add	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8001918:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800191a:	8bfb      	ldrh	r3, [r7, #30]
 800191c:	4413      	add	r3, r2
 800191e:	b29b      	uxth	r3, r3
 8001920:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8001922:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001924:	8c3b      	ldrh	r3, [r7, #32]
 8001926:	4413      	add	r3, r2
 8001928:	b29b      	uxth	r3, r3
 800192a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 800192c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800192e:	8bbb      	ldrh	r3, [r7, #28]
 8001930:	4413      	add	r3, r2
 8001932:	b29b      	uxth	r3, r3
 8001934:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8001936:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800193a:	b29b      	uxth	r3, r3
 800193c:	3301      	adds	r3, #1
 800193e:	b29b      	uxth	r3, r3
 8001940:	827b      	strh	r3, [r7, #18]
 8001942:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001946:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800194a:	429a      	cmp	r2, r3
 800194c:	ddc1      	ble.n	80018d2 <BSP_LCD_DrawLine+0x10a>
  }
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	372c      	adds	r7, #44	; 0x2c
 8001954:	46bd      	mov	sp, r7
 8001956:	bd90      	pop	{r4, r7, pc}
 8001958:	200004c4 	.word	0x200004c4
 800195c:	200004c8 	.word	0x200004c8

08001960 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	603a      	str	r2, [r7, #0]
 800196a:	80fb      	strh	r3, [r7, #6]
 800196c:	460b      	mov	r3, r1
 800196e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <BSP_LCD_DrawPixel+0x88>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <BSP_LCD_DrawPixel+0x8c>)
 8001976:	2134      	movs	r1, #52	; 0x34
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	3348      	adds	r3, #72	; 0x48
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d116      	bne.n	80019b4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <BSP_LCD_DrawPixel+0x88>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <BSP_LCD_DrawPixel+0x8c>)
 800198c:	2134      	movs	r1, #52	; 0x34
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	335c      	adds	r3, #92	; 0x5c
 8001996:	681c      	ldr	r4, [r3, #0]
 8001998:	88bd      	ldrh	r5, [r7, #4]
 800199a:	f7ff fccf 	bl	800133c <BSP_LCD_GetXSize>
 800199e:	4603      	mov	r3, r0
 80019a0:	fb03 f205 	mul.w	r2, r3, r5
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4423      	add	r3, r4
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	b292      	uxth	r2, r2
 80019b0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80019b2:	e015      	b.n	80019e0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <BSP_LCD_DrawPixel+0x88>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <BSP_LCD_DrawPixel+0x8c>)
 80019ba:	2134      	movs	r1, #52	; 0x34
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	335c      	adds	r3, #92	; 0x5c
 80019c4:	681c      	ldr	r4, [r3, #0]
 80019c6:	88bd      	ldrh	r5, [r7, #4]
 80019c8:	f7ff fcb8 	bl	800133c <BSP_LCD_GetXSize>
 80019cc:	4603      	mov	r3, r0
 80019ce:	fb03 f205 	mul.w	r2, r3, r5
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4423      	add	r3, r4
 80019da:	461a      	mov	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdb0      	pop	{r4, r5, r7, pc}
 80019e8:	200004c4 	.word	0x200004c4
 80019ec:	200003dc 	.word	0x200003dc

080019f0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <BSP_LCD_DisplayOn+0x30>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <BSP_LCD_DisplayOn+0x30>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <BSP_LCD_DisplayOn+0x34>)
 8001a0c:	f001 fcc4 	bl	8003398 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001a10:	2201      	movs	r2, #1
 8001a12:	2108      	movs	r1, #8
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <BSP_LCD_DisplayOn+0x38>)
 8001a16:	f001 fcbf 	bl	8003398 <HAL_GPIO_WritePin>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200003dc 	.word	0x200003dc
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40022800 	.word	0x40022800

08001a2c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b090      	sub	sp, #64	; 0x40
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001a36:	4b64      	ldr	r3, [pc, #400]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a63      	ldr	r2, [pc, #396]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a4e:	4b5e      	ldr	r3, [pc, #376]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a5d      	ldr	r2, [pc, #372]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b5b      	ldr	r3, [pc, #364]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a66:	4b58      	ldr	r3, [pc, #352]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a57      	ldr	r2, [pc, #348]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b55      	ldr	r3, [pc, #340]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a7e:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a96:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a4b      	ldr	r2, [pc, #300]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b49      	ldr	r3, [pc, #292]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a45      	ldr	r2, [pc, #276]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001ab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ac6:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a3f      	ldr	r2, [pc, #252]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001ade:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a39      	ldr	r2, [pc, #228]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001af6:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a33      	ldr	r2, [pc, #204]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001afc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <BSP_LCD_MspInit+0x19c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001b0e:	2310      	movs	r3, #16
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001b1e:	230e      	movs	r3, #14
 8001b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001b22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b26:	4619      	mov	r1, r3
 8001b28:	4828      	ldr	r0, [pc, #160]	; (8001bcc <BSP_LCD_MspInit+0x1a0>)
 8001b2a:	f001 fa89 	bl	8003040 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001b38:	2309      	movs	r3, #9
 8001b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b40:	4619      	mov	r1, r3
 8001b42:	4823      	ldr	r0, [pc, #140]	; (8001bd0 <BSP_LCD_MspInit+0x1a4>)
 8001b44:	f001 fa7c 	bl	8003040 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8001b48:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001b52:	230e      	movs	r3, #14
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <BSP_LCD_MspInit+0x1a8>)
 8001b5e:	f001 fa6f 	bl	8003040 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001b62:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001b6c:	230e      	movs	r3, #14
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4818      	ldr	r0, [pc, #96]	; (8001bd8 <BSP_LCD_MspInit+0x1ac>)
 8001b78:	f001 fa62 	bl	8003040 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001b7c:	23f7      	movs	r3, #247	; 0xf7
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001b84:	230e      	movs	r3, #14
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4813      	ldr	r0, [pc, #76]	; (8001bdc <BSP_LCD_MspInit+0x1b0>)
 8001b90:	f001 fa56 	bl	8003040 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <BSP_LCD_MspInit+0x1a8>)
 8001ba6:	f001 fa4b 	bl	8003040 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001baa:	2308      	movs	r3, #8
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4808      	ldr	r0, [pc, #32]	; (8001bdc <BSP_LCD_MspInit+0x1b0>)
 8001bba:	f001 fa41 	bl	8003040 <HAL_GPIO_Init>
}
 8001bbe:	bf00      	nop
 8001bc0:	3740      	adds	r7, #64	; 0x40
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40021800 	.word	0x40021800
 8001bd4:	40022000 	.word	0x40022000
 8001bd8:	40022400 	.word	0x40022400
 8001bdc:	40022800 	.word	0x40022800

08001be0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <BSP_LCD_ClockConfig+0x34>)
 8001bec:	2208      	movs	r2, #8
 8001bee:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <BSP_LCD_ClockConfig+0x34>)
 8001bf2:	22c0      	movs	r2, #192	; 0xc0
 8001bf4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <BSP_LCD_ClockConfig+0x34>)
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <BSP_LCD_ClockConfig+0x34>)
 8001bfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001c04:	4803      	ldr	r0, [pc, #12]	; (8001c14 <BSP_LCD_ClockConfig+0x34>)
 8001c06:	f002 fc67 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200004e0 	.word	0x200004e0

08001c18 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	603a      	str	r2, [r7, #0]
 8001c22:	80fb      	strh	r3, [r7, #6]
 8001c24:	460b      	mov	r3, r1
 8001c26:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <DrawChar+0x168>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4953      	ldr	r1, [pc, #332]	; (8001d84 <DrawChar+0x16c>)
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	3308      	adds	r3, #8
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	88db      	ldrh	r3, [r3, #6]
 8001c46:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001c48:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <DrawChar+0x168>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	494d      	ldr	r1, [pc, #308]	; (8001d84 <DrawChar+0x16c>)
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	3308      	adds	r3, #8
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	889b      	ldrh	r3, [r3, #4]
 8001c5e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001c60:	8a3b      	ldrh	r3, [r7, #16]
 8001c62:	3307      	adds	r3, #7
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da00      	bge.n	8001c6a <DrawChar+0x52>
 8001c68:	3307      	adds	r3, #7
 8001c6a:	10db      	asrs	r3, r3, #3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	8a3b      	ldrh	r3, [r7, #16]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	e076      	b.n	8001d6e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001c80:	8a3b      	ldrh	r3, [r7, #16]
 8001c82:	3307      	adds	r3, #7
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	da00      	bge.n	8001c8a <DrawChar+0x72>
 8001c88:	3307      	adds	r3, #7
 8001c8a:	10db      	asrs	r3, r3, #3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001c9a:	8a3b      	ldrh	r3, [r7, #16]
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	da00      	bge.n	8001ca4 <DrawChar+0x8c>
 8001ca2:	3307      	adds	r3, #7
 8001ca4:	10db      	asrs	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d002      	beq.n	8001cb0 <DrawChar+0x98>
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d004      	beq.n	8001cb8 <DrawChar+0xa0>
 8001cae:	e00c      	b.n	8001cca <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	617b      	str	r3, [r7, #20]
      break;
 8001cb6:	e016      	b.n	8001ce6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	3201      	adds	r2, #1
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
      break;
 8001cc8:	e00d      	b.n	8001ce6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	041a      	lsls	r2, r3, #16
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	3202      	adds	r2, #2
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
      break;
 8001ce4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	e036      	b.n	8001d5a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001cec:	8a3a      	ldrh	r2, [r7, #16]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	1ad2      	subs	r2, r2, r3
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d012      	beq.n	8001d2e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b298      	uxth	r0, r3
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <DrawChar+0x168>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	491b      	ldr	r1, [pc, #108]	; (8001d84 <DrawChar+0x16c>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	88bb      	ldrh	r3, [r7, #4]
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7ff fe1a 	bl	8001960 <BSP_LCD_DrawPixel>
 8001d2c:	e012      	b.n	8001d54 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	4413      	add	r3, r2
 8001d36:	b298      	uxth	r0, r3
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <DrawChar+0x168>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4911      	ldr	r1, [pc, #68]	; (8001d84 <DrawChar+0x16c>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	3304      	adds	r3, #4
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	88bb      	ldrh	r3, [r7, #4]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f7ff fe06 	bl	8001960 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	3301      	adds	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	8a3b      	ldrh	r3, [r7, #16]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d3c4      	bcc.n	8001cec <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001d62:	88bb      	ldrh	r3, [r7, #4]
 8001d64:	3301      	adds	r3, #1
 8001d66:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	8a7b      	ldrh	r3, [r7, #18]
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d384      	bcc.n	8001c80 <DrawChar+0x68>
  }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200004c4 	.word	0x200004c4
 8001d84:	200004c8 	.word	0x200004c8

08001d88 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <LL_FillBuffer+0x88>)
 8001d98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d9c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <LL_FillBuffer+0x8c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <LL_FillBuffer+0x90>)
 8001da4:	2134      	movs	r1, #52	; 0x34
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	3348      	adds	r3, #72	; 0x48
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d103      	bne.n	8001dbc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <LL_FillBuffer+0x88>)
 8001db6:	2202      	movs	r2, #2
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	e002      	b.n	8001dc2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <LL_FillBuffer+0x88>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001dc2:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <LL_FillBuffer+0x88>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <LL_FillBuffer+0x88>)
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <LL_FillBuffer+0x94>)
 8001dcc:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001dce:	4810      	ldr	r0, [pc, #64]	; (8001e10 <LL_FillBuffer+0x88>)
 8001dd0:	f000 feaa 	bl	8002b28 <HAL_DMA2D_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d115      	bne.n	8001e06 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001dda:	68f9      	ldr	r1, [r7, #12]
 8001ddc:	480c      	ldr	r0, [pc, #48]	; (8001e10 <LL_FillBuffer+0x88>)
 8001dde:	f001 f801 	bl	8002de4 <HAL_DMA2D_ConfigLayer>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10e      	bne.n	8001e06 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69f9      	ldr	r1, [r7, #28]
 8001df2:	4807      	ldr	r0, [pc, #28]	; (8001e10 <LL_FillBuffer+0x88>)
 8001df4:	f000 fee2 	bl	8002bbc <HAL_DMA2D_Start>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001dfe:	210a      	movs	r1, #10
 8001e00:	4803      	ldr	r0, [pc, #12]	; (8001e10 <LL_FillBuffer+0x88>)
 8001e02:	f000 ff06 	bl	8002c12 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000484 	.word	0x20000484
 8001e14:	200004c4 	.word	0x200004c4
 8001e18:	200003dc 	.word	0x200003dc
 8001e1c:	4002b000 	.word	0x4002b000

08001e20 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001e24:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e26:	4a2a      	ldr	r2, [pc, #168]	; (8001ed0 <BSP_SDRAM_Init+0xb0>)
 8001e28:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <BSP_SDRAM_Init+0xb4>)
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <BSP_SDRAM_Init+0xb4>)
 8001e32:	2207      	movs	r2, #7
 8001e34:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001e36:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <BSP_SDRAM_Init+0xb4>)
 8001e38:	2204      	movs	r2, #4
 8001e3a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <BSP_SDRAM_Init+0xb4>)
 8001e3e:	2207      	movs	r2, #7
 8001e40:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001e42:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <BSP_SDRAM_Init+0xb4>)
 8001e44:	2202      	movs	r2, #2
 8001e46:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <BSP_SDRAM_Init+0xb4>)
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <BSP_SDRAM_Init+0xb4>)
 8001e50:	2202      	movs	r2, #2
 8001e52:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e62:	2204      	movs	r2, #4
 8001e64:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e68:	2210      	movs	r2, #16
 8001e6a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e6e:	2240      	movs	r2, #64	; 0x40
 8001e70:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e78:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e86:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001e96:	2100      	movs	r1, #0
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001e9a:	f000 f87f 	bl	8001f9c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001e9e:	490d      	ldr	r1, [pc, #52]	; (8001ed4 <BSP_SDRAM_Init+0xb4>)
 8001ea0:	480a      	ldr	r0, [pc, #40]	; (8001ecc <BSP_SDRAM_Init+0xac>)
 8001ea2:	f002 ff09 	bl	8004cb8 <HAL_SDRAM_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <BSP_SDRAM_Init+0xb8>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e002      	b.n	8001eba <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <BSP_SDRAM_Init+0xb8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001eba:	f240 6003 	movw	r0, #1539	; 0x603
 8001ebe:	f000 f80d 	bl	8001edc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <BSP_SDRAM_Init+0xb8>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000564 	.word	0x20000564
 8001ed0:	a0000140 	.word	0xa0000140
 8001ed4:	20000598 	.word	0x20000598
 8001ed8:	2000000c 	.word	0x2000000c

08001edc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001efa:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f04:	4923      	ldr	r1, [pc, #140]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f06:	4824      	ldr	r0, [pc, #144]	; (8001f98 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f08:	f002 ff14 	bl	8004d34 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f000 f99b 	bl	8002248 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f14:	2202      	movs	r2, #2
 8001f16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f2e:	4919      	ldr	r1, [pc, #100]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f30:	4819      	ldr	r0, [pc, #100]	; (8001f98 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f32:	f002 feff 	bl	8004d34 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f38:	2203      	movs	r2, #3
 8001f3a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f3e:	2210      	movs	r2, #16
 8001f40:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f44:	2208      	movs	r2, #8
 8001f46:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f52:	4910      	ldr	r1, [pc, #64]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f54:	4810      	ldr	r0, [pc, #64]	; (8001f98 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f56:	f002 feed 	bl	8004d34 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001f5a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001f5e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f62:	2204      	movs	r2, #4
 8001f64:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f68:	2210      	movs	r2, #16
 8001f6a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f76:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f7c:	4905      	ldr	r1, [pc, #20]	; (8001f94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f7e:	4806      	ldr	r0, [pc, #24]	; (8001f98 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f80:	f002 fed8 	bl	8004d34 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f88:	f002 feff 	bl	8004d8a <HAL_SDRAM_ProgramRefreshRate>
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200005b4 	.word	0x200005b4
 8001f98:	20000564 	.word	0x20000564

08001f9c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b090      	sub	sp, #64	; 0x40
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001fa6:	4b70      	ldr	r3, [pc, #448]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	4a6f      	ldr	r2, [pc, #444]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6393      	str	r3, [r2, #56]	; 0x38
 8001fb2:	4b6d      	ldr	r3, [pc, #436]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001fbe:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a69      	ldr	r2, [pc, #420]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001fc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	4b64      	ldr	r3, [pc, #400]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a63      	ldr	r2, [pc, #396]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b61      	ldr	r3, [pc, #388]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	623b      	str	r3, [r7, #32]
 8001fec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fee:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a5d      	ldr	r2, [pc, #372]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001ff4:	f043 0308 	orr.w	r3, r3, #8
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b5b      	ldr	r3, [pc, #364]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	61fb      	str	r3, [r7, #28]
 8002004:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002006:	4b58      	ldr	r3, [pc, #352]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a57      	ldr	r2, [pc, #348]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 800200c:	f043 0310 	orr.w	r3, r3, #16
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b55      	ldr	r3, [pc, #340]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800201e:	4b52      	ldr	r3, [pc, #328]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a51      	ldr	r2, [pc, #324]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8002024:	f043 0320 	orr.w	r3, r3, #32
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b4f      	ldr	r3, [pc, #316]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002036:	4b4c      	ldr	r3, [pc, #304]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a4b      	ldr	r2, [pc, #300]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 800203c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b49      	ldr	r3, [pc, #292]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800204e:	4b46      	ldr	r3, [pc, #280]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a45      	ldr	r2, [pc, #276]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 8002054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b43      	ldr	r3, [pc, #268]	; (8002168 <BSP_SDRAM_MspInit+0x1cc>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800206a:	2301      	movs	r3, #1
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800206e:	2302      	movs	r3, #2
 8002070:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002072:	230c      	movs	r3, #12
 8002074:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002076:	2308      	movs	r3, #8
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800207a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800207e:	4619      	mov	r1, r3
 8002080:	483a      	ldr	r0, [pc, #232]	; (800216c <BSP_SDRAM_MspInit+0x1d0>)
 8002082:	f000 ffdd 	bl	8003040 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002086:	f24c 7303 	movw	r3, #50947	; 0xc703
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800208c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002090:	4619      	mov	r1, r3
 8002092:	4837      	ldr	r0, [pc, #220]	; (8002170 <BSP_SDRAM_MspInit+0x1d4>)
 8002094:	f000 ffd4 	bl	8003040 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002098:	f64f 7383 	movw	r3, #65411	; 0xff83
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800209e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a2:	4619      	mov	r1, r3
 80020a4:	4833      	ldr	r0, [pc, #204]	; (8002174 <BSP_SDRAM_MspInit+0x1d8>)
 80020a6:	f000 ffcb 	bl	8003040 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80020aa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80020b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b4:	4619      	mov	r1, r3
 80020b6:	4830      	ldr	r0, [pc, #192]	; (8002178 <BSP_SDRAM_MspInit+0x1dc>)
 80020b8:	f000 ffc2 	bl	8003040 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80020bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80020c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c6:	4619      	mov	r1, r3
 80020c8:	482c      	ldr	r0, [pc, #176]	; (800217c <BSP_SDRAM_MspInit+0x1e0>)
 80020ca:	f000 ffb9 	bl	8003040 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80020ce:	2328      	movs	r3, #40	; 0x28
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80020d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d6:	4619      	mov	r1, r3
 80020d8:	4829      	ldr	r0, [pc, #164]	; (8002180 <BSP_SDRAM_MspInit+0x1e4>)
 80020da:	f000 ffb1 	bl	8003040 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 80020ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 80020f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 80020fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002100:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 8002104:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002108:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 800210c:	2200      	movs	r2, #0
 800210e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 8002112:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002116:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 800211a:	2200      	movs	r2, #0
 800211c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 8002120:	2203      	movs	r2, #3
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002124:	4b17      	ldr	r3, [pc, #92]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 8002126:	2200      	movs	r2, #0
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 8002132:	4a15      	ldr	r2, [pc, #84]	; (8002188 <BSP_SDRAM_MspInit+0x1ec>)
 8002134:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a12      	ldr	r2, [pc, #72]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
 800213c:	4a11      	ldr	r2, [pc, #68]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002142:	4810      	ldr	r0, [pc, #64]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 8002144:	f000 fb4e 	bl	80027e4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002148:	480e      	ldr	r0, [pc, #56]	; (8002184 <BSP_SDRAM_MspInit+0x1e8>)
 800214a:	f000 fa9d 	bl	8002688 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	210f      	movs	r1, #15
 8002152:	2038      	movs	r0, #56	; 0x38
 8002154:	f000 f977 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002158:	2038      	movs	r0, #56	; 0x38
 800215a:	f000 f990 	bl	800247e <HAL_NVIC_EnableIRQ>
}
 800215e:	bf00      	nop
 8002160:	3740      	adds	r7, #64	; 0x40
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40020800 	.word	0x40020800
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40021000 	.word	0x40021000
 8002178:	40021400 	.word	0x40021400
 800217c:	40021800 	.word	0x40021800
 8002180:	40021c00 	.word	0x40021c00
 8002184:	200005c4 	.word	0x200005c4
 8002188:	40026410 	.word	0x40026410

0800218c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002190:	2003      	movs	r0, #3
 8002192:	f000 f94d 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002196:	2000      	movs	r0, #0
 8002198:	f000 f806 	bl	80021a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800219c:	f7fe fdb6 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_InitTick+0x54>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_InitTick+0x58>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021be:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f967 	bl	800249a <HAL_SYSTICK_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00e      	b.n	80021f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b0f      	cmp	r3, #15
 80021da:	d80a      	bhi.n	80021f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021dc:	2200      	movs	r2, #0
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021e4:	f000 f92f 	bl	8002446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e8:	4a06      	ldr	r2, [pc, #24]	; (8002204 <HAL_InitTick+0x5c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000014 	.word	0x20000014
 8002204:	20000010 	.word	0x20000010

08002208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_IncTick+0x20>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x24>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_IncTick+0x24>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000014 	.word	0x20000014
 800222c:	20000624 	.word	0x20000624

08002230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_GetTick+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000624 	.word	0x20000624

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff ffee 	bl	8002230 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002260:	d005      	beq.n	800226e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_Delay+0x44>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800226e:	bf00      	nop
 8002270:	f7ff ffde 	bl	8002230 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d8f7      	bhi.n	8002270 <HAL_Delay+0x28>
  {
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000014 	.word	0x20000014

08002290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <__NVIC_SetPriorityGrouping+0x40>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <__NVIC_SetPriorityGrouping+0x40>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00
 80022d4:	05fa0000 	.word	0x05fa0000

080022d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4907      	ldr	r1, [pc, #28]	; (800232c <__NVIC_EnableIRQ+0x38>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100

08002330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	db0a      	blt.n	800235a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	490c      	ldr	r1, [pc, #48]	; (800237c <__NVIC_SetPriority+0x4c>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	440b      	add	r3, r1
 8002354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002358:	e00a      	b.n	8002370 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4908      	ldr	r1, [pc, #32]	; (8002380 <__NVIC_SetPriority+0x50>)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3b04      	subs	r3, #4
 8002368:	0112      	lsls	r2, r2, #4
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	440b      	add	r3, r1
 800236e:	761a      	strb	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000e100 	.word	0xe000e100
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f1c3 0307 	rsb	r3, r3, #7
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf28      	it	cs
 80023a2:	2304      	movcs	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d902      	bls.n	80023b4 <NVIC_EncodePriority+0x30>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3b03      	subs	r3, #3
 80023b2:	e000      	b.n	80023b6 <NVIC_EncodePriority+0x32>
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	4313      	orrs	r3, r2
         );
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002410:	f7ff ff8e 	bl	8002330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff29 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff3e 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff8e 	bl	8002384 <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff5d 	bl	8002330 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff31 	bl	80022f4 <__NVIC_EnableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ffa2 	bl	80023ec <SysTick_Config>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e054      	b.n	8002570 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7f5b      	ldrb	r3, [r3, #29]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe fc40 	bl	8000d5c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	791b      	ldrb	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a22      	ldr	r2, [pc, #136]	; (8002578 <HAL_CRC_Init+0xc4>)
 80024f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0218 	bic.w	r2, r2, #24
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	e00c      	b.n	800251e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	461a      	mov	r2, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f834 	bl	800257c <HAL_CRCEx_Polynomial_Set>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e028      	b.n	8002570 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	795b      	ldrb	r3, [r3, #5]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800252e:	611a      	str	r2, [r3, #16]
 8002530:	e004      	b.n	800253c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6912      	ldr	r2, [r2, #16]
 800253a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699a      	ldr	r2, [r3, #24]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	04c11db7 	.word	0x04c11db7

0800257c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800258c:	231f      	movs	r3, #31
 800258e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002590:	bf00      	nop
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1e5a      	subs	r2, r3, #1
 8002596:	613a      	str	r2, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <HAL_CRCEx_Polynomial_Set+0x34>
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b18      	cmp	r3, #24
 80025b4:	d846      	bhi.n	8002644 <HAL_CRCEx_Polynomial_Set+0xc8>
 80025b6:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <HAL_CRCEx_Polynomial_Set+0x40>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	0800264b 	.word	0x0800264b
 80025c0:	08002645 	.word	0x08002645
 80025c4:	08002645 	.word	0x08002645
 80025c8:	08002645 	.word	0x08002645
 80025cc:	08002645 	.word	0x08002645
 80025d0:	08002645 	.word	0x08002645
 80025d4:	08002645 	.word	0x08002645
 80025d8:	08002645 	.word	0x08002645
 80025dc:	08002639 	.word	0x08002639
 80025e0:	08002645 	.word	0x08002645
 80025e4:	08002645 	.word	0x08002645
 80025e8:	08002645 	.word	0x08002645
 80025ec:	08002645 	.word	0x08002645
 80025f0:	08002645 	.word	0x08002645
 80025f4:	08002645 	.word	0x08002645
 80025f8:	08002645 	.word	0x08002645
 80025fc:	0800262d 	.word	0x0800262d
 8002600:	08002645 	.word	0x08002645
 8002604:	08002645 	.word	0x08002645
 8002608:	08002645 	.word	0x08002645
 800260c:	08002645 	.word	0x08002645
 8002610:	08002645 	.word	0x08002645
 8002614:	08002645 	.word	0x08002645
 8002618:	08002645 	.word	0x08002645
 800261c:	08002621 	.word	0x08002621
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b06      	cmp	r3, #6
 8002624:	d913      	bls.n	800264e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800262a:	e010      	b.n	800264e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b07      	cmp	r3, #7
 8002630:	d90f      	bls.n	8002652 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002636:	e00c      	b.n	8002652 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	d90b      	bls.n	8002656 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002642:	e008      	b.n	8002656 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	75fb      	strb	r3, [r7, #23]
      break;
 8002648:	e006      	b.n	8002658 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800264a:	bf00      	nop
 800264c:	e004      	b.n	8002658 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800264e:	bf00      	nop
 8002650:	e002      	b.n	8002658 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002652:	bf00      	nop
 8002654:	e000      	b.n	8002658 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002656:	bf00      	nop
  }
  if (status == HAL_OK)
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 0118 	bic.w	r1, r3, #24
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800267a:	7dfb      	ldrb	r3, [r7, #23]
}
 800267c:	4618      	mov	r0, r3
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002694:	f7ff fdcc 	bl	8002230 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e099      	b.n	80027d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c4:	e00f      	b.n	80026e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026c6:	f7ff fdb3 	bl	8002230 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d908      	bls.n	80026e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2203      	movs	r2, #3
 80026de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e078      	b.n	80027d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1e8      	bne.n	80026c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <HAL_DMA_Init+0x158>)
 8002700:	4013      	ands	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002712:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800271e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2b04      	cmp	r3, #4
 800273e:	d107      	bne.n	8002750 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4313      	orrs	r3, r2
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f023 0307 	bic.w	r3, r3, #7
 8002766:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2b04      	cmp	r3, #4
 8002778:	d117      	bne.n	80027aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00e      	beq.n	80027aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f94f 	bl	8002a30 <DMA_CheckFifoParam>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2240      	movs	r2, #64	; 0x40
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027a6:	2301      	movs	r3, #1
 80027a8:	e016      	b.n	80027d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f906 	bl	80029c4 <DMA_CalcBaseAndBitshift>
 80027b8:	4603      	mov	r3, r0
 80027ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	223f      	movs	r2, #63	; 0x3f
 80027c2:	409a      	lsls	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	f010803f 	.word	0xf010803f

080027e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e050      	b.n	8002898 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d101      	bne.n	8002806 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002802:	2302      	movs	r3, #2
 8002804:	e048      	b.n	8002898 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2200      	movs	r2, #0
 8002824:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2221      	movs	r2, #33	; 0x21
 8002844:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8bc 	bl	80029c4 <DMA_CalcBaseAndBitshift>
 800284c:	4603      	mov	r3, r0
 800284e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	223f      	movs	r2, #63	; 0x3f
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028ae:	f7ff fcbf 	bl	8002230 <HAL_GetTick>
 80028b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d008      	beq.n	80028d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e052      	b.n	8002978 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0216 	bic.w	r2, r2, #22
 80028e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <HAL_DMA_Abort+0x62>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0208 	bic.w	r2, r2, #8
 8002910:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002922:	e013      	b.n	800294c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002924:	f7ff fc84 	bl	8002230 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b05      	cmp	r3, #5
 8002930:	d90c      	bls.n	800294c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2203      	movs	r2, #3
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e015      	b.n	8002978 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e4      	bne.n	8002924 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	223f      	movs	r2, #63	; 0x3f
 8002960:	409a      	lsls	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d004      	beq.n	800299e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2280      	movs	r2, #128	; 0x80
 8002998:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e00c      	b.n	80029b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2205      	movs	r2, #5
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3b10      	subs	r3, #16
 80029d4:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <DMA_CalcBaseAndBitshift+0x60>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029de:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <DMA_CalcBaseAndBitshift+0x64>)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d908      	bls.n	8002a04 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <DMA_CalcBaseAndBitshift+0x68>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	1d1a      	adds	r2, r3, #4
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	659a      	str	r2, [r3, #88]	; 0x58
 8002a02:	e006      	b.n	8002a12 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <DMA_CalcBaseAndBitshift+0x68>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	aaaaaaab 	.word	0xaaaaaaab
 8002a28:	08008450 	.word	0x08008450
 8002a2c:	fffffc00 	.word	0xfffffc00

08002a30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11f      	bne.n	8002a8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d856      	bhi.n	8002afe <DMA_CheckFifoParam+0xce>
 8002a50:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <DMA_CheckFifoParam+0x28>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002a69 	.word	0x08002a69
 8002a5c:	08002a7b 	.word	0x08002a7b
 8002a60:	08002a69 	.word	0x08002a69
 8002a64:	08002aff 	.word	0x08002aff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d046      	beq.n	8002b02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a78:	e043      	b.n	8002b02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a82:	d140      	bne.n	8002b06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a88:	e03d      	b.n	8002b06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a92:	d121      	bne.n	8002ad8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d837      	bhi.n	8002b0a <DMA_CheckFifoParam+0xda>
 8002a9a:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <DMA_CheckFifoParam+0x70>)
 8002a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002ab7 	.word	0x08002ab7
 8002aa8:	08002ab1 	.word	0x08002ab1
 8002aac:	08002ac9 	.word	0x08002ac9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab4:	e030      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d025      	beq.n	8002b0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac6:	e022      	b.n	8002b0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ad0:	d11f      	bne.n	8002b12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ad6:	e01c      	b.n	8002b12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d903      	bls.n	8002ae6 <DMA_CheckFifoParam+0xb6>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d003      	beq.n	8002aec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ae4:	e018      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aea:	e015      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00e      	beq.n	8002b16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      break;
 8002afc:	e00b      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      break;
 8002afe:	bf00      	nop
 8002b00:	e00a      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
 8002b04:	e008      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e006      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e004      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e002      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
    }
  } 
  
  return status; 
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop

08002b28 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e039      	b.n	8002bae <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe f924 	bl	8000d9c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b78:	f023 0107 	bic.w	r1, r3, #7
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_DMA2D_Init+0x90>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68d1      	ldr	r1, [r2, #12]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	ffffc000 	.word	0xffffc000

08002bbc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_DMA2D_Start+0x1c>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e018      	b.n	8002c0a <HAL_DMA2D_Start+0x4e>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f988 	bl	8002f08 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d056      	beq.n	8002cdc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c2e:	f7ff faff 	bl	8002230 <HAL_GetTick>
 8002c32:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002c34:	e04b      	b.n	8002cce <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d023      	beq.n	8002c90 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	f043 0202 	orr.w	r2, r3, #2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2221      	movs	r2, #33	; 0x21
 8002c7a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0a5      	b.n	8002ddc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c96:	d01a      	beq.n	8002cce <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c98:	f7ff faca 	bl	8002230 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d302      	bcc.n	8002cae <HAL_DMA2D_PollForTransfer+0x9c>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10f      	bne.n	8002cce <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e086      	b.n	8002ddc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ac      	beq.n	8002c36 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d061      	beq.n	8002dc2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cfe:	f7ff fa97 	bl	8002230 <HAL_GetTick>
 8002d02:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002d04:	e056      	b.n	8002db4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02e      	beq.n	8002d76 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	f043 0202 	orr.w	r2, r3, #2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2229      	movs	r2, #41	; 0x29
 8002d60:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2204      	movs	r2, #4
 8002d66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e032      	b.n	8002ddc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7c:	d01a      	beq.n	8002db4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7ff fa57 	bl	8002230 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <HAL_DMA2D_PollForTransfer+0x182>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10f      	bne.n	8002db4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2203      	movs	r2, #3
 8002da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e013      	b.n	8002ddc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0a1      	beq.n	8002d06 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2212      	movs	r2, #18
 8002dc8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_DMA2D_ConfigLayer+0x20>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e079      	b.n	8002ef8 <HAL_DMA2D_ConfigLayer+0x114>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	3318      	adds	r3, #24
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	041b      	lsls	r3, r3, #16
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002e2e:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <HAL_DMA2D_ConfigLayer+0x120>)
 8002e30:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b0a      	cmp	r3, #10
 8002e38:	d003      	beq.n	8002e42 <HAL_DMA2D_ConfigLayer+0x5e>
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b09      	cmp	r3, #9
 8002e40:	d107      	bne.n	8002e52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e005      	b.n	8002e5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	061b      	lsls	r3, r3, #24
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d120      	bne.n	8002ea6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	ea02 0103 	and.w	r1, r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b0a      	cmp	r3, #10
 8002e8c:	d003      	beq.n	8002e96 <HAL_DMA2D_ConfigLayer+0xb2>
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b09      	cmp	r3, #9
 8002e94:	d127      	bne.n	8002ee6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea4:	e01f      	b.n	8002ee6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	ea02 0103 	and.w	r1, r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b0a      	cmp	r3, #10
 8002ece:	d003      	beq.n	8002ed8 <HAL_DMA2D_ConfigLayer+0xf4>
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b09      	cmp	r3, #9
 8002ed6:	d106      	bne.n	8002ee6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ee4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	ff03000f 	.word	0xff03000f

08002f08 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b08b      	sub	sp, #44	; 0x2c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	041a      	lsls	r2, r3, #16
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f40:	d174      	bne.n	800302c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f48:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f50:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f58:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d108      	bne.n	8002f7a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	e053      	b.n	8003022 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d106      	bne.n	8002f90 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8e:	e048      	b.n	8003022 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d111      	bne.n	8002fbc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	0cdb      	lsrs	r3, r3, #19
 8002f9c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	0a9b      	lsrs	r3, r3, #10
 8002fa2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	08db      	lsrs	r3, r3, #3
 8002fa8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	02db      	lsls	r3, r3, #11
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fba:	e032      	b.n	8003022 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d117      	bne.n	8002ff4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	0fdb      	lsrs	r3, r3, #31
 8002fc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	0cdb      	lsrs	r3, r3, #19
 8002fce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	0adb      	lsrs	r3, r3, #11
 8002fd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	08db      	lsrs	r3, r3, #3
 8002fda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	029b      	lsls	r3, r3, #10
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	03db      	lsls	r3, r3, #15
 8002fea:	4313      	orrs	r3, r2
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	e016      	b.n	8003022 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	0f1b      	lsrs	r3, r3, #28
 8002ff8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	0d1b      	lsrs	r3, r3, #20
 8002ffe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	0b1b      	lsrs	r3, r3, #12
 8003004:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	011a      	lsls	r2, r3, #4
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	431a      	orrs	r2, r3
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	031b      	lsls	r3, r3, #12
 800301a:	4313      	orrs	r3, r2
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800302a:	e003      	b.n	8003034 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	60da      	str	r2, [r3, #12]
}
 8003034:	bf00      	nop
 8003036:	372c      	adds	r7, #44	; 0x2c
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e175      	b.n	800334c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003060:	2201      	movs	r2, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	429a      	cmp	r2, r3
 800307a:	f040 8164 	bne.w	8003346 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b01      	cmp	r3, #1
 8003088:	d005      	beq.n	8003096 <HAL_GPIO_Init+0x56>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d130      	bne.n	80030f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	2203      	movs	r2, #3
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030cc:	2201      	movs	r2, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 0201 	and.w	r2, r3, #1
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b03      	cmp	r3, #3
 8003102:	d017      	beq.n	8003134 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d123      	bne.n	8003188 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	08da      	lsrs	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3208      	adds	r2, #8
 8003148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	220f      	movs	r2, #15
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	08da      	lsrs	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3208      	adds	r2, #8
 8003182:	69b9      	ldr	r1, [r7, #24]
 8003184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0203 	and.w	r2, r3, #3
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80be 	beq.w	8003346 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ca:	4b66      	ldr	r3, [pc, #408]	; (8003364 <HAL_GPIO_Init+0x324>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	4a65      	ldr	r2, [pc, #404]	; (8003364 <HAL_GPIO_Init+0x324>)
 80031d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d4:	6453      	str	r3, [r2, #68]	; 0x44
 80031d6:	4b63      	ldr	r3, [pc, #396]	; (8003364 <HAL_GPIO_Init+0x324>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031e2:	4a61      	ldr	r2, [pc, #388]	; (8003368 <HAL_GPIO_Init+0x328>)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	3302      	adds	r3, #2
 80031ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	220f      	movs	r2, #15
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a58      	ldr	r2, [pc, #352]	; (800336c <HAL_GPIO_Init+0x32c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d037      	beq.n	800327e <HAL_GPIO_Init+0x23e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a57      	ldr	r2, [pc, #348]	; (8003370 <HAL_GPIO_Init+0x330>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <HAL_GPIO_Init+0x23a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a56      	ldr	r2, [pc, #344]	; (8003374 <HAL_GPIO_Init+0x334>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d02b      	beq.n	8003276 <HAL_GPIO_Init+0x236>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a55      	ldr	r2, [pc, #340]	; (8003378 <HAL_GPIO_Init+0x338>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d025      	beq.n	8003272 <HAL_GPIO_Init+0x232>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a54      	ldr	r2, [pc, #336]	; (800337c <HAL_GPIO_Init+0x33c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01f      	beq.n	800326e <HAL_GPIO_Init+0x22e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a53      	ldr	r2, [pc, #332]	; (8003380 <HAL_GPIO_Init+0x340>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d019      	beq.n	800326a <HAL_GPIO_Init+0x22a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a52      	ldr	r2, [pc, #328]	; (8003384 <HAL_GPIO_Init+0x344>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_GPIO_Init+0x226>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a51      	ldr	r2, [pc, #324]	; (8003388 <HAL_GPIO_Init+0x348>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00d      	beq.n	8003262 <HAL_GPIO_Init+0x222>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a50      	ldr	r2, [pc, #320]	; (800338c <HAL_GPIO_Init+0x34c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d007      	beq.n	800325e <HAL_GPIO_Init+0x21e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4f      	ldr	r2, [pc, #316]	; (8003390 <HAL_GPIO_Init+0x350>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_GPIO_Init+0x21a>
 8003256:	2309      	movs	r3, #9
 8003258:	e012      	b.n	8003280 <HAL_GPIO_Init+0x240>
 800325a:	230a      	movs	r3, #10
 800325c:	e010      	b.n	8003280 <HAL_GPIO_Init+0x240>
 800325e:	2308      	movs	r3, #8
 8003260:	e00e      	b.n	8003280 <HAL_GPIO_Init+0x240>
 8003262:	2307      	movs	r3, #7
 8003264:	e00c      	b.n	8003280 <HAL_GPIO_Init+0x240>
 8003266:	2306      	movs	r3, #6
 8003268:	e00a      	b.n	8003280 <HAL_GPIO_Init+0x240>
 800326a:	2305      	movs	r3, #5
 800326c:	e008      	b.n	8003280 <HAL_GPIO_Init+0x240>
 800326e:	2304      	movs	r3, #4
 8003270:	e006      	b.n	8003280 <HAL_GPIO_Init+0x240>
 8003272:	2303      	movs	r3, #3
 8003274:	e004      	b.n	8003280 <HAL_GPIO_Init+0x240>
 8003276:	2302      	movs	r3, #2
 8003278:	e002      	b.n	8003280 <HAL_GPIO_Init+0x240>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_GPIO_Init+0x240>
 800327e:	2300      	movs	r3, #0
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	f002 0203 	and.w	r2, r2, #3
 8003286:	0092      	lsls	r2, r2, #2
 8003288:	4093      	lsls	r3, r2
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003290:	4935      	ldr	r1, [pc, #212]	; (8003368 <HAL_GPIO_Init+0x328>)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	3302      	adds	r3, #2
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800329e:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_GPIO_Init+0x354>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032c2:	4a34      	ldr	r2, [pc, #208]	; (8003394 <HAL_GPIO_Init+0x354>)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_GPIO_Init+0x354>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032ec:	4a29      	ldr	r2, [pc, #164]	; (8003394 <HAL_GPIO_Init+0x354>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032f2:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_GPIO_Init+0x354>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003316:	4a1f      	ldr	r2, [pc, #124]	; (8003394 <HAL_GPIO_Init+0x354>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800331c:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <HAL_GPIO_Init+0x354>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003340:	4a14      	ldr	r2, [pc, #80]	; (8003394 <HAL_GPIO_Init+0x354>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3301      	adds	r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	f67f ae86 	bls.w	8003060 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	3724      	adds	r7, #36	; 0x24
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	40013800 	.word	0x40013800
 800336c:	40020000 	.word	0x40020000
 8003370:	40020400 	.word	0x40020400
 8003374:	40020800 	.word	0x40020800
 8003378:	40020c00 	.word	0x40020c00
 800337c:	40021000 	.word	0x40021000
 8003380:	40021400 	.word	0x40021400
 8003384:	40021800 	.word	0x40021800
 8003388:	40021c00 	.word	0x40021c00
 800338c:	40022000 	.word	0x40022000
 8003390:	40022400 	.word	0x40022400
 8003394:	40013c00 	.word	0x40013c00

08003398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	807b      	strh	r3, [r7, #2]
 80033a4:	4613      	mov	r3, r2
 80033a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033a8:	787b      	ldrb	r3, [r7, #1]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033b4:	e003      	b.n	80033be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033b6:	887b      	ldrh	r3, [r7, #2]
 80033b8:	041a      	lsls	r2, r3, #16
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	619a      	str	r2, [r3, #24]
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033d6:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d006      	beq.n	80033f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033e2:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd f970 	bl	80006d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40013c00 	.word	0x40013c00

080033fc <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0c7      	b.n	80035a6 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f8c2 	bl	80035b4 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003446:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6999      	ldr	r1, [r3, #24]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800345c:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6899      	ldr	r1, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b4e      	ldr	r3, [pc, #312]	; (80035b0 <HAL_LTDC_Init+0x1b4>)
 8003478:	400b      	ands	r3, r1
 800347a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68d9      	ldr	r1, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <HAL_LTDC_Init+0x1b4>)
 80034a6:	400b      	ands	r3, r1
 80034a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68d9      	ldr	r1, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1a      	ldr	r2, [r3, #32]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6919      	ldr	r1, [r3, #16]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <HAL_LTDC_Init+0x1b4>)
 80034d4:	400b      	ands	r3, r1
 80034d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	041b      	lsls	r3, r3, #16
 80034de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6919      	ldr	r1, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6959      	ldr	r1, [r3, #20]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_LTDC_Init+0x1b4>)
 8003502:	400b      	ands	r3, r1
 8003504:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6959      	ldr	r1, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0204 	orr.w	r2, r2, #4
 8003572:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0202 	orr.w	r2, r2, #2
 8003582:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	f000f800 	.word	0xf000f800

080035b4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80035c8:	b5b0      	push	{r4, r5, r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_LTDC_ConfigLayer+0x1a>
 80035de:	2302      	movs	r3, #2
 80035e0:	e02c      	b.n	800363c <HAL_LTDC_ConfigLayer+0x74>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2134      	movs	r1, #52	; 0x34
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4614      	mov	r4, r2
 8003606:	461d      	mov	r5, r3
 8003608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800360a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800360c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800360e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f81f 	bl	8003660 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2201      	movs	r2, #1
 8003628:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bdb0      	pop	{r4, r5, r7, pc}

08003644 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003652:	b2db      	uxtb	r3, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	; 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	0c1b      	lsrs	r3, r3, #16
 8003684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003688:	4413      	add	r3, r2
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	01db      	lsls	r3, r3, #7
 8003698:	4413      	add	r3, r2
 800369a:	3384      	adds	r3, #132	; 0x84
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	4611      	mov	r1, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	01d2      	lsls	r2, r2, #7
 80036a8:	440a      	add	r2, r1
 80036aa:	3284      	adds	r2, #132	; 0x84
 80036ac:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80036b0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c2:	4413      	add	r3, r2
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4619      	mov	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	01db      	lsls	r3, r3, #7
 80036d0:	440b      	add	r3, r1
 80036d2:	3384      	adds	r3, #132	; 0x84
 80036d4:	4619      	mov	r1, r3
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ea:	4413      	add	r3, r2
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	01db      	lsls	r3, r3, #7
 80036fa:	4413      	add	r3, r2
 80036fc:	3384      	adds	r3, #132	; 0x84
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	4611      	mov	r1, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	01d2      	lsls	r2, r2, #7
 800370a:	440a      	add	r2, r1
 800370c:	3284      	adds	r2, #132	; 0x84
 800370e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003712:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003722:	4413      	add	r3, r2
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4619      	mov	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	01db      	lsls	r3, r3, #7
 8003730:	440b      	add	r3, r1
 8003732:	3384      	adds	r3, #132	; 0x84
 8003734:	4619      	mov	r1, r3
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4313      	orrs	r3, r2
 800373a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	01db      	lsls	r3, r3, #7
 8003746:	4413      	add	r3, r2
 8003748:	3384      	adds	r3, #132	; 0x84
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	4611      	mov	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	01d2      	lsls	r2, r2, #7
 8003756:	440a      	add	r2, r1
 8003758:	3284      	adds	r2, #132	; 0x84
 800375a:	f023 0307 	bic.w	r3, r3, #7
 800375e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	01db      	lsls	r3, r3, #7
 800376a:	4413      	add	r3, r2
 800376c:	3384      	adds	r3, #132	; 0x84
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003786:	041b      	lsls	r3, r3, #16
 8003788:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	061b      	lsls	r3, r3, #24
 8003790:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	01db      	lsls	r3, r3, #7
 800379c:	4413      	add	r3, r2
 800379e:	3384      	adds	r3, #132	; 0x84
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	01db      	lsls	r3, r3, #7
 80037ac:	4413      	add	r3, r2
 80037ae:	3384      	adds	r3, #132	; 0x84
 80037b0:	461a      	mov	r2, r3
 80037b2:	2300      	movs	r3, #0
 80037b4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037bc:	461a      	mov	r2, r3
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4619      	mov	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	01db      	lsls	r3, r3, #7
 80037d0:	440b      	add	r3, r1
 80037d2:	3384      	adds	r3, #132	; 0x84
 80037d4:	4619      	mov	r1, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	01db      	lsls	r3, r3, #7
 80037e6:	4413      	add	r3, r2
 80037e8:	3384      	adds	r3, #132	; 0x84
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	4611      	mov	r1, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	01d2      	lsls	r2, r2, #7
 80037f6:	440a      	add	r2, r1
 80037f8:	3284      	adds	r2, #132	; 0x84
 80037fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	01db      	lsls	r3, r3, #7
 800380a:	4413      	add	r3, r2
 800380c:	3384      	adds	r3, #132	; 0x84
 800380e:	461a      	mov	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	01db      	lsls	r3, r3, #7
 8003820:	4413      	add	r3, r2
 8003822:	3384      	adds	r3, #132	; 0x84
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	01db      	lsls	r3, r3, #7
 8003830:	440b      	add	r3, r1
 8003832:	3384      	adds	r3, #132	; 0x84
 8003834:	4619      	mov	r1, r3
 8003836:	4b58      	ldr	r3, [pc, #352]	; (8003998 <LTDC_SetConfig+0x338>)
 8003838:	4013      	ands	r3, r2
 800383a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	68f9      	ldr	r1, [r7, #12]
 8003846:	6809      	ldr	r1, [r1, #0]
 8003848:	4608      	mov	r0, r1
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	01c9      	lsls	r1, r1, #7
 800384e:	4401      	add	r1, r0
 8003850:	3184      	adds	r1, #132	; 0x84
 8003852:	4313      	orrs	r3, r2
 8003854:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	01db      	lsls	r3, r3, #7
 8003860:	4413      	add	r3, r2
 8003862:	3384      	adds	r3, #132	; 0x84
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	01db      	lsls	r3, r3, #7
 8003870:	4413      	add	r3, r2
 8003872:	3384      	adds	r3, #132	; 0x84
 8003874:	461a      	mov	r2, r3
 8003876:	2300      	movs	r3, #0
 8003878:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	01db      	lsls	r3, r3, #7
 8003884:	4413      	add	r3, r2
 8003886:	3384      	adds	r3, #132	; 0x84
 8003888:	461a      	mov	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8003898:	2304      	movs	r3, #4
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	e01b      	b.n	80038d6 <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d102      	bne.n	80038ac <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 80038a6:	2303      	movs	r3, #3
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	e014      	b.n	80038d6 <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d00b      	beq.n	80038cc <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d007      	beq.n	80038cc <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d003      	beq.n	80038cc <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80038c8:	2b07      	cmp	r3, #7
 80038ca:	d102      	bne.n	80038d2 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 80038cc:	2302      	movs	r3, #2
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	e001      	b.n	80038d6 <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	01db      	lsls	r3, r3, #7
 80038e0:	4413      	add	r3, r2
 80038e2:	3384      	adds	r3, #132	; 0x84
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	4611      	mov	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	01d2      	lsls	r2, r2, #7
 80038f0:	440a      	add	r2, r1
 80038f2:	3284      	adds	r2, #132	; 0x84
 80038f4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80038f8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	fb02 f303 	mul.w	r3, r2, r3
 8003904:	041a      	lsls	r2, r3, #16
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	1acb      	subs	r3, r1, r3
 8003910:	69f9      	ldr	r1, [r7, #28]
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	3303      	adds	r3, #3
 8003918:	68f9      	ldr	r1, [r7, #12]
 800391a:	6809      	ldr	r1, [r1, #0]
 800391c:	4608      	mov	r0, r1
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	01c9      	lsls	r1, r1, #7
 8003922:	4401      	add	r1, r0
 8003924:	3184      	adds	r1, #132	; 0x84
 8003926:	4313      	orrs	r3, r2
 8003928:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	01db      	lsls	r3, r3, #7
 8003934:	4413      	add	r3, r2
 8003936:	3384      	adds	r3, #132	; 0x84
 8003938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4619      	mov	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	01db      	lsls	r3, r3, #7
 8003944:	440b      	add	r3, r1
 8003946:	3384      	adds	r3, #132	; 0x84
 8003948:	4619      	mov	r1, r3
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <LTDC_SetConfig+0x33c>)
 800394c:	4013      	ands	r3, r2
 800394e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	01db      	lsls	r3, r3, #7
 800395a:	4413      	add	r3, r2
 800395c:	3384      	adds	r3, #132	; 0x84
 800395e:	461a      	mov	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	01db      	lsls	r3, r3, #7
 8003970:	4413      	add	r3, r2
 8003972:	3384      	adds	r3, #132	; 0x84
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	4611      	mov	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	01d2      	lsls	r2, r2, #7
 8003980:	440a      	add	r2, r1
 8003982:	3284      	adds	r2, #132	; 0x84
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6013      	str	r3, [r2, #0]
}
 800398a:	bf00      	nop
 800398c:	3724      	adds	r7, #36	; 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	fffff8f8 	.word	0xfffff8f8
 800399c:	fffff800 	.word	0xfffff800

080039a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <HAL_PWREx_EnableOverDrive+0x98>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <HAL_PWREx_EnableOverDrive+0x98>)
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b4:	6413      	str	r3, [r2, #64]	; 0x40
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_PWREx_EnableOverDrive+0x98>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039c2:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ce:	f7fe fc2f 	bl	8002230 <HAL_GetTick>
 80039d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039d4:	e009      	b.n	80039ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039d6:	f7fe fc2b 	bl	8002230 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e4:	d901      	bls.n	80039ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e022      	b.n	8003a30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f6:	d1ee      	bne.n	80039d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a0f      	ldr	r2, [pc, #60]	; (8003a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a04:	f7fe fc14 	bl	8002230 <HAL_GetTick>
 8003a08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a0a:	e009      	b.n	8003a20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a0c:	f7fe fc10 	bl	8002230 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a1a:	d901      	bls.n	8003a20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e007      	b.n	8003a30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a2c:	d1ee      	bne.n	8003a0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40007000 	.word	0x40007000

08003a40 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003a48:	f7fe fbf2 	bl	8002230 <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e067      	b.n	8003b28 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7fd f9b5 	bl	8000ddc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003a72:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f85e 	bl	8003b38 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	021a      	lsls	r2, r3, #8
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2120      	movs	r1, #32
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f856 	bl	8003b54 <QSPI_WaitFlagStateUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003aac:	7afb      	ldrb	r3, [r7, #11]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d135      	bne.n	8003b1e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <HAL_QSPI_Init+0xf0>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6852      	ldr	r2, [r2, #4]
 8003ac0:	0611      	lsls	r1, r2, #24
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68d2      	ldr	r2, [r2, #12]
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	69d2      	ldr	r2, [r2, #28]
 8003acc:	4311      	orrs	r1, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6a12      	ldr	r2, [r2, #32]
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <HAL_QSPI_Init+0xf4>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6912      	ldr	r2, [r2, #16]
 8003aea:	0411      	lsls	r1, r2, #16
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6952      	ldr	r2, [r2, #20]
 8003af0:	4311      	orrs	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6992      	ldr	r2, [r2, #24]
 8003af6:	4311      	orrs	r1, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003b26:	7afb      	ldrb	r3, [r7, #11]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	00ffff2f 	.word	0x00ffff2f
 8003b34:	ffe0f8fe 	.word	0xffe0f8fe

08003b38 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b64:	e01a      	b.n	8003b9c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b6c:	d016      	beq.n	8003b9c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fe fb5f 	bl	8002230 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2204      	movs	r2, #4
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e00e      	b.n	8003bba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bf14      	ite	ne
 8003baa:	2301      	movne	r3, #1
 8003bac:	2300      	moveq	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1d6      	bne.n	8003b66 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e291      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 8087 	beq.w	8003cf6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003be8:	4b96      	ldr	r3, [pc, #600]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d00c      	beq.n	8003c0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf4:	4b93      	ldr	r3, [pc, #588]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d112      	bne.n	8003c26 <HAL_RCC_OscConfig+0x62>
 8003c00:	4b90      	ldr	r3, [pc, #576]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c0c:	d10b      	bne.n	8003c26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0e:	4b8d      	ldr	r3, [pc, #564]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d06c      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x130>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d168      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e26b      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x7a>
 8003c30:	4b84      	ldr	r3, [pc, #528]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a83      	ldr	r2, [pc, #524]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	e02e      	b.n	8003c9c <HAL_RCC_OscConfig+0xd8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x9c>
 8003c46:	4b7f      	ldr	r3, [pc, #508]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a7e      	ldr	r2, [pc, #504]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b7c      	ldr	r3, [pc, #496]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a7b      	ldr	r2, [pc, #492]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e01d      	b.n	8003c9c <HAL_RCC_OscConfig+0xd8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0xc0>
 8003c6a:	4b76      	ldr	r3, [pc, #472]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a75      	ldr	r2, [pc, #468]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	4b73      	ldr	r3, [pc, #460]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a72      	ldr	r2, [pc, #456]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e00b      	b.n	8003c9c <HAL_RCC_OscConfig+0xd8>
 8003c84:	4b6f      	ldr	r3, [pc, #444]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a6e      	ldr	r2, [pc, #440]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a6b      	ldr	r2, [pc, #428]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d013      	beq.n	8003ccc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fac4 	bl	8002230 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fe fac0 	bl	8002230 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e21f      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	4b61      	ldr	r3, [pc, #388]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0xe8>
 8003cca:	e014      	b.n	8003cf6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fab0 	bl	8002230 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fe faac 	bl	8002230 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e20b      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	4b57      	ldr	r3, [pc, #348]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x110>
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d069      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d02:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0e:	4b4d      	ldr	r3, [pc, #308]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d11c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x190>
 8003d1a:	4b4a      	ldr	r3, [pc, #296]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d116      	bne.n	8003d54 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d26:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_RCC_OscConfig+0x17a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d001      	beq.n	8003d3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e1df      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	493d      	ldr	r1, [pc, #244]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d52:	e040      	b.n	8003dd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d023      	beq.n	8003da4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d5c:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a38      	ldr	r2, [pc, #224]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe fa62 	bl	8002230 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d70:	f7fe fa5e 	bl	8002230 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1bd      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d82:	4b30      	ldr	r3, [pc, #192]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8e:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4929      	ldr	r1, [pc, #164]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
 8003da2:	e018      	b.n	8003dd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da4:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fe fa3e 	bl	8002230 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db8:	f7fe fa3a 	bl	8002230 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e199      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dca:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d038      	beq.n	8003e54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d019      	beq.n	8003e1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dea:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dee:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df6:	f7fe fa1b 	bl	8002230 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fe fa17 	bl	8002230 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e176      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e10:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x23a>
 8003e1c:	e01a      	b.n	8003e54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <HAL_RCC_OscConfig+0x280>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2a:	f7fe fa01 	bl	8002230 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e32:	f7fe f9fd 	bl	8002230 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d903      	bls.n	8003e48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e15c      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
 8003e44:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	4b91      	ldr	r3, [pc, #580]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1ee      	bne.n	8003e32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a4 	beq.w	8003faa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e62:	4b8b      	ldr	r3, [pc, #556]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10d      	bne.n	8003e8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6e:	4b88      	ldr	r3, [pc, #544]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	4a87      	ldr	r2, [pc, #540]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7a:	4b85      	ldr	r3, [pc, #532]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e8a:	4b82      	ldr	r3, [pc, #520]	; (8004094 <HAL_RCC_OscConfig+0x4d0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d118      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e96:	4b7f      	ldr	r3, [pc, #508]	; (8004094 <HAL_RCC_OscConfig+0x4d0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a7e      	ldr	r2, [pc, #504]	; (8004094 <HAL_RCC_OscConfig+0x4d0>)
 8003e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea2:	f7fe f9c5 	bl	8002230 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eaa:	f7fe f9c1 	bl	8002230 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b64      	cmp	r3, #100	; 0x64
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e120      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ebc:	4b75      	ldr	r3, [pc, #468]	; (8004094 <HAL_RCC_OscConfig+0x4d0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x31a>
 8003ed0:	4b6f      	ldr	r3, [pc, #444]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a6e      	ldr	r2, [pc, #440]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
 8003edc:	e02d      	b.n	8003f3a <HAL_RCC_OscConfig+0x376>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x33c>
 8003ee6:	4b6a      	ldr	r3, [pc, #424]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a69      	ldr	r2, [pc, #420]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	4b67      	ldr	r3, [pc, #412]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a66      	ldr	r2, [pc, #408]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003ef8:	f023 0304 	bic.w	r3, r3, #4
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
 8003efe:	e01c      	b.n	8003f3a <HAL_RCC_OscConfig+0x376>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	d10c      	bne.n	8003f22 <HAL_RCC_OscConfig+0x35e>
 8003f08:	4b61      	ldr	r3, [pc, #388]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a60      	ldr	r2, [pc, #384]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
 8003f14:	4b5e      	ldr	r3, [pc, #376]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	4a5d      	ldr	r2, [pc, #372]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f20:	e00b      	b.n	8003f3a <HAL_RCC_OscConfig+0x376>
 8003f22:	4b5b      	ldr	r3, [pc, #364]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a5a      	ldr	r2, [pc, #360]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2e:	4b58      	ldr	r3, [pc, #352]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	4a57      	ldr	r2, [pc, #348]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003f34:	f023 0304 	bic.w	r3, r3, #4
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d015      	beq.n	8003f6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fe f975 	bl	8002230 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fe f971 	bl	8002230 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0ce      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f60:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0ee      	beq.n	8003f4a <HAL_RCC_OscConfig+0x386>
 8003f6c:	e014      	b.n	8003f98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6e:	f7fe f95f 	bl	8002230 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7fe f95b 	bl	8002230 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0b8      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8c:	4b40      	ldr	r3, [pc, #256]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ee      	bne.n	8003f76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d105      	bne.n	8003faa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9e:	4b3c      	ldr	r3, [pc, #240]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	4a3b      	ldr	r2, [pc, #236]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80a4 	beq.w	80040fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb4:	4b36      	ldr	r3, [pc, #216]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d06b      	beq.n	8004098 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d149      	bne.n	800405c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b31      	ldr	r3, [pc, #196]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a30      	ldr	r2, [pc, #192]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe f92c 	bl	8002230 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fe f928 	bl	8002230 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e087      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	3b01      	subs	r3, #1
 8004014:	041b      	lsls	r3, r3, #16
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	061b      	lsls	r3, r3, #24
 800401e:	4313      	orrs	r3, r2
 8004020:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8004022:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004026:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a18      	ldr	r2, [pc, #96]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 800402e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fe f8fc 	bl	8002230 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fe f8f8 	bl	8002230 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e057      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x478>
 800405a:	e04f      	b.n	80040fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8004062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe f8e2 	bl	8002230 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004070:	f7fe f8de 	bl	8002230 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e03d      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	4b03      	ldr	r3, [pc, #12]	; (8004090 <HAL_RCC_OscConfig+0x4cc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x4ac>
 800408e:	e035      	b.n	80040fc <HAL_RCC_OscConfig+0x538>
 8004090:	40023800 	.word	0x40023800
 8004094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x544>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d028      	beq.n	80040f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d121      	bne.n	80040f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d11a      	bne.n	80040f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d111      	bne.n	80040f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	3b01      	subs	r3, #1
 80040e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d107      	bne.n	80040f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800

0800410c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0d0      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004124:	4b6a      	ldr	r3, [pc, #424]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d910      	bls.n	8004154 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004132:	4b67      	ldr	r3, [pc, #412]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 020f 	bic.w	r2, r3, #15
 800413a:	4965      	ldr	r1, [pc, #404]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0b8      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800416c:	4b59      	ldr	r3, [pc, #356]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a58      	ldr	r2, [pc, #352]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004176:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004184:	4b53      	ldr	r3, [pc, #332]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a52      	ldr	r2, [pc, #328]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800418a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800418e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004190:	4b50      	ldr	r3, [pc, #320]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	494d      	ldr	r1, [pc, #308]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d040      	beq.n	8004230 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d115      	bne.n	80041ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e07f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ce:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e073      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041de:	4b3d      	ldr	r3, [pc, #244]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e06b      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ee:	4b39      	ldr	r3, [pc, #228]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f023 0203 	bic.w	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4936      	ldr	r1, [pc, #216]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004200:	f7fe f816 	bl	8002230 <HAL_GetTick>
 8004204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	e00a      	b.n	800421e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004208:	f7fe f812 	bl	8002230 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f241 3288 	movw	r2, #5000	; 0x1388
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e053      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 020c 	and.w	r2, r3, #12
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	429a      	cmp	r2, r3
 800422e:	d1eb      	bne.n	8004208 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004230:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d210      	bcs.n	8004260 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 020f 	bic.w	r2, r3, #15
 8004246:	4922      	ldr	r1, [pc, #136]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e032      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4916      	ldr	r1, [pc, #88]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	490e      	ldr	r1, [pc, #56]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800429e:	f000 f821 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	490a      	ldr	r1, [pc, #40]	; (80042d8 <HAL_RCC_ClockConfig+0x1cc>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	fa22 f303 	lsr.w	r3, r2, r3
 80042b6:	4a09      	ldr	r2, [pc, #36]	; (80042dc <HAL_RCC_ClockConfig+0x1d0>)
 80042b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_RCC_ClockConfig+0x1d4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd ff72 	bl	80021a8 <HAL_InitTick>

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40023c00 	.word	0x40023c00
 80042d4:	40023800 	.word	0x40023800
 80042d8:	08006980 	.word	0x08006980
 80042dc:	20000000 	.word	0x20000000
 80042e0:	20000010 	.word	0x20000010

080042e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b090      	sub	sp, #64	; 0x40
 80042ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
 80042f0:	2300      	movs	r3, #0
 80042f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f4:	2300      	movs	r3, #0
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042fc:	4b59      	ldr	r3, [pc, #356]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b08      	cmp	r3, #8
 8004306:	d00d      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x40>
 8004308:	2b08      	cmp	r3, #8
 800430a:	f200 80a1 	bhi.w	8004450 <HAL_RCC_GetSysClockFreq+0x16c>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x34>
 8004312:	2b04      	cmp	r3, #4
 8004314:	d003      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x3a>
 8004316:	e09b      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004318:	4b53      	ldr	r3, [pc, #332]	; (8004468 <HAL_RCC_GetSysClockFreq+0x184>)
 800431a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800431c:	e09b      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800431e:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_GetSysClockFreq+0x188>)
 8004320:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004322:	e098      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004324:	4b4f      	ldr	r3, [pc, #316]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800432e:	4b4d      	ldr	r3, [pc, #308]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d028      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433a:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	2200      	movs	r2, #0
 8004342:	623b      	str	r3, [r7, #32]
 8004344:	627a      	str	r2, [r7, #36]	; 0x24
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800434c:	2100      	movs	r1, #0
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_GetSysClockFreq+0x188>)
 8004350:	fb03 f201 	mul.w	r2, r3, r1
 8004354:	2300      	movs	r3, #0
 8004356:	fb00 f303 	mul.w	r3, r0, r3
 800435a:	4413      	add	r3, r2
 800435c:	4a43      	ldr	r2, [pc, #268]	; (800446c <HAL_RCC_GetSysClockFreq+0x188>)
 800435e:	fba0 1202 	umull	r1, r2, r0, r2
 8004362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004364:	460a      	mov	r2, r1
 8004366:	62ba      	str	r2, [r7, #40]	; 0x28
 8004368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436a:	4413      	add	r3, r2
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004370:	2200      	movs	r2, #0
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	61fa      	str	r2, [r7, #28]
 8004376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800437e:	f7fb ff97 	bl	80002b0 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4613      	mov	r3, r2
 8004388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438a:	e053      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438c:	4b35      	ldr	r3, [pc, #212]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	2200      	movs	r2, #0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	617a      	str	r2, [r7, #20]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800439e:	f04f 0b00 	mov.w	fp, #0
 80043a2:	4652      	mov	r2, sl
 80043a4:	465b      	mov	r3, fp
 80043a6:	f04f 0000 	mov.w	r0, #0
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	0159      	lsls	r1, r3, #5
 80043b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b4:	0150      	lsls	r0, r2, #5
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	ebb2 080a 	subs.w	r8, r2, sl
 80043be:	eb63 090b 	sbc.w	r9, r3, fp
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043d6:	ebb2 0408 	subs.w	r4, r2, r8
 80043da:	eb63 0509 	sbc.w	r5, r3, r9
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	00eb      	lsls	r3, r5, #3
 80043e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ec:	00e2      	lsls	r2, r4, #3
 80043ee:	4614      	mov	r4, r2
 80043f0:	461d      	mov	r5, r3
 80043f2:	eb14 030a 	adds.w	r3, r4, sl
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	eb45 030b 	adc.w	r3, r5, fp
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800440a:	4629      	mov	r1, r5
 800440c:	028b      	lsls	r3, r1, #10
 800440e:	4621      	mov	r1, r4
 8004410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004414:	4621      	mov	r1, r4
 8004416:	028a      	lsls	r2, r1, #10
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441e:	2200      	movs	r2, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	60fa      	str	r2, [r7, #12]
 8004424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004428:	f7fb ff42 	bl	80002b0 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4613      	mov	r3, r2
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	3301      	adds	r3, #1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800444e:	e002      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetSysClockFreq+0x184>)
 8004452:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004458:	4618      	mov	r0, r3
 800445a:	3740      	adds	r7, #64	; 0x40
 800445c:	46bd      	mov	sp, r7
 800445e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800
 8004468:	00f42400 	.word	0x00f42400
 800446c:	017d7840 	.word	0x017d7840

08004470 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RCC_GetHCLKFreq+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800448c:	f7ff fff0 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0a9b      	lsrs	r3, r3, #10
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	08006990 	.word	0x08006990

080044b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044b4:	f7ff ffdc 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0b5b      	lsrs	r3, r3, #13
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	08006990 	.word	0x08006990

080044d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d012      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004500:	4b69      	ldr	r3, [pc, #420]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a68      	ldr	r2, [pc, #416]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800450a:	6093      	str	r3, [r2, #8]
 800450c:	4b66      	ldr	r3, [pc, #408]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	4964      	ldr	r1, [pc, #400]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d017      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004532:	4b5d      	ldr	r3, [pc, #372]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	4959      	ldr	r1, [pc, #356]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004550:	d101      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004552:	2301      	movs	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d017      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800456e:	4b4e      	ldr	r3, [pc, #312]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004574:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	494a      	ldr	r1, [pc, #296]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458c:	d101      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800458e:	2301      	movs	r3, #1
 8004590:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800459a:	2301      	movs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 808b 	beq.w	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	4a39      	ldr	r2, [pc, #228]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6413      	str	r3, [r2, #64]	; 0x40
 80045c8:	4b37      	ldr	r3, [pc, #220]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045d4:	4b35      	ldr	r3, [pc, #212]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a34      	ldr	r2, [pc, #208]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e0:	f7fd fe26 	bl	8002230 <HAL_GetTick>
 80045e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e8:	f7fd fe22 	bl	8002230 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e357      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045fa:	4b2c      	ldr	r3, [pc, #176]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004606:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d035      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	429a      	cmp	r2, r3
 8004622:	d02e      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004624:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800462e:	4b1e      	ldr	r3, [pc, #120]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a1a      	ldr	r2, [pc, #104]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004644:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004646:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800464c:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b01      	cmp	r3, #1
 8004656:	d114      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fd fdea 	bl	8002230 <HAL_GetTick>
 800465c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465e:	e00a      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fd fde6 	bl	8002230 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e319      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ee      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468e:	d111      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800469e:	400b      	ands	r3, r1
 80046a0:	4901      	ldr	r1, [pc, #4]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
 80046a6:	e00b      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046a8:	40023800 	.word	0x40023800
 80046ac:	40007000 	.word	0x40007000
 80046b0:	0ffffcff 	.word	0x0ffffcff
 80046b4:	4baa      	ldr	r3, [pc, #680]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4aa9      	ldr	r2, [pc, #676]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046be:	6093      	str	r3, [r2, #8]
 80046c0:	4ba7      	ldr	r3, [pc, #668]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046cc:	49a4      	ldr	r1, [pc, #656]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d010      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046de:	4ba0      	ldr	r3, [pc, #640]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e4:	4a9e      	ldr	r2, [pc, #632]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046ee:	4b9c      	ldr	r3, [pc, #624]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	4999      	ldr	r1, [pc, #612]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800470c:	4b94      	ldr	r3, [pc, #592]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800471a:	4991      	ldr	r1, [pc, #580]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800472e:	4b8c      	ldr	r3, [pc, #560]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800473c:	4988      	ldr	r1, [pc, #544]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004750:	4b83      	ldr	r3, [pc, #524]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475e:	4980      	ldr	r1, [pc, #512]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004772:	4b7b      	ldr	r3, [pc, #492]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	4977      	ldr	r1, [pc, #476]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004794:	4b72      	ldr	r3, [pc, #456]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f023 0203 	bic.w	r2, r3, #3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	496f      	ldr	r1, [pc, #444]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047b6:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	f023 020c 	bic.w	r2, r3, #12
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c4:	4966      	ldr	r1, [pc, #408]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047d8:	4b61      	ldr	r3, [pc, #388]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	495e      	ldr	r1, [pc, #376]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047fa:	4b59      	ldr	r3, [pc, #356]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004808:	4955      	ldr	r1, [pc, #340]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800481c:	4b50      	ldr	r3, [pc, #320]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	494d      	ldr	r1, [pc, #308]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800483e:	4b48      	ldr	r3, [pc, #288]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	4944      	ldr	r1, [pc, #272]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004860:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486e:	493c      	ldr	r1, [pc, #240]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004890:	4933      	ldr	r1, [pc, #204]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048a4:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b2:	492b      	ldr	r1, [pc, #172]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d011      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048c6:	4b26      	ldr	r3, [pc, #152]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d4:	4922      	ldr	r1, [pc, #136]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e4:	d101      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048f6:	2301      	movs	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004906:	4b16      	ldr	r3, [pc, #88]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004914:	4912      	ldr	r1, [pc, #72]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00b      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004938:	4909      	ldr	r1, [pc, #36]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d006      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 80d9 	beq.w	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004954:	4b02      	ldr	r3, [pc, #8]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a01      	ldr	r2, [pc, #4]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800495e:	e001      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004960:	40023800 	.word	0x40023800
 8004964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004966:	f7fd fc63 	bl	8002230 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800496e:	f7fd fc5f 	bl	8002230 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b64      	cmp	r3, #100	; 0x64
 800497a:	d901      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e194      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004980:	4b6c      	ldr	r3, [pc, #432]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f0      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d021      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499c:	2b00      	cmp	r3, #0
 800499e:	d11d      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049a0:	4b64      	ldr	r3, [pc, #400]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049ae:	4b61      	ldr	r3, [pc, #388]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b4:	0e1b      	lsrs	r3, r3, #24
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	019a      	lsls	r2, r3, #6
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	041b      	lsls	r3, r3, #16
 80049c6:	431a      	orrs	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	061b      	lsls	r3, r3, #24
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	071b      	lsls	r3, r3, #28
 80049d4:	4957      	ldr	r1, [pc, #348]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d02e      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a06:	d129      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a08:	4b4a      	ldr	r3, [pc, #296]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0e:	0c1b      	lsrs	r3, r3, #16
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a16:	4b47      	ldr	r3, [pc, #284]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1c:	0f1b      	lsrs	r3, r3, #28
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	019a      	lsls	r2, r3, #6
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	071b      	lsls	r3, r3, #28
 8004a3c:	493d      	ldr	r1, [pc, #244]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a44:	4b3b      	ldr	r3, [pc, #236]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a4a:	f023 021f 	bic.w	r2, r3, #31
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	3b01      	subs	r3, #1
 8004a54:	4937      	ldr	r1, [pc, #220]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01d      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a68:	4b32      	ldr	r3, [pc, #200]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6e:	0e1b      	lsrs	r3, r3, #24
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a76:	4b2f      	ldr	r3, [pc, #188]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7c:	0f1b      	lsrs	r3, r3, #28
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	019a      	lsls	r2, r3, #6
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	041b      	lsls	r3, r3, #16
 8004a90:	431a      	orrs	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	071b      	lsls	r3, r3, #28
 8004a9c:	4925      	ldr	r1, [pc, #148]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d011      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	019a      	lsls	r2, r3, #6
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	061b      	lsls	r3, r3, #24
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	071b      	lsls	r3, r3, #28
 8004acc:	4919      	ldr	r1, [pc, #100]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ad4:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ada:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fd fba6 	bl	8002230 <HAL_GetTick>
 8004ae4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ae8:	f7fd fba2 	bl	8002230 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e0d7      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004afa:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	f040 80cd 	bne.w	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1a:	f7fd fb89 	bl	8002230 <HAL_GetTick>
 8004b1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b20:	e00a      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b22:	f7fd fb85 	bl	8002230 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b64      	cmp	r3, #100	; 0x64
 8004b2e:	d903      	bls.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e0ba      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b38:	4b5e      	ldr	r3, [pc, #376]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b44:	d0ed      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02e      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d12a      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b6e:	4b51      	ldr	r3, [pc, #324]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	0c1b      	lsrs	r3, r3, #16
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b7c:	4b4d      	ldr	r3, [pc, #308]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	0f1b      	lsrs	r3, r3, #28
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	019a      	lsls	r2, r3, #6
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	061b      	lsls	r3, r3, #24
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	071b      	lsls	r3, r3, #28
 8004ba2:	4944      	ldr	r1, [pc, #272]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004baa:	4b42      	ldr	r3, [pc, #264]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	493d      	ldr	r1, [pc, #244]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d022      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd8:	d11d      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bda:	4b36      	ldr	r3, [pc, #216]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	0e1b      	lsrs	r3, r3, #24
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004be8:	4b32      	ldr	r3, [pc, #200]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	0f1b      	lsrs	r3, r3, #28
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	019a      	lsls	r2, r3, #6
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	431a      	orrs	r2, r3
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	061b      	lsls	r3, r3, #24
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	071b      	lsls	r3, r3, #28
 8004c0e:	4929      	ldr	r1, [pc, #164]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d028      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	0e1b      	lsrs	r3, r3, #24
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c30:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	019a      	lsls	r2, r3, #6
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	041b      	lsls	r3, r3, #16
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	061b      	lsls	r3, r3, #24
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	071b      	lsls	r3, r3, #28
 8004c56:	4917      	ldr	r1, [pc, #92]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c5e:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	4911      	ldr	r1, [pc, #68]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a0e      	ldr	r2, [pc, #56]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c80:	f7fd fad6 	bl	8002230 <HAL_GetTick>
 8004c84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c88:	f7fd fad2 	bl	8002230 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	; 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e007      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c9a:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca6:	d1ef      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3720      	adds	r7, #32
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e025      	b.n	8004d18 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f81d 	bl	8004d20 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f001 f84f 	bl	8005d9c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	461a      	mov	r2, r3
 8004d08:	6839      	ldr	r1, [r7, #0]
 8004d0a:	f001 f8b9 	bl	8005e80 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d101      	bne.n	8004d50 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e018      	b.n	8004d82 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 f90d 	bl	8005f80 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d104      	bne.n	8004d78 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2205      	movs	r2, #5
 8004d72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004d76:	e003      	b.n	8004d80 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d101      	bne.n	8004da4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004da0:	2302      	movs	r3, #2
 8004da2:	e00e      	b.n	8004dc2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 f905 	bl	8005fc2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e040      	b.n	8004e5e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7fc f875 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2224      	movs	r2, #36	; 0x24
 8004df6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0201 	bic.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb1f 	bl	800544c <UART_SetConfig>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e022      	b.n	8004e5e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fd77 	bl	8005914 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0201 	orr.w	r2, r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fdfe 	bl	8005a58 <UART_CheckIdleState>
 8004e5c:	4603      	mov	r3, r0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b0ba      	sub	sp, #232	; 0xe8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e92:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e96:	4013      	ands	r3, r2
 8004e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d115      	bne.n	8004ed0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00f      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d009      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8297 	beq.w	80053f4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	4798      	blx	r3
      }
      return;
 8004ece:	e291      	b.n	80053f4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8117 	beq.w	8005108 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ee6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004eea:	4b85      	ldr	r3, [pc, #532]	; (8005100 <HAL_UART_IRQHandler+0x298>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 810a 	beq.w	8005108 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d011      	beq.n	8004f24 <HAL_UART_IRQHandler+0xbc>
 8004f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00b      	beq.n	8004f24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2201      	movs	r2, #1
 8004f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1a:	f043 0201 	orr.w	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d011      	beq.n	8004f54 <HAL_UART_IRQHandler+0xec>
 8004f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00b      	beq.n	8004f54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2202      	movs	r2, #2
 8004f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4a:	f043 0204 	orr.w	r2, r3, #4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d011      	beq.n	8004f84 <HAL_UART_IRQHandler+0x11c>
 8004f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00b      	beq.n	8004f84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2204      	movs	r2, #4
 8004f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7a:	f043 0202 	orr.w	r2, r3, #2
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d017      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2208      	movs	r2, #8
 8004fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb6:	f043 0208 	orr.w	r2, r3, #8
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d012      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x18a>
 8004fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00c      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe8:	f043 0220 	orr.w	r2, r3, #32
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 81fd 	beq.w	80053f8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00d      	beq.n	8005026 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800500a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800502c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503a:	2b40      	cmp	r3, #64	; 0x40
 800503c:	d005      	beq.n	800504a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800503e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005042:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005046:	2b00      	cmp	r3, #0
 8005048:	d04f      	beq.n	80050ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fe01 	bl	8005c52 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d141      	bne.n	80050e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3308      	adds	r3, #8
 8005064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3308      	adds	r3, #8
 8005086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800508a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800508e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1d9      	bne.n	800505e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d013      	beq.n	80050da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b6:	4a13      	ldr	r2, [pc, #76]	; (8005104 <HAL_UART_IRQHandler+0x29c>)
 80050b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fd fc5e 	bl	8002980 <HAL_DMA_Abort_IT>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d017      	beq.n	80050fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050d4:	4610      	mov	r0, r2
 80050d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	e00f      	b.n	80050fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f9a0 	bl	8005420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	e00b      	b.n	80050fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f99c 	bl	8005420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	e007      	b.n	80050fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f998 	bl	8005420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80050f8:	e17e      	b.n	80053f8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fa:	bf00      	nop
    return;
 80050fc:	e17c      	b.n	80053f8 <HAL_UART_IRQHandler+0x590>
 80050fe:	bf00      	nop
 8005100:	04000120 	.word	0x04000120
 8005104:	08005d1b 	.word	0x08005d1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800510c:	2b01      	cmp	r3, #1
 800510e:	f040 814c 	bne.w	80053aa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8145 	beq.w	80053aa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 813e 	beq.w	80053aa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2210      	movs	r2, #16
 8005134:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	f040 80b6 	bne.w	80052b2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005152:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 8150 	beq.w	80053fc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005166:	429a      	cmp	r2, r3
 8005168:	f080 8148 	bcs.w	80053fc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005172:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005180:	f000 8086 	beq.w	8005290 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800519c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1da      	bne.n	8005184 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3308      	adds	r3, #8
 80051d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3308      	adds	r3, #8
 80051ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e1      	bne.n	80051ce <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3308      	adds	r3, #8
 8005210:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800521a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800521c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3308      	adds	r3, #8
 800522a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800522e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005230:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005234:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800523c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e3      	bne.n	800520a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800525e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005260:	f023 0310 	bic.w	r3, r3, #16
 8005264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005272:	65bb      	str	r3, [r7, #88]	; 0x58
 8005274:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005278:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e4      	bne.n	8005250 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528a:	4618      	mov	r0, r3
 800528c:	f7fd fb08 	bl	80028a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	4619      	mov	r1, r3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8c2 	bl	8005434 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052b0:	e0a4      	b.n	80053fc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8096 	beq.w	8005400 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80052d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8091 	beq.w	8005400 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005300:	647b      	str	r3, [r7, #68]	; 0x44
 8005302:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e4      	bne.n	80052de <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	623b      	str	r3, [r7, #32]
   return(result);
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3308      	adds	r3, #8
 8005334:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005338:	633a      	str	r2, [r7, #48]	; 0x30
 800533a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800533e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e3      	bne.n	8005314 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	60fb      	str	r3, [r7, #12]
   return(result);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f023 0310 	bic.w	r3, r3, #16
 8005374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	69b9      	ldr	r1, [r7, #24]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	617b      	str	r3, [r7, #20]
   return(result);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e4      	bne.n	8005360 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800539c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f846 	bl	8005434 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053a8:	e02a      	b.n	8005400 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00e      	beq.n	80053d4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01c      	beq.n	8005404 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	4798      	blx	r3
    }
    return;
 80053d2:	e017      	b.n	8005404 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d012      	beq.n	8005406 <HAL_UART_IRQHandler+0x59e>
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00c      	beq.n	8005406 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fcaa 	bl	8005d46 <UART_EndTransmit_IT>
    return;
 80053f2:	e008      	b.n	8005406 <HAL_UART_IRQHandler+0x59e>
      return;
 80053f4:	bf00      	nop
 80053f6:	e006      	b.n	8005406 <HAL_UART_IRQHandler+0x59e>
    return;
 80053f8:	bf00      	nop
 80053fa:	e004      	b.n	8005406 <HAL_UART_IRQHandler+0x59e>
      return;
 80053fc:	bf00      	nop
 80053fe:	e002      	b.n	8005406 <HAL_UART_IRQHandler+0x59e>
      return;
 8005400:	bf00      	nop
 8005402:	e000      	b.n	8005406 <HAL_UART_IRQHandler+0x59e>
    return;
 8005404:	bf00      	nop
  }

}
 8005406:	37e8      	adds	r7, #232	; 0xe8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4ba6      	ldr	r3, [pc, #664]	; (8005710 <UART_SetConfig+0x2c4>)
 8005478:	4013      	ands	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	6979      	ldr	r1, [r7, #20]
 8005480:	430b      	orrs	r3, r1
 8005482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a94      	ldr	r2, [pc, #592]	; (8005714 <UART_SetConfig+0x2c8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d120      	bne.n	800550a <UART_SetConfig+0xbe>
 80054c8:	4b93      	ldr	r3, [pc, #588]	; (8005718 <UART_SetConfig+0x2cc>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d816      	bhi.n	8005504 <UART_SetConfig+0xb8>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x90>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	080054ed 	.word	0x080054ed
 80054e0:	080054f9 	.word	0x080054f9
 80054e4:	080054f3 	.word	0x080054f3
 80054e8:	080054ff 	.word	0x080054ff
 80054ec:	2301      	movs	r3, #1
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e150      	b.n	8005794 <UART_SetConfig+0x348>
 80054f2:	2302      	movs	r3, #2
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	e14d      	b.n	8005794 <UART_SetConfig+0x348>
 80054f8:	2304      	movs	r3, #4
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e14a      	b.n	8005794 <UART_SetConfig+0x348>
 80054fe:	2308      	movs	r3, #8
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e147      	b.n	8005794 <UART_SetConfig+0x348>
 8005504:	2310      	movs	r3, #16
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e144      	b.n	8005794 <UART_SetConfig+0x348>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a83      	ldr	r2, [pc, #524]	; (800571c <UART_SetConfig+0x2d0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d132      	bne.n	800557a <UART_SetConfig+0x12e>
 8005514:	4b80      	ldr	r3, [pc, #512]	; (8005718 <UART_SetConfig+0x2cc>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f003 030c 	and.w	r3, r3, #12
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d828      	bhi.n	8005574 <UART_SetConfig+0x128>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0xdc>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800555d 	.word	0x0800555d
 800552c:	08005575 	.word	0x08005575
 8005530:	08005575 	.word	0x08005575
 8005534:	08005575 	.word	0x08005575
 8005538:	08005569 	.word	0x08005569
 800553c:	08005575 	.word	0x08005575
 8005540:	08005575 	.word	0x08005575
 8005544:	08005575 	.word	0x08005575
 8005548:	08005563 	.word	0x08005563
 800554c:	08005575 	.word	0x08005575
 8005550:	08005575 	.word	0x08005575
 8005554:	08005575 	.word	0x08005575
 8005558:	0800556f 	.word	0x0800556f
 800555c:	2300      	movs	r3, #0
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e118      	b.n	8005794 <UART_SetConfig+0x348>
 8005562:	2302      	movs	r3, #2
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e115      	b.n	8005794 <UART_SetConfig+0x348>
 8005568:	2304      	movs	r3, #4
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e112      	b.n	8005794 <UART_SetConfig+0x348>
 800556e:	2308      	movs	r3, #8
 8005570:	77fb      	strb	r3, [r7, #31]
 8005572:	e10f      	b.n	8005794 <UART_SetConfig+0x348>
 8005574:	2310      	movs	r3, #16
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e10c      	b.n	8005794 <UART_SetConfig+0x348>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a68      	ldr	r2, [pc, #416]	; (8005720 <UART_SetConfig+0x2d4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d120      	bne.n	80055c6 <UART_SetConfig+0x17a>
 8005584:	4b64      	ldr	r3, [pc, #400]	; (8005718 <UART_SetConfig+0x2cc>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800558e:	2b30      	cmp	r3, #48	; 0x30
 8005590:	d013      	beq.n	80055ba <UART_SetConfig+0x16e>
 8005592:	2b30      	cmp	r3, #48	; 0x30
 8005594:	d814      	bhi.n	80055c0 <UART_SetConfig+0x174>
 8005596:	2b20      	cmp	r3, #32
 8005598:	d009      	beq.n	80055ae <UART_SetConfig+0x162>
 800559a:	2b20      	cmp	r3, #32
 800559c:	d810      	bhi.n	80055c0 <UART_SetConfig+0x174>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <UART_SetConfig+0x15c>
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d006      	beq.n	80055b4 <UART_SetConfig+0x168>
 80055a6:	e00b      	b.n	80055c0 <UART_SetConfig+0x174>
 80055a8:	2300      	movs	r3, #0
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e0f2      	b.n	8005794 <UART_SetConfig+0x348>
 80055ae:	2302      	movs	r3, #2
 80055b0:	77fb      	strb	r3, [r7, #31]
 80055b2:	e0ef      	b.n	8005794 <UART_SetConfig+0x348>
 80055b4:	2304      	movs	r3, #4
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e0ec      	b.n	8005794 <UART_SetConfig+0x348>
 80055ba:	2308      	movs	r3, #8
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e0e9      	b.n	8005794 <UART_SetConfig+0x348>
 80055c0:	2310      	movs	r3, #16
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e0e6      	b.n	8005794 <UART_SetConfig+0x348>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a56      	ldr	r2, [pc, #344]	; (8005724 <UART_SetConfig+0x2d8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d120      	bne.n	8005612 <UART_SetConfig+0x1c6>
 80055d0:	4b51      	ldr	r3, [pc, #324]	; (8005718 <UART_SetConfig+0x2cc>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055da:	2bc0      	cmp	r3, #192	; 0xc0
 80055dc:	d013      	beq.n	8005606 <UART_SetConfig+0x1ba>
 80055de:	2bc0      	cmp	r3, #192	; 0xc0
 80055e0:	d814      	bhi.n	800560c <UART_SetConfig+0x1c0>
 80055e2:	2b80      	cmp	r3, #128	; 0x80
 80055e4:	d009      	beq.n	80055fa <UART_SetConfig+0x1ae>
 80055e6:	2b80      	cmp	r3, #128	; 0x80
 80055e8:	d810      	bhi.n	800560c <UART_SetConfig+0x1c0>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <UART_SetConfig+0x1a8>
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d006      	beq.n	8005600 <UART_SetConfig+0x1b4>
 80055f2:	e00b      	b.n	800560c <UART_SetConfig+0x1c0>
 80055f4:	2300      	movs	r3, #0
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e0cc      	b.n	8005794 <UART_SetConfig+0x348>
 80055fa:	2302      	movs	r3, #2
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e0c9      	b.n	8005794 <UART_SetConfig+0x348>
 8005600:	2304      	movs	r3, #4
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e0c6      	b.n	8005794 <UART_SetConfig+0x348>
 8005606:	2308      	movs	r3, #8
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e0c3      	b.n	8005794 <UART_SetConfig+0x348>
 800560c:	2310      	movs	r3, #16
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e0c0      	b.n	8005794 <UART_SetConfig+0x348>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a44      	ldr	r2, [pc, #272]	; (8005728 <UART_SetConfig+0x2dc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d125      	bne.n	8005668 <UART_SetConfig+0x21c>
 800561c:	4b3e      	ldr	r3, [pc, #248]	; (8005718 <UART_SetConfig+0x2cc>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562a:	d017      	beq.n	800565c <UART_SetConfig+0x210>
 800562c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005630:	d817      	bhi.n	8005662 <UART_SetConfig+0x216>
 8005632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005636:	d00b      	beq.n	8005650 <UART_SetConfig+0x204>
 8005638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563c:	d811      	bhi.n	8005662 <UART_SetConfig+0x216>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <UART_SetConfig+0x1fe>
 8005642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005646:	d006      	beq.n	8005656 <UART_SetConfig+0x20a>
 8005648:	e00b      	b.n	8005662 <UART_SetConfig+0x216>
 800564a:	2300      	movs	r3, #0
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e0a1      	b.n	8005794 <UART_SetConfig+0x348>
 8005650:	2302      	movs	r3, #2
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e09e      	b.n	8005794 <UART_SetConfig+0x348>
 8005656:	2304      	movs	r3, #4
 8005658:	77fb      	strb	r3, [r7, #31]
 800565a:	e09b      	b.n	8005794 <UART_SetConfig+0x348>
 800565c:	2308      	movs	r3, #8
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e098      	b.n	8005794 <UART_SetConfig+0x348>
 8005662:	2310      	movs	r3, #16
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e095      	b.n	8005794 <UART_SetConfig+0x348>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a2f      	ldr	r2, [pc, #188]	; (800572c <UART_SetConfig+0x2e0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d125      	bne.n	80056be <UART_SetConfig+0x272>
 8005672:	4b29      	ldr	r3, [pc, #164]	; (8005718 <UART_SetConfig+0x2cc>)
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005678:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800567c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005680:	d017      	beq.n	80056b2 <UART_SetConfig+0x266>
 8005682:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005686:	d817      	bhi.n	80056b8 <UART_SetConfig+0x26c>
 8005688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800568c:	d00b      	beq.n	80056a6 <UART_SetConfig+0x25a>
 800568e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005692:	d811      	bhi.n	80056b8 <UART_SetConfig+0x26c>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <UART_SetConfig+0x254>
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569c:	d006      	beq.n	80056ac <UART_SetConfig+0x260>
 800569e:	e00b      	b.n	80056b8 <UART_SetConfig+0x26c>
 80056a0:	2301      	movs	r3, #1
 80056a2:	77fb      	strb	r3, [r7, #31]
 80056a4:	e076      	b.n	8005794 <UART_SetConfig+0x348>
 80056a6:	2302      	movs	r3, #2
 80056a8:	77fb      	strb	r3, [r7, #31]
 80056aa:	e073      	b.n	8005794 <UART_SetConfig+0x348>
 80056ac:	2304      	movs	r3, #4
 80056ae:	77fb      	strb	r3, [r7, #31]
 80056b0:	e070      	b.n	8005794 <UART_SetConfig+0x348>
 80056b2:	2308      	movs	r3, #8
 80056b4:	77fb      	strb	r3, [r7, #31]
 80056b6:	e06d      	b.n	8005794 <UART_SetConfig+0x348>
 80056b8:	2310      	movs	r3, #16
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e06a      	b.n	8005794 <UART_SetConfig+0x348>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <UART_SetConfig+0x2e4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d138      	bne.n	800573a <UART_SetConfig+0x2ee>
 80056c8:	4b13      	ldr	r3, [pc, #76]	; (8005718 <UART_SetConfig+0x2cc>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056d6:	d017      	beq.n	8005708 <UART_SetConfig+0x2bc>
 80056d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056dc:	d82a      	bhi.n	8005734 <UART_SetConfig+0x2e8>
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e2:	d00b      	beq.n	80056fc <UART_SetConfig+0x2b0>
 80056e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e8:	d824      	bhi.n	8005734 <UART_SetConfig+0x2e8>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <UART_SetConfig+0x2aa>
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f2:	d006      	beq.n	8005702 <UART_SetConfig+0x2b6>
 80056f4:	e01e      	b.n	8005734 <UART_SetConfig+0x2e8>
 80056f6:	2300      	movs	r3, #0
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e04b      	b.n	8005794 <UART_SetConfig+0x348>
 80056fc:	2302      	movs	r3, #2
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e048      	b.n	8005794 <UART_SetConfig+0x348>
 8005702:	2304      	movs	r3, #4
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e045      	b.n	8005794 <UART_SetConfig+0x348>
 8005708:	2308      	movs	r3, #8
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e042      	b.n	8005794 <UART_SetConfig+0x348>
 800570e:	bf00      	nop
 8005710:	efff69f3 	.word	0xefff69f3
 8005714:	40011000 	.word	0x40011000
 8005718:	40023800 	.word	0x40023800
 800571c:	40004400 	.word	0x40004400
 8005720:	40004800 	.word	0x40004800
 8005724:	40004c00 	.word	0x40004c00
 8005728:	40005000 	.word	0x40005000
 800572c:	40011400 	.word	0x40011400
 8005730:	40007800 	.word	0x40007800
 8005734:	2310      	movs	r3, #16
 8005736:	77fb      	strb	r3, [r7, #31]
 8005738:	e02c      	b.n	8005794 <UART_SetConfig+0x348>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a72      	ldr	r2, [pc, #456]	; (8005908 <UART_SetConfig+0x4bc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d125      	bne.n	8005790 <UART_SetConfig+0x344>
 8005744:	4b71      	ldr	r3, [pc, #452]	; (800590c <UART_SetConfig+0x4c0>)
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800574e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005752:	d017      	beq.n	8005784 <UART_SetConfig+0x338>
 8005754:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005758:	d817      	bhi.n	800578a <UART_SetConfig+0x33e>
 800575a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575e:	d00b      	beq.n	8005778 <UART_SetConfig+0x32c>
 8005760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005764:	d811      	bhi.n	800578a <UART_SetConfig+0x33e>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <UART_SetConfig+0x326>
 800576a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800576e:	d006      	beq.n	800577e <UART_SetConfig+0x332>
 8005770:	e00b      	b.n	800578a <UART_SetConfig+0x33e>
 8005772:	2300      	movs	r3, #0
 8005774:	77fb      	strb	r3, [r7, #31]
 8005776:	e00d      	b.n	8005794 <UART_SetConfig+0x348>
 8005778:	2302      	movs	r3, #2
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e00a      	b.n	8005794 <UART_SetConfig+0x348>
 800577e:	2304      	movs	r3, #4
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e007      	b.n	8005794 <UART_SetConfig+0x348>
 8005784:	2308      	movs	r3, #8
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e004      	b.n	8005794 <UART_SetConfig+0x348>
 800578a:	2310      	movs	r3, #16
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e001      	b.n	8005794 <UART_SetConfig+0x348>
 8005790:	2310      	movs	r3, #16
 8005792:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579c:	d15b      	bne.n	8005856 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800579e:	7ffb      	ldrb	r3, [r7, #31]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d828      	bhi.n	80057f6 <UART_SetConfig+0x3aa>
 80057a4:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <UART_SetConfig+0x360>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057d1 	.word	0x080057d1
 80057b0:	080057d9 	.word	0x080057d9
 80057b4:	080057e1 	.word	0x080057e1
 80057b8:	080057f7 	.word	0x080057f7
 80057bc:	080057e7 	.word	0x080057e7
 80057c0:	080057f7 	.word	0x080057f7
 80057c4:	080057f7 	.word	0x080057f7
 80057c8:	080057f7 	.word	0x080057f7
 80057cc:	080057ef 	.word	0x080057ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d0:	f7fe fe5a 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 80057d4:	61b8      	str	r0, [r7, #24]
        break;
 80057d6:	e013      	b.n	8005800 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057d8:	f7fe fe6a 	bl	80044b0 <HAL_RCC_GetPCLK2Freq>
 80057dc:	61b8      	str	r0, [r7, #24]
        break;
 80057de:	e00f      	b.n	8005800 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e0:	4b4b      	ldr	r3, [pc, #300]	; (8005910 <UART_SetConfig+0x4c4>)
 80057e2:	61bb      	str	r3, [r7, #24]
        break;
 80057e4:	e00c      	b.n	8005800 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e6:	f7fe fd7d 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 80057ea:	61b8      	str	r0, [r7, #24]
        break;
 80057ec:	e008      	b.n	8005800 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057f2:	61bb      	str	r3, [r7, #24]
        break;
 80057f4:	e004      	b.n	8005800 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	77bb      	strb	r3, [r7, #30]
        break;
 80057fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d074      	beq.n	80058f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	005a      	lsls	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	441a      	add	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	fbb2 f3f3 	udiv	r3, r2, r3
 800581a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b0f      	cmp	r3, #15
 8005820:	d916      	bls.n	8005850 <UART_SetConfig+0x404>
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005828:	d212      	bcs.n	8005850 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	b29b      	uxth	r3, r3
 800582e:	f023 030f 	bic.w	r3, r3, #15
 8005832:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	b29b      	uxth	r3, r3
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	b29a      	uxth	r2, r3
 8005840:	89fb      	ldrh	r3, [r7, #14]
 8005842:	4313      	orrs	r3, r2
 8005844:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	89fa      	ldrh	r2, [r7, #14]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	e04f      	b.n	80058f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	77bb      	strb	r3, [r7, #30]
 8005854:	e04c      	b.n	80058f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005856:	7ffb      	ldrb	r3, [r7, #31]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d828      	bhi.n	80058ae <UART_SetConfig+0x462>
 800585c:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0x418>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005889 	.word	0x08005889
 8005868:	08005891 	.word	0x08005891
 800586c:	08005899 	.word	0x08005899
 8005870:	080058af 	.word	0x080058af
 8005874:	0800589f 	.word	0x0800589f
 8005878:	080058af 	.word	0x080058af
 800587c:	080058af 	.word	0x080058af
 8005880:	080058af 	.word	0x080058af
 8005884:	080058a7 	.word	0x080058a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005888:	f7fe fdfe 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 800588c:	61b8      	str	r0, [r7, #24]
        break;
 800588e:	e013      	b.n	80058b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005890:	f7fe fe0e 	bl	80044b0 <HAL_RCC_GetPCLK2Freq>
 8005894:	61b8      	str	r0, [r7, #24]
        break;
 8005896:	e00f      	b.n	80058b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005898:	4b1d      	ldr	r3, [pc, #116]	; (8005910 <UART_SetConfig+0x4c4>)
 800589a:	61bb      	str	r3, [r7, #24]
        break;
 800589c:	e00c      	b.n	80058b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800589e:	f7fe fd21 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 80058a2:	61b8      	str	r0, [r7, #24]
        break;
 80058a4:	e008      	b.n	80058b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058aa:	61bb      	str	r3, [r7, #24]
        break;
 80058ac:	e004      	b.n	80058b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	77bb      	strb	r3, [r7, #30]
        break;
 80058b6:	bf00      	nop
    }

    if (pclk != 0U)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d018      	beq.n	80058f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	085a      	lsrs	r2, r3, #1
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	441a      	add	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b0f      	cmp	r3, #15
 80058d6:	d909      	bls.n	80058ec <UART_SetConfig+0x4a0>
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058de:	d205      	bcs.n	80058ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60da      	str	r2, [r3, #12]
 80058ea:	e001      	b.n	80058f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80058fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3720      	adds	r7, #32
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40007c00 	.word	0x40007c00
 800590c:	40023800 	.word	0x40023800
 8005910:	00f42400 	.word	0x00f42400

08005914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01a      	beq.n	8005a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a12:	d10a      	bne.n	8005a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a68:	f7fc fbe2 	bl	8002230 <HAL_GetTick>
 8005a6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d10e      	bne.n	8005a9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f81b 	bl	8005ac6 <UART_WaitOnFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e011      	b.n	8005abe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b09c      	sub	sp, #112	; 0x70
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	603b      	str	r3, [r7, #0]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad6:	e0a7      	b.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ade:	f000 80a3 	beq.w	8005c28 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae2:	f7fc fba5 	bl	8002230 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d302      	bcc.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d13f      	bne.n	8005b78 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b0c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e6      	bne.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3308      	adds	r3, #8
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	663b      	str	r3, [r7, #96]	; 0x60
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3308      	adds	r3, #8
 8005b48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e5      	bne.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e068      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d050      	beq.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b94:	d148      	bne.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b9e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e6      	bne.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	613b      	str	r3, [r7, #16]
   return(result);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bf2:	623a      	str	r2, [r7, #32]
 8005bf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	69f9      	ldr	r1, [r7, #28]
 8005bf8:	6a3a      	ldr	r2, [r7, #32]
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e5      	bne.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e010      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69da      	ldr	r2, [r3, #28]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	4013      	ands	r3, r2
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	bf0c      	ite	eq
 8005c38:	2301      	moveq	r3, #1
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	79fb      	ldrb	r3, [r7, #7]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	f43f af48 	beq.w	8005ad8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3770      	adds	r7, #112	; 0x70
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b095      	sub	sp, #84	; 0x54
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c78:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e6      	bne.n	8005c5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
 8005ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e5      	bne.n	8005c8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d118      	bne.n	8005cfa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f023 0310 	bic.w	r3, r3, #16
 8005cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6979      	ldr	r1, [r7, #20]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e6      	bne.n	8005cc8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d0e:	bf00      	nop
 8005d10:	3754      	adds	r7, #84	; 0x54
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff fb71 	bl	8005420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b088      	sub	sp, #32
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6979      	ldr	r1, [r7, #20]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e6      	bne.n	8005d4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff fb3d 	bl	800540c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d92:	bf00      	nop
 8005d94:	3720      	adds	r7, #32
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d027      	beq.n	8005e06 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4b2f      	ldr	r3, [pc, #188]	; (8005e7c <FMC_SDRAM_Init+0xe0>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005dcc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005dd2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005dd8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005dde:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005de4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005dea:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005df0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005df6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	e032      	b.n	8005e6c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e12:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e1c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005e22:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <FMC_SDRAM_Init+0xe0>)
 8005e34:	4013      	ands	r3, r2
 8005e36:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e40:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005e46:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005e4c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005e52:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005e58:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	ffff8000 	.word	0xffff8000

08005e80 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d02e      	beq.n	8005ef8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ea6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005eb6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005ec0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005eca:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005ed4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005ede:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	609a      	str	r2, [r3, #8]
 8005ef6:	e039      	b.n	8005f6c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4b1e      	ldr	r3, [pc, #120]	; (8005f7c <FMC_SDRAM_Timing_Init+0xfc>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005f16:	4313      	orrs	r3, r2
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f2a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f3a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005f44:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005f4e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	ff0f0fff 	.word	0xff0f0fff

08005f80 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005f98:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005fa2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	695a      	ldr	r2, [r3, #20]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <__errno>:
 8005fe8:	4b01      	ldr	r3, [pc, #4]	; (8005ff0 <__errno+0x8>)
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000018 	.word	0x20000018

08005ff4 <__libc_init_array>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	4d0d      	ldr	r5, [pc, #52]	; (800602c <__libc_init_array+0x38>)
 8005ff8:	4c0d      	ldr	r4, [pc, #52]	; (8006030 <__libc_init_array+0x3c>)
 8005ffa:	1b64      	subs	r4, r4, r5
 8005ffc:	10a4      	asrs	r4, r4, #2
 8005ffe:	2600      	movs	r6, #0
 8006000:	42a6      	cmp	r6, r4
 8006002:	d109      	bne.n	8006018 <__libc_init_array+0x24>
 8006004:	4d0b      	ldr	r5, [pc, #44]	; (8006034 <__libc_init_array+0x40>)
 8006006:	4c0c      	ldr	r4, [pc, #48]	; (8006038 <__libc_init_array+0x44>)
 8006008:	f000 fc8e 	bl	8006928 <_init>
 800600c:	1b64      	subs	r4, r4, r5
 800600e:	10a4      	asrs	r4, r4, #2
 8006010:	2600      	movs	r6, #0
 8006012:	42a6      	cmp	r6, r4
 8006014:	d105      	bne.n	8006022 <__libc_init_array+0x2e>
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	f855 3b04 	ldr.w	r3, [r5], #4
 800601c:	4798      	blx	r3
 800601e:	3601      	adds	r6, #1
 8006020:	e7ee      	b.n	8006000 <__libc_init_array+0xc>
 8006022:	f855 3b04 	ldr.w	r3, [r5], #4
 8006026:	4798      	blx	r3
 8006028:	3601      	adds	r6, #1
 800602a:	e7f2      	b.n	8006012 <__libc_init_array+0x1e>
 800602c:	08008494 	.word	0x08008494
 8006030:	08008494 	.word	0x08008494
 8006034:	08008494 	.word	0x08008494
 8006038:	08008498 	.word	0x08008498

0800603c <memcpy>:
 800603c:	440a      	add	r2, r1
 800603e:	4291      	cmp	r1, r2
 8006040:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006044:	d100      	bne.n	8006048 <memcpy+0xc>
 8006046:	4770      	bx	lr
 8006048:	b510      	push	{r4, lr}
 800604a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800604e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006052:	4291      	cmp	r1, r2
 8006054:	d1f9      	bne.n	800604a <memcpy+0xe>
 8006056:	bd10      	pop	{r4, pc}

08006058 <memset>:
 8006058:	4402      	add	r2, r0
 800605a:	4603      	mov	r3, r0
 800605c:	4293      	cmp	r3, r2
 800605e:	d100      	bne.n	8006062 <memset+0xa>
 8006060:	4770      	bx	lr
 8006062:	f803 1b01 	strb.w	r1, [r3], #1
 8006066:	e7f9      	b.n	800605c <memset+0x4>

08006068 <siprintf>:
 8006068:	b40e      	push	{r1, r2, r3}
 800606a:	b500      	push	{lr}
 800606c:	b09c      	sub	sp, #112	; 0x70
 800606e:	ab1d      	add	r3, sp, #116	; 0x74
 8006070:	9002      	str	r0, [sp, #8]
 8006072:	9006      	str	r0, [sp, #24]
 8006074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006078:	4809      	ldr	r0, [pc, #36]	; (80060a0 <siprintf+0x38>)
 800607a:	9107      	str	r1, [sp, #28]
 800607c:	9104      	str	r1, [sp, #16]
 800607e:	4909      	ldr	r1, [pc, #36]	; (80060a4 <siprintf+0x3c>)
 8006080:	f853 2b04 	ldr.w	r2, [r3], #4
 8006084:	9105      	str	r1, [sp, #20]
 8006086:	6800      	ldr	r0, [r0, #0]
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	a902      	add	r1, sp, #8
 800608c:	f000 f868 	bl	8006160 <_svfiprintf_r>
 8006090:	9b02      	ldr	r3, [sp, #8]
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	b01c      	add	sp, #112	; 0x70
 8006098:	f85d eb04 	ldr.w	lr, [sp], #4
 800609c:	b003      	add	sp, #12
 800609e:	4770      	bx	lr
 80060a0:	20000018 	.word	0x20000018
 80060a4:	ffff0208 	.word	0xffff0208

080060a8 <__ssputs_r>:
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	688e      	ldr	r6, [r1, #8]
 80060ae:	429e      	cmp	r6, r3
 80060b0:	4682      	mov	sl, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	4690      	mov	r8, r2
 80060b6:	461f      	mov	r7, r3
 80060b8:	d838      	bhi.n	800612c <__ssputs_r+0x84>
 80060ba:	898a      	ldrh	r2, [r1, #12]
 80060bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060c0:	d032      	beq.n	8006128 <__ssputs_r+0x80>
 80060c2:	6825      	ldr	r5, [r4, #0]
 80060c4:	6909      	ldr	r1, [r1, #16]
 80060c6:	eba5 0901 	sub.w	r9, r5, r1
 80060ca:	6965      	ldr	r5, [r4, #20]
 80060cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060d4:	3301      	adds	r3, #1
 80060d6:	444b      	add	r3, r9
 80060d8:	106d      	asrs	r5, r5, #1
 80060da:	429d      	cmp	r5, r3
 80060dc:	bf38      	it	cc
 80060de:	461d      	movcc	r5, r3
 80060e0:	0553      	lsls	r3, r2, #21
 80060e2:	d531      	bpl.n	8006148 <__ssputs_r+0xa0>
 80060e4:	4629      	mov	r1, r5
 80060e6:	f000 fb55 	bl	8006794 <_malloc_r>
 80060ea:	4606      	mov	r6, r0
 80060ec:	b950      	cbnz	r0, 8006104 <__ssputs_r+0x5c>
 80060ee:	230c      	movs	r3, #12
 80060f0:	f8ca 3000 	str.w	r3, [sl]
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060fa:	81a3      	strh	r3, [r4, #12]
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006104:	6921      	ldr	r1, [r4, #16]
 8006106:	464a      	mov	r2, r9
 8006108:	f7ff ff98 	bl	800603c <memcpy>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006116:	81a3      	strh	r3, [r4, #12]
 8006118:	6126      	str	r6, [r4, #16]
 800611a:	6165      	str	r5, [r4, #20]
 800611c:	444e      	add	r6, r9
 800611e:	eba5 0509 	sub.w	r5, r5, r9
 8006122:	6026      	str	r6, [r4, #0]
 8006124:	60a5      	str	r5, [r4, #8]
 8006126:	463e      	mov	r6, r7
 8006128:	42be      	cmp	r6, r7
 800612a:	d900      	bls.n	800612e <__ssputs_r+0x86>
 800612c:	463e      	mov	r6, r7
 800612e:	6820      	ldr	r0, [r4, #0]
 8006130:	4632      	mov	r2, r6
 8006132:	4641      	mov	r1, r8
 8006134:	f000 faa8 	bl	8006688 <memmove>
 8006138:	68a3      	ldr	r3, [r4, #8]
 800613a:	1b9b      	subs	r3, r3, r6
 800613c:	60a3      	str	r3, [r4, #8]
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	4433      	add	r3, r6
 8006142:	6023      	str	r3, [r4, #0]
 8006144:	2000      	movs	r0, #0
 8006146:	e7db      	b.n	8006100 <__ssputs_r+0x58>
 8006148:	462a      	mov	r2, r5
 800614a:	f000 fb97 	bl	800687c <_realloc_r>
 800614e:	4606      	mov	r6, r0
 8006150:	2800      	cmp	r0, #0
 8006152:	d1e1      	bne.n	8006118 <__ssputs_r+0x70>
 8006154:	6921      	ldr	r1, [r4, #16]
 8006156:	4650      	mov	r0, sl
 8006158:	f000 fab0 	bl	80066bc <_free_r>
 800615c:	e7c7      	b.n	80060ee <__ssputs_r+0x46>
	...

08006160 <_svfiprintf_r>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	4698      	mov	r8, r3
 8006166:	898b      	ldrh	r3, [r1, #12]
 8006168:	061b      	lsls	r3, r3, #24
 800616a:	b09d      	sub	sp, #116	; 0x74
 800616c:	4607      	mov	r7, r0
 800616e:	460d      	mov	r5, r1
 8006170:	4614      	mov	r4, r2
 8006172:	d50e      	bpl.n	8006192 <_svfiprintf_r+0x32>
 8006174:	690b      	ldr	r3, [r1, #16]
 8006176:	b963      	cbnz	r3, 8006192 <_svfiprintf_r+0x32>
 8006178:	2140      	movs	r1, #64	; 0x40
 800617a:	f000 fb0b 	bl	8006794 <_malloc_r>
 800617e:	6028      	str	r0, [r5, #0]
 8006180:	6128      	str	r0, [r5, #16]
 8006182:	b920      	cbnz	r0, 800618e <_svfiprintf_r+0x2e>
 8006184:	230c      	movs	r3, #12
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800618c:	e0d1      	b.n	8006332 <_svfiprintf_r+0x1d2>
 800618e:	2340      	movs	r3, #64	; 0x40
 8006190:	616b      	str	r3, [r5, #20]
 8006192:	2300      	movs	r3, #0
 8006194:	9309      	str	r3, [sp, #36]	; 0x24
 8006196:	2320      	movs	r3, #32
 8006198:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800619c:	f8cd 800c 	str.w	r8, [sp, #12]
 80061a0:	2330      	movs	r3, #48	; 0x30
 80061a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800634c <_svfiprintf_r+0x1ec>
 80061a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061aa:	f04f 0901 	mov.w	r9, #1
 80061ae:	4623      	mov	r3, r4
 80061b0:	469a      	mov	sl, r3
 80061b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061b6:	b10a      	cbz	r2, 80061bc <_svfiprintf_r+0x5c>
 80061b8:	2a25      	cmp	r2, #37	; 0x25
 80061ba:	d1f9      	bne.n	80061b0 <_svfiprintf_r+0x50>
 80061bc:	ebba 0b04 	subs.w	fp, sl, r4
 80061c0:	d00b      	beq.n	80061da <_svfiprintf_r+0x7a>
 80061c2:	465b      	mov	r3, fp
 80061c4:	4622      	mov	r2, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff ff6d 	bl	80060a8 <__ssputs_r>
 80061ce:	3001      	adds	r0, #1
 80061d0:	f000 80aa 	beq.w	8006328 <_svfiprintf_r+0x1c8>
 80061d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d6:	445a      	add	r2, fp
 80061d8:	9209      	str	r2, [sp, #36]	; 0x24
 80061da:	f89a 3000 	ldrb.w	r3, [sl]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80a2 	beq.w	8006328 <_svfiprintf_r+0x1c8>
 80061e4:	2300      	movs	r3, #0
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ee:	f10a 0a01 	add.w	sl, sl, #1
 80061f2:	9304      	str	r3, [sp, #16]
 80061f4:	9307      	str	r3, [sp, #28]
 80061f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061fa:	931a      	str	r3, [sp, #104]	; 0x68
 80061fc:	4654      	mov	r4, sl
 80061fe:	2205      	movs	r2, #5
 8006200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006204:	4851      	ldr	r0, [pc, #324]	; (800634c <_svfiprintf_r+0x1ec>)
 8006206:	f7fa f803 	bl	8000210 <memchr>
 800620a:	9a04      	ldr	r2, [sp, #16]
 800620c:	b9d8      	cbnz	r0, 8006246 <_svfiprintf_r+0xe6>
 800620e:	06d0      	lsls	r0, r2, #27
 8006210:	bf44      	itt	mi
 8006212:	2320      	movmi	r3, #32
 8006214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006218:	0711      	lsls	r1, r2, #28
 800621a:	bf44      	itt	mi
 800621c:	232b      	movmi	r3, #43	; 0x2b
 800621e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006222:	f89a 3000 	ldrb.w	r3, [sl]
 8006226:	2b2a      	cmp	r3, #42	; 0x2a
 8006228:	d015      	beq.n	8006256 <_svfiprintf_r+0xf6>
 800622a:	9a07      	ldr	r2, [sp, #28]
 800622c:	4654      	mov	r4, sl
 800622e:	2000      	movs	r0, #0
 8006230:	f04f 0c0a 	mov.w	ip, #10
 8006234:	4621      	mov	r1, r4
 8006236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800623a:	3b30      	subs	r3, #48	; 0x30
 800623c:	2b09      	cmp	r3, #9
 800623e:	d94e      	bls.n	80062de <_svfiprintf_r+0x17e>
 8006240:	b1b0      	cbz	r0, 8006270 <_svfiprintf_r+0x110>
 8006242:	9207      	str	r2, [sp, #28]
 8006244:	e014      	b.n	8006270 <_svfiprintf_r+0x110>
 8006246:	eba0 0308 	sub.w	r3, r0, r8
 800624a:	fa09 f303 	lsl.w	r3, r9, r3
 800624e:	4313      	orrs	r3, r2
 8006250:	9304      	str	r3, [sp, #16]
 8006252:	46a2      	mov	sl, r4
 8006254:	e7d2      	b.n	80061fc <_svfiprintf_r+0x9c>
 8006256:	9b03      	ldr	r3, [sp, #12]
 8006258:	1d19      	adds	r1, r3, #4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	9103      	str	r1, [sp, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	bfbb      	ittet	lt
 8006262:	425b      	neglt	r3, r3
 8006264:	f042 0202 	orrlt.w	r2, r2, #2
 8006268:	9307      	strge	r3, [sp, #28]
 800626a:	9307      	strlt	r3, [sp, #28]
 800626c:	bfb8      	it	lt
 800626e:	9204      	strlt	r2, [sp, #16]
 8006270:	7823      	ldrb	r3, [r4, #0]
 8006272:	2b2e      	cmp	r3, #46	; 0x2e
 8006274:	d10c      	bne.n	8006290 <_svfiprintf_r+0x130>
 8006276:	7863      	ldrb	r3, [r4, #1]
 8006278:	2b2a      	cmp	r3, #42	; 0x2a
 800627a:	d135      	bne.n	80062e8 <_svfiprintf_r+0x188>
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	1d1a      	adds	r2, r3, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	9203      	str	r2, [sp, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	bfb8      	it	lt
 8006288:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800628c:	3402      	adds	r4, #2
 800628e:	9305      	str	r3, [sp, #20]
 8006290:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800635c <_svfiprintf_r+0x1fc>
 8006294:	7821      	ldrb	r1, [r4, #0]
 8006296:	2203      	movs	r2, #3
 8006298:	4650      	mov	r0, sl
 800629a:	f7f9 ffb9 	bl	8000210 <memchr>
 800629e:	b140      	cbz	r0, 80062b2 <_svfiprintf_r+0x152>
 80062a0:	2340      	movs	r3, #64	; 0x40
 80062a2:	eba0 000a 	sub.w	r0, r0, sl
 80062a6:	fa03 f000 	lsl.w	r0, r3, r0
 80062aa:	9b04      	ldr	r3, [sp, #16]
 80062ac:	4303      	orrs	r3, r0
 80062ae:	3401      	adds	r4, #1
 80062b0:	9304      	str	r3, [sp, #16]
 80062b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b6:	4826      	ldr	r0, [pc, #152]	; (8006350 <_svfiprintf_r+0x1f0>)
 80062b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062bc:	2206      	movs	r2, #6
 80062be:	f7f9 ffa7 	bl	8000210 <memchr>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d038      	beq.n	8006338 <_svfiprintf_r+0x1d8>
 80062c6:	4b23      	ldr	r3, [pc, #140]	; (8006354 <_svfiprintf_r+0x1f4>)
 80062c8:	bb1b      	cbnz	r3, 8006312 <_svfiprintf_r+0x1b2>
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	3307      	adds	r3, #7
 80062ce:	f023 0307 	bic.w	r3, r3, #7
 80062d2:	3308      	adds	r3, #8
 80062d4:	9303      	str	r3, [sp, #12]
 80062d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d8:	4433      	add	r3, r6
 80062da:	9309      	str	r3, [sp, #36]	; 0x24
 80062dc:	e767      	b.n	80061ae <_svfiprintf_r+0x4e>
 80062de:	fb0c 3202 	mla	r2, ip, r2, r3
 80062e2:	460c      	mov	r4, r1
 80062e4:	2001      	movs	r0, #1
 80062e6:	e7a5      	b.n	8006234 <_svfiprintf_r+0xd4>
 80062e8:	2300      	movs	r3, #0
 80062ea:	3401      	adds	r4, #1
 80062ec:	9305      	str	r3, [sp, #20]
 80062ee:	4619      	mov	r1, r3
 80062f0:	f04f 0c0a 	mov.w	ip, #10
 80062f4:	4620      	mov	r0, r4
 80062f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062fa:	3a30      	subs	r2, #48	; 0x30
 80062fc:	2a09      	cmp	r2, #9
 80062fe:	d903      	bls.n	8006308 <_svfiprintf_r+0x1a8>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0c5      	beq.n	8006290 <_svfiprintf_r+0x130>
 8006304:	9105      	str	r1, [sp, #20]
 8006306:	e7c3      	b.n	8006290 <_svfiprintf_r+0x130>
 8006308:	fb0c 2101 	mla	r1, ip, r1, r2
 800630c:	4604      	mov	r4, r0
 800630e:	2301      	movs	r3, #1
 8006310:	e7f0      	b.n	80062f4 <_svfiprintf_r+0x194>
 8006312:	ab03      	add	r3, sp, #12
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	462a      	mov	r2, r5
 8006318:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <_svfiprintf_r+0x1f8>)
 800631a:	a904      	add	r1, sp, #16
 800631c:	4638      	mov	r0, r7
 800631e:	f3af 8000 	nop.w
 8006322:	1c42      	adds	r2, r0, #1
 8006324:	4606      	mov	r6, r0
 8006326:	d1d6      	bne.n	80062d6 <_svfiprintf_r+0x176>
 8006328:	89ab      	ldrh	r3, [r5, #12]
 800632a:	065b      	lsls	r3, r3, #25
 800632c:	f53f af2c 	bmi.w	8006188 <_svfiprintf_r+0x28>
 8006330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006332:	b01d      	add	sp, #116	; 0x74
 8006334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006338:	ab03      	add	r3, sp, #12
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	462a      	mov	r2, r5
 800633e:	4b06      	ldr	r3, [pc, #24]	; (8006358 <_svfiprintf_r+0x1f8>)
 8006340:	a904      	add	r1, sp, #16
 8006342:	4638      	mov	r0, r7
 8006344:	f000 f87a 	bl	800643c <_printf_i>
 8006348:	e7eb      	b.n	8006322 <_svfiprintf_r+0x1c2>
 800634a:	bf00      	nop
 800634c:	08008458 	.word	0x08008458
 8006350:	08008462 	.word	0x08008462
 8006354:	00000000 	.word	0x00000000
 8006358:	080060a9 	.word	0x080060a9
 800635c:	0800845e 	.word	0x0800845e

08006360 <_printf_common>:
 8006360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006364:	4616      	mov	r6, r2
 8006366:	4699      	mov	r9, r3
 8006368:	688a      	ldr	r2, [r1, #8]
 800636a:	690b      	ldr	r3, [r1, #16]
 800636c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006370:	4293      	cmp	r3, r2
 8006372:	bfb8      	it	lt
 8006374:	4613      	movlt	r3, r2
 8006376:	6033      	str	r3, [r6, #0]
 8006378:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800637c:	4607      	mov	r7, r0
 800637e:	460c      	mov	r4, r1
 8006380:	b10a      	cbz	r2, 8006386 <_printf_common+0x26>
 8006382:	3301      	adds	r3, #1
 8006384:	6033      	str	r3, [r6, #0]
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	0699      	lsls	r1, r3, #26
 800638a:	bf42      	ittt	mi
 800638c:	6833      	ldrmi	r3, [r6, #0]
 800638e:	3302      	addmi	r3, #2
 8006390:	6033      	strmi	r3, [r6, #0]
 8006392:	6825      	ldr	r5, [r4, #0]
 8006394:	f015 0506 	ands.w	r5, r5, #6
 8006398:	d106      	bne.n	80063a8 <_printf_common+0x48>
 800639a:	f104 0a19 	add.w	sl, r4, #25
 800639e:	68e3      	ldr	r3, [r4, #12]
 80063a0:	6832      	ldr	r2, [r6, #0]
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	42ab      	cmp	r3, r5
 80063a6:	dc26      	bgt.n	80063f6 <_printf_common+0x96>
 80063a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063ac:	1e13      	subs	r3, r2, #0
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	bf18      	it	ne
 80063b2:	2301      	movne	r3, #1
 80063b4:	0692      	lsls	r2, r2, #26
 80063b6:	d42b      	bmi.n	8006410 <_printf_common+0xb0>
 80063b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063bc:	4649      	mov	r1, r9
 80063be:	4638      	mov	r0, r7
 80063c0:	47c0      	blx	r8
 80063c2:	3001      	adds	r0, #1
 80063c4:	d01e      	beq.n	8006404 <_printf_common+0xa4>
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	68e5      	ldr	r5, [r4, #12]
 80063ca:	6832      	ldr	r2, [r6, #0]
 80063cc:	f003 0306 	and.w	r3, r3, #6
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	bf08      	it	eq
 80063d4:	1aad      	subeq	r5, r5, r2
 80063d6:	68a3      	ldr	r3, [r4, #8]
 80063d8:	6922      	ldr	r2, [r4, #16]
 80063da:	bf0c      	ite	eq
 80063dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063e0:	2500      	movne	r5, #0
 80063e2:	4293      	cmp	r3, r2
 80063e4:	bfc4      	itt	gt
 80063e6:	1a9b      	subgt	r3, r3, r2
 80063e8:	18ed      	addgt	r5, r5, r3
 80063ea:	2600      	movs	r6, #0
 80063ec:	341a      	adds	r4, #26
 80063ee:	42b5      	cmp	r5, r6
 80063f0:	d11a      	bne.n	8006428 <_printf_common+0xc8>
 80063f2:	2000      	movs	r0, #0
 80063f4:	e008      	b.n	8006408 <_printf_common+0xa8>
 80063f6:	2301      	movs	r3, #1
 80063f8:	4652      	mov	r2, sl
 80063fa:	4649      	mov	r1, r9
 80063fc:	4638      	mov	r0, r7
 80063fe:	47c0      	blx	r8
 8006400:	3001      	adds	r0, #1
 8006402:	d103      	bne.n	800640c <_printf_common+0xac>
 8006404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640c:	3501      	adds	r5, #1
 800640e:	e7c6      	b.n	800639e <_printf_common+0x3e>
 8006410:	18e1      	adds	r1, r4, r3
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	2030      	movs	r0, #48	; 0x30
 8006416:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800641a:	4422      	add	r2, r4
 800641c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006420:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006424:	3302      	adds	r3, #2
 8006426:	e7c7      	b.n	80063b8 <_printf_common+0x58>
 8006428:	2301      	movs	r3, #1
 800642a:	4622      	mov	r2, r4
 800642c:	4649      	mov	r1, r9
 800642e:	4638      	mov	r0, r7
 8006430:	47c0      	blx	r8
 8006432:	3001      	adds	r0, #1
 8006434:	d0e6      	beq.n	8006404 <_printf_common+0xa4>
 8006436:	3601      	adds	r6, #1
 8006438:	e7d9      	b.n	80063ee <_printf_common+0x8e>
	...

0800643c <_printf_i>:
 800643c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006440:	7e0f      	ldrb	r7, [r1, #24]
 8006442:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006444:	2f78      	cmp	r7, #120	; 0x78
 8006446:	4691      	mov	r9, r2
 8006448:	4680      	mov	r8, r0
 800644a:	460c      	mov	r4, r1
 800644c:	469a      	mov	sl, r3
 800644e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006452:	d807      	bhi.n	8006464 <_printf_i+0x28>
 8006454:	2f62      	cmp	r7, #98	; 0x62
 8006456:	d80a      	bhi.n	800646e <_printf_i+0x32>
 8006458:	2f00      	cmp	r7, #0
 800645a:	f000 80d8 	beq.w	800660e <_printf_i+0x1d2>
 800645e:	2f58      	cmp	r7, #88	; 0x58
 8006460:	f000 80a3 	beq.w	80065aa <_printf_i+0x16e>
 8006464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800646c:	e03a      	b.n	80064e4 <_printf_i+0xa8>
 800646e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006472:	2b15      	cmp	r3, #21
 8006474:	d8f6      	bhi.n	8006464 <_printf_i+0x28>
 8006476:	a101      	add	r1, pc, #4	; (adr r1, 800647c <_printf_i+0x40>)
 8006478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800647c:	080064d5 	.word	0x080064d5
 8006480:	080064e9 	.word	0x080064e9
 8006484:	08006465 	.word	0x08006465
 8006488:	08006465 	.word	0x08006465
 800648c:	08006465 	.word	0x08006465
 8006490:	08006465 	.word	0x08006465
 8006494:	080064e9 	.word	0x080064e9
 8006498:	08006465 	.word	0x08006465
 800649c:	08006465 	.word	0x08006465
 80064a0:	08006465 	.word	0x08006465
 80064a4:	08006465 	.word	0x08006465
 80064a8:	080065f5 	.word	0x080065f5
 80064ac:	08006519 	.word	0x08006519
 80064b0:	080065d7 	.word	0x080065d7
 80064b4:	08006465 	.word	0x08006465
 80064b8:	08006465 	.word	0x08006465
 80064bc:	08006617 	.word	0x08006617
 80064c0:	08006465 	.word	0x08006465
 80064c4:	08006519 	.word	0x08006519
 80064c8:	08006465 	.word	0x08006465
 80064cc:	08006465 	.word	0x08006465
 80064d0:	080065df 	.word	0x080065df
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	1d1a      	adds	r2, r3, #4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	602a      	str	r2, [r5, #0]
 80064dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064e4:	2301      	movs	r3, #1
 80064e6:	e0a3      	b.n	8006630 <_printf_i+0x1f4>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	6829      	ldr	r1, [r5, #0]
 80064ec:	0606      	lsls	r6, r0, #24
 80064ee:	f101 0304 	add.w	r3, r1, #4
 80064f2:	d50a      	bpl.n	800650a <_printf_i+0xce>
 80064f4:	680e      	ldr	r6, [r1, #0]
 80064f6:	602b      	str	r3, [r5, #0]
 80064f8:	2e00      	cmp	r6, #0
 80064fa:	da03      	bge.n	8006504 <_printf_i+0xc8>
 80064fc:	232d      	movs	r3, #45	; 0x2d
 80064fe:	4276      	negs	r6, r6
 8006500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006504:	485e      	ldr	r0, [pc, #376]	; (8006680 <_printf_i+0x244>)
 8006506:	230a      	movs	r3, #10
 8006508:	e019      	b.n	800653e <_printf_i+0x102>
 800650a:	680e      	ldr	r6, [r1, #0]
 800650c:	602b      	str	r3, [r5, #0]
 800650e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006512:	bf18      	it	ne
 8006514:	b236      	sxthne	r6, r6
 8006516:	e7ef      	b.n	80064f8 <_printf_i+0xbc>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	6820      	ldr	r0, [r4, #0]
 800651c:	1d19      	adds	r1, r3, #4
 800651e:	6029      	str	r1, [r5, #0]
 8006520:	0601      	lsls	r1, r0, #24
 8006522:	d501      	bpl.n	8006528 <_printf_i+0xec>
 8006524:	681e      	ldr	r6, [r3, #0]
 8006526:	e002      	b.n	800652e <_printf_i+0xf2>
 8006528:	0646      	lsls	r6, r0, #25
 800652a:	d5fb      	bpl.n	8006524 <_printf_i+0xe8>
 800652c:	881e      	ldrh	r6, [r3, #0]
 800652e:	4854      	ldr	r0, [pc, #336]	; (8006680 <_printf_i+0x244>)
 8006530:	2f6f      	cmp	r7, #111	; 0x6f
 8006532:	bf0c      	ite	eq
 8006534:	2308      	moveq	r3, #8
 8006536:	230a      	movne	r3, #10
 8006538:	2100      	movs	r1, #0
 800653a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800653e:	6865      	ldr	r5, [r4, #4]
 8006540:	60a5      	str	r5, [r4, #8]
 8006542:	2d00      	cmp	r5, #0
 8006544:	bfa2      	ittt	ge
 8006546:	6821      	ldrge	r1, [r4, #0]
 8006548:	f021 0104 	bicge.w	r1, r1, #4
 800654c:	6021      	strge	r1, [r4, #0]
 800654e:	b90e      	cbnz	r6, 8006554 <_printf_i+0x118>
 8006550:	2d00      	cmp	r5, #0
 8006552:	d04d      	beq.n	80065f0 <_printf_i+0x1b4>
 8006554:	4615      	mov	r5, r2
 8006556:	fbb6 f1f3 	udiv	r1, r6, r3
 800655a:	fb03 6711 	mls	r7, r3, r1, r6
 800655e:	5dc7      	ldrb	r7, [r0, r7]
 8006560:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006564:	4637      	mov	r7, r6
 8006566:	42bb      	cmp	r3, r7
 8006568:	460e      	mov	r6, r1
 800656a:	d9f4      	bls.n	8006556 <_printf_i+0x11a>
 800656c:	2b08      	cmp	r3, #8
 800656e:	d10b      	bne.n	8006588 <_printf_i+0x14c>
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	07de      	lsls	r6, r3, #31
 8006574:	d508      	bpl.n	8006588 <_printf_i+0x14c>
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	6861      	ldr	r1, [r4, #4]
 800657a:	4299      	cmp	r1, r3
 800657c:	bfde      	ittt	le
 800657e:	2330      	movle	r3, #48	; 0x30
 8006580:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006584:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006588:	1b52      	subs	r2, r2, r5
 800658a:	6122      	str	r2, [r4, #16]
 800658c:	f8cd a000 	str.w	sl, [sp]
 8006590:	464b      	mov	r3, r9
 8006592:	aa03      	add	r2, sp, #12
 8006594:	4621      	mov	r1, r4
 8006596:	4640      	mov	r0, r8
 8006598:	f7ff fee2 	bl	8006360 <_printf_common>
 800659c:	3001      	adds	r0, #1
 800659e:	d14c      	bne.n	800663a <_printf_i+0x1fe>
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065a4:	b004      	add	sp, #16
 80065a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065aa:	4835      	ldr	r0, [pc, #212]	; (8006680 <_printf_i+0x244>)
 80065ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065b0:	6829      	ldr	r1, [r5, #0]
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065b8:	6029      	str	r1, [r5, #0]
 80065ba:	061d      	lsls	r5, r3, #24
 80065bc:	d514      	bpl.n	80065e8 <_printf_i+0x1ac>
 80065be:	07df      	lsls	r7, r3, #31
 80065c0:	bf44      	itt	mi
 80065c2:	f043 0320 	orrmi.w	r3, r3, #32
 80065c6:	6023      	strmi	r3, [r4, #0]
 80065c8:	b91e      	cbnz	r6, 80065d2 <_printf_i+0x196>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	f023 0320 	bic.w	r3, r3, #32
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	2310      	movs	r3, #16
 80065d4:	e7b0      	b.n	8006538 <_printf_i+0xfc>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	f043 0320 	orr.w	r3, r3, #32
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	2378      	movs	r3, #120	; 0x78
 80065e0:	4828      	ldr	r0, [pc, #160]	; (8006684 <_printf_i+0x248>)
 80065e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065e6:	e7e3      	b.n	80065b0 <_printf_i+0x174>
 80065e8:	0659      	lsls	r1, r3, #25
 80065ea:	bf48      	it	mi
 80065ec:	b2b6      	uxthmi	r6, r6
 80065ee:	e7e6      	b.n	80065be <_printf_i+0x182>
 80065f0:	4615      	mov	r5, r2
 80065f2:	e7bb      	b.n	800656c <_printf_i+0x130>
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	6826      	ldr	r6, [r4, #0]
 80065f8:	6961      	ldr	r1, [r4, #20]
 80065fa:	1d18      	adds	r0, r3, #4
 80065fc:	6028      	str	r0, [r5, #0]
 80065fe:	0635      	lsls	r5, r6, #24
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	d501      	bpl.n	8006608 <_printf_i+0x1cc>
 8006604:	6019      	str	r1, [r3, #0]
 8006606:	e002      	b.n	800660e <_printf_i+0x1d2>
 8006608:	0670      	lsls	r0, r6, #25
 800660a:	d5fb      	bpl.n	8006604 <_printf_i+0x1c8>
 800660c:	8019      	strh	r1, [r3, #0]
 800660e:	2300      	movs	r3, #0
 8006610:	6123      	str	r3, [r4, #16]
 8006612:	4615      	mov	r5, r2
 8006614:	e7ba      	b.n	800658c <_printf_i+0x150>
 8006616:	682b      	ldr	r3, [r5, #0]
 8006618:	1d1a      	adds	r2, r3, #4
 800661a:	602a      	str	r2, [r5, #0]
 800661c:	681d      	ldr	r5, [r3, #0]
 800661e:	6862      	ldr	r2, [r4, #4]
 8006620:	2100      	movs	r1, #0
 8006622:	4628      	mov	r0, r5
 8006624:	f7f9 fdf4 	bl	8000210 <memchr>
 8006628:	b108      	cbz	r0, 800662e <_printf_i+0x1f2>
 800662a:	1b40      	subs	r0, r0, r5
 800662c:	6060      	str	r0, [r4, #4]
 800662e:	6863      	ldr	r3, [r4, #4]
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	2300      	movs	r3, #0
 8006634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006638:	e7a8      	b.n	800658c <_printf_i+0x150>
 800663a:	6923      	ldr	r3, [r4, #16]
 800663c:	462a      	mov	r2, r5
 800663e:	4649      	mov	r1, r9
 8006640:	4640      	mov	r0, r8
 8006642:	47d0      	blx	sl
 8006644:	3001      	adds	r0, #1
 8006646:	d0ab      	beq.n	80065a0 <_printf_i+0x164>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	079b      	lsls	r3, r3, #30
 800664c:	d413      	bmi.n	8006676 <_printf_i+0x23a>
 800664e:	68e0      	ldr	r0, [r4, #12]
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	4298      	cmp	r0, r3
 8006654:	bfb8      	it	lt
 8006656:	4618      	movlt	r0, r3
 8006658:	e7a4      	b.n	80065a4 <_printf_i+0x168>
 800665a:	2301      	movs	r3, #1
 800665c:	4632      	mov	r2, r6
 800665e:	4649      	mov	r1, r9
 8006660:	4640      	mov	r0, r8
 8006662:	47d0      	blx	sl
 8006664:	3001      	adds	r0, #1
 8006666:	d09b      	beq.n	80065a0 <_printf_i+0x164>
 8006668:	3501      	adds	r5, #1
 800666a:	68e3      	ldr	r3, [r4, #12]
 800666c:	9903      	ldr	r1, [sp, #12]
 800666e:	1a5b      	subs	r3, r3, r1
 8006670:	42ab      	cmp	r3, r5
 8006672:	dcf2      	bgt.n	800665a <_printf_i+0x21e>
 8006674:	e7eb      	b.n	800664e <_printf_i+0x212>
 8006676:	2500      	movs	r5, #0
 8006678:	f104 0619 	add.w	r6, r4, #25
 800667c:	e7f5      	b.n	800666a <_printf_i+0x22e>
 800667e:	bf00      	nop
 8006680:	08008469 	.word	0x08008469
 8006684:	0800847a 	.word	0x0800847a

08006688 <memmove>:
 8006688:	4288      	cmp	r0, r1
 800668a:	b510      	push	{r4, lr}
 800668c:	eb01 0402 	add.w	r4, r1, r2
 8006690:	d902      	bls.n	8006698 <memmove+0x10>
 8006692:	4284      	cmp	r4, r0
 8006694:	4623      	mov	r3, r4
 8006696:	d807      	bhi.n	80066a8 <memmove+0x20>
 8006698:	1e43      	subs	r3, r0, #1
 800669a:	42a1      	cmp	r1, r4
 800669c:	d008      	beq.n	80066b0 <memmove+0x28>
 800669e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066a6:	e7f8      	b.n	800669a <memmove+0x12>
 80066a8:	4402      	add	r2, r0
 80066aa:	4601      	mov	r1, r0
 80066ac:	428a      	cmp	r2, r1
 80066ae:	d100      	bne.n	80066b2 <memmove+0x2a>
 80066b0:	bd10      	pop	{r4, pc}
 80066b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ba:	e7f7      	b.n	80066ac <memmove+0x24>

080066bc <_free_r>:
 80066bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066be:	2900      	cmp	r1, #0
 80066c0:	d044      	beq.n	800674c <_free_r+0x90>
 80066c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c6:	9001      	str	r0, [sp, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f1a1 0404 	sub.w	r4, r1, #4
 80066ce:	bfb8      	it	lt
 80066d0:	18e4      	addlt	r4, r4, r3
 80066d2:	f000 f913 	bl	80068fc <__malloc_lock>
 80066d6:	4a1e      	ldr	r2, [pc, #120]	; (8006750 <_free_r+0x94>)
 80066d8:	9801      	ldr	r0, [sp, #4]
 80066da:	6813      	ldr	r3, [r2, #0]
 80066dc:	b933      	cbnz	r3, 80066ec <_free_r+0x30>
 80066de:	6063      	str	r3, [r4, #4]
 80066e0:	6014      	str	r4, [r2, #0]
 80066e2:	b003      	add	sp, #12
 80066e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066e8:	f000 b90e 	b.w	8006908 <__malloc_unlock>
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	d908      	bls.n	8006702 <_free_r+0x46>
 80066f0:	6825      	ldr	r5, [r4, #0]
 80066f2:	1961      	adds	r1, r4, r5
 80066f4:	428b      	cmp	r3, r1
 80066f6:	bf01      	itttt	eq
 80066f8:	6819      	ldreq	r1, [r3, #0]
 80066fa:	685b      	ldreq	r3, [r3, #4]
 80066fc:	1949      	addeq	r1, r1, r5
 80066fe:	6021      	streq	r1, [r4, #0]
 8006700:	e7ed      	b.n	80066de <_free_r+0x22>
 8006702:	461a      	mov	r2, r3
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	b10b      	cbz	r3, 800670c <_free_r+0x50>
 8006708:	42a3      	cmp	r3, r4
 800670a:	d9fa      	bls.n	8006702 <_free_r+0x46>
 800670c:	6811      	ldr	r1, [r2, #0]
 800670e:	1855      	adds	r5, r2, r1
 8006710:	42a5      	cmp	r5, r4
 8006712:	d10b      	bne.n	800672c <_free_r+0x70>
 8006714:	6824      	ldr	r4, [r4, #0]
 8006716:	4421      	add	r1, r4
 8006718:	1854      	adds	r4, r2, r1
 800671a:	42a3      	cmp	r3, r4
 800671c:	6011      	str	r1, [r2, #0]
 800671e:	d1e0      	bne.n	80066e2 <_free_r+0x26>
 8006720:	681c      	ldr	r4, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	6053      	str	r3, [r2, #4]
 8006726:	4421      	add	r1, r4
 8006728:	6011      	str	r1, [r2, #0]
 800672a:	e7da      	b.n	80066e2 <_free_r+0x26>
 800672c:	d902      	bls.n	8006734 <_free_r+0x78>
 800672e:	230c      	movs	r3, #12
 8006730:	6003      	str	r3, [r0, #0]
 8006732:	e7d6      	b.n	80066e2 <_free_r+0x26>
 8006734:	6825      	ldr	r5, [r4, #0]
 8006736:	1961      	adds	r1, r4, r5
 8006738:	428b      	cmp	r3, r1
 800673a:	bf04      	itt	eq
 800673c:	6819      	ldreq	r1, [r3, #0]
 800673e:	685b      	ldreq	r3, [r3, #4]
 8006740:	6063      	str	r3, [r4, #4]
 8006742:	bf04      	itt	eq
 8006744:	1949      	addeq	r1, r1, r5
 8006746:	6021      	streq	r1, [r4, #0]
 8006748:	6054      	str	r4, [r2, #4]
 800674a:	e7ca      	b.n	80066e2 <_free_r+0x26>
 800674c:	b003      	add	sp, #12
 800674e:	bd30      	pop	{r4, r5, pc}
 8006750:	20000628 	.word	0x20000628

08006754 <sbrk_aligned>:
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	4e0e      	ldr	r6, [pc, #56]	; (8006790 <sbrk_aligned+0x3c>)
 8006758:	460c      	mov	r4, r1
 800675a:	6831      	ldr	r1, [r6, #0]
 800675c:	4605      	mov	r5, r0
 800675e:	b911      	cbnz	r1, 8006766 <sbrk_aligned+0x12>
 8006760:	f000 f8bc 	bl	80068dc <_sbrk_r>
 8006764:	6030      	str	r0, [r6, #0]
 8006766:	4621      	mov	r1, r4
 8006768:	4628      	mov	r0, r5
 800676a:	f000 f8b7 	bl	80068dc <_sbrk_r>
 800676e:	1c43      	adds	r3, r0, #1
 8006770:	d00a      	beq.n	8006788 <sbrk_aligned+0x34>
 8006772:	1cc4      	adds	r4, r0, #3
 8006774:	f024 0403 	bic.w	r4, r4, #3
 8006778:	42a0      	cmp	r0, r4
 800677a:	d007      	beq.n	800678c <sbrk_aligned+0x38>
 800677c:	1a21      	subs	r1, r4, r0
 800677e:	4628      	mov	r0, r5
 8006780:	f000 f8ac 	bl	80068dc <_sbrk_r>
 8006784:	3001      	adds	r0, #1
 8006786:	d101      	bne.n	800678c <sbrk_aligned+0x38>
 8006788:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800678c:	4620      	mov	r0, r4
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	2000062c 	.word	0x2000062c

08006794 <_malloc_r>:
 8006794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006798:	1ccd      	adds	r5, r1, #3
 800679a:	f025 0503 	bic.w	r5, r5, #3
 800679e:	3508      	adds	r5, #8
 80067a0:	2d0c      	cmp	r5, #12
 80067a2:	bf38      	it	cc
 80067a4:	250c      	movcc	r5, #12
 80067a6:	2d00      	cmp	r5, #0
 80067a8:	4607      	mov	r7, r0
 80067aa:	db01      	blt.n	80067b0 <_malloc_r+0x1c>
 80067ac:	42a9      	cmp	r1, r5
 80067ae:	d905      	bls.n	80067bc <_malloc_r+0x28>
 80067b0:	230c      	movs	r3, #12
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	2600      	movs	r6, #0
 80067b6:	4630      	mov	r0, r6
 80067b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067bc:	4e2e      	ldr	r6, [pc, #184]	; (8006878 <_malloc_r+0xe4>)
 80067be:	f000 f89d 	bl	80068fc <__malloc_lock>
 80067c2:	6833      	ldr	r3, [r6, #0]
 80067c4:	461c      	mov	r4, r3
 80067c6:	bb34      	cbnz	r4, 8006816 <_malloc_r+0x82>
 80067c8:	4629      	mov	r1, r5
 80067ca:	4638      	mov	r0, r7
 80067cc:	f7ff ffc2 	bl	8006754 <sbrk_aligned>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	4604      	mov	r4, r0
 80067d4:	d14d      	bne.n	8006872 <_malloc_r+0xde>
 80067d6:	6834      	ldr	r4, [r6, #0]
 80067d8:	4626      	mov	r6, r4
 80067da:	2e00      	cmp	r6, #0
 80067dc:	d140      	bne.n	8006860 <_malloc_r+0xcc>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	4631      	mov	r1, r6
 80067e2:	4638      	mov	r0, r7
 80067e4:	eb04 0803 	add.w	r8, r4, r3
 80067e8:	f000 f878 	bl	80068dc <_sbrk_r>
 80067ec:	4580      	cmp	r8, r0
 80067ee:	d13a      	bne.n	8006866 <_malloc_r+0xd2>
 80067f0:	6821      	ldr	r1, [r4, #0]
 80067f2:	3503      	adds	r5, #3
 80067f4:	1a6d      	subs	r5, r5, r1
 80067f6:	f025 0503 	bic.w	r5, r5, #3
 80067fa:	3508      	adds	r5, #8
 80067fc:	2d0c      	cmp	r5, #12
 80067fe:	bf38      	it	cc
 8006800:	250c      	movcc	r5, #12
 8006802:	4629      	mov	r1, r5
 8006804:	4638      	mov	r0, r7
 8006806:	f7ff ffa5 	bl	8006754 <sbrk_aligned>
 800680a:	3001      	adds	r0, #1
 800680c:	d02b      	beq.n	8006866 <_malloc_r+0xd2>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	442b      	add	r3, r5
 8006812:	6023      	str	r3, [r4, #0]
 8006814:	e00e      	b.n	8006834 <_malloc_r+0xa0>
 8006816:	6822      	ldr	r2, [r4, #0]
 8006818:	1b52      	subs	r2, r2, r5
 800681a:	d41e      	bmi.n	800685a <_malloc_r+0xc6>
 800681c:	2a0b      	cmp	r2, #11
 800681e:	d916      	bls.n	800684e <_malloc_r+0xba>
 8006820:	1961      	adds	r1, r4, r5
 8006822:	42a3      	cmp	r3, r4
 8006824:	6025      	str	r5, [r4, #0]
 8006826:	bf18      	it	ne
 8006828:	6059      	strne	r1, [r3, #4]
 800682a:	6863      	ldr	r3, [r4, #4]
 800682c:	bf08      	it	eq
 800682e:	6031      	streq	r1, [r6, #0]
 8006830:	5162      	str	r2, [r4, r5]
 8006832:	604b      	str	r3, [r1, #4]
 8006834:	4638      	mov	r0, r7
 8006836:	f104 060b 	add.w	r6, r4, #11
 800683a:	f000 f865 	bl	8006908 <__malloc_unlock>
 800683e:	f026 0607 	bic.w	r6, r6, #7
 8006842:	1d23      	adds	r3, r4, #4
 8006844:	1af2      	subs	r2, r6, r3
 8006846:	d0b6      	beq.n	80067b6 <_malloc_r+0x22>
 8006848:	1b9b      	subs	r3, r3, r6
 800684a:	50a3      	str	r3, [r4, r2]
 800684c:	e7b3      	b.n	80067b6 <_malloc_r+0x22>
 800684e:	6862      	ldr	r2, [r4, #4]
 8006850:	42a3      	cmp	r3, r4
 8006852:	bf0c      	ite	eq
 8006854:	6032      	streq	r2, [r6, #0]
 8006856:	605a      	strne	r2, [r3, #4]
 8006858:	e7ec      	b.n	8006834 <_malloc_r+0xa0>
 800685a:	4623      	mov	r3, r4
 800685c:	6864      	ldr	r4, [r4, #4]
 800685e:	e7b2      	b.n	80067c6 <_malloc_r+0x32>
 8006860:	4634      	mov	r4, r6
 8006862:	6876      	ldr	r6, [r6, #4]
 8006864:	e7b9      	b.n	80067da <_malloc_r+0x46>
 8006866:	230c      	movs	r3, #12
 8006868:	603b      	str	r3, [r7, #0]
 800686a:	4638      	mov	r0, r7
 800686c:	f000 f84c 	bl	8006908 <__malloc_unlock>
 8006870:	e7a1      	b.n	80067b6 <_malloc_r+0x22>
 8006872:	6025      	str	r5, [r4, #0]
 8006874:	e7de      	b.n	8006834 <_malloc_r+0xa0>
 8006876:	bf00      	nop
 8006878:	20000628 	.word	0x20000628

0800687c <_realloc_r>:
 800687c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006880:	4680      	mov	r8, r0
 8006882:	4614      	mov	r4, r2
 8006884:	460e      	mov	r6, r1
 8006886:	b921      	cbnz	r1, 8006892 <_realloc_r+0x16>
 8006888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800688c:	4611      	mov	r1, r2
 800688e:	f7ff bf81 	b.w	8006794 <_malloc_r>
 8006892:	b92a      	cbnz	r2, 80068a0 <_realloc_r+0x24>
 8006894:	f7ff ff12 	bl	80066bc <_free_r>
 8006898:	4625      	mov	r5, r4
 800689a:	4628      	mov	r0, r5
 800689c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a0:	f000 f838 	bl	8006914 <_malloc_usable_size_r>
 80068a4:	4284      	cmp	r4, r0
 80068a6:	4607      	mov	r7, r0
 80068a8:	d802      	bhi.n	80068b0 <_realloc_r+0x34>
 80068aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068ae:	d812      	bhi.n	80068d6 <_realloc_r+0x5a>
 80068b0:	4621      	mov	r1, r4
 80068b2:	4640      	mov	r0, r8
 80068b4:	f7ff ff6e 	bl	8006794 <_malloc_r>
 80068b8:	4605      	mov	r5, r0
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d0ed      	beq.n	800689a <_realloc_r+0x1e>
 80068be:	42bc      	cmp	r4, r7
 80068c0:	4622      	mov	r2, r4
 80068c2:	4631      	mov	r1, r6
 80068c4:	bf28      	it	cs
 80068c6:	463a      	movcs	r2, r7
 80068c8:	f7ff fbb8 	bl	800603c <memcpy>
 80068cc:	4631      	mov	r1, r6
 80068ce:	4640      	mov	r0, r8
 80068d0:	f7ff fef4 	bl	80066bc <_free_r>
 80068d4:	e7e1      	b.n	800689a <_realloc_r+0x1e>
 80068d6:	4635      	mov	r5, r6
 80068d8:	e7df      	b.n	800689a <_realloc_r+0x1e>
	...

080068dc <_sbrk_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4d06      	ldr	r5, [pc, #24]	; (80068f8 <_sbrk_r+0x1c>)
 80068e0:	2300      	movs	r3, #0
 80068e2:	4604      	mov	r4, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	f7fa fc4a 	bl	8001180 <_sbrk>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_sbrk_r+0x1a>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_sbrk_r+0x1a>
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	20000630 	.word	0x20000630

080068fc <__malloc_lock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__malloc_lock+0x8>)
 80068fe:	f000 b811 	b.w	8006924 <__retarget_lock_acquire_recursive>
 8006902:	bf00      	nop
 8006904:	20000634 	.word	0x20000634

08006908 <__malloc_unlock>:
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <__malloc_unlock+0x8>)
 800690a:	f000 b80c 	b.w	8006926 <__retarget_lock_release_recursive>
 800690e:	bf00      	nop
 8006910:	20000634 	.word	0x20000634

08006914 <_malloc_usable_size_r>:
 8006914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006918:	1f18      	subs	r0, r3, #4
 800691a:	2b00      	cmp	r3, #0
 800691c:	bfbc      	itt	lt
 800691e:	580b      	ldrlt	r3, [r1, r0]
 8006920:	18c0      	addlt	r0, r0, r3
 8006922:	4770      	bx	lr

08006924 <__retarget_lock_acquire_recursive>:
 8006924:	4770      	bx	lr

08006926 <__retarget_lock_release_recursive>:
 8006926:	4770      	bx	lr

08006928 <_init>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	bf00      	nop
 800692c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692e:	bc08      	pop	{r3}
 8006930:	469e      	mov	lr, r3
 8006932:	4770      	bx	lr

08006934 <_fini>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	bf00      	nop
 8006938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693a:	bc08      	pop	{r3}
 800693c:	469e      	mov	lr, r3
 800693e:	4770      	bx	lr
