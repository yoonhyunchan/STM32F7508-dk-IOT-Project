
test5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006878  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bb8  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008600  08008600  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008608  08008608  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008608  08008608  00018608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  2000007c  0800868c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  0800868c  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b0b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de1  00000000  00000000  00035bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00038998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00039a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281ff  00000000  00000000  0003a960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148e7  00000000  00000000  00062b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7129  00000000  00000000  00077446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e56f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004854  00000000  00000000  0016e5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006a30 	.word	0x08006a30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006a30 	.word	0x08006a30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b0be      	sub	sp, #248	; 0xf8
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 fe8d 	bl	80022d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f8e1 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fadd 	bl	8000b80 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80005c6:	f000 f96b 	bl	80008a0 <MX_DMA2D_Init>
  MX_QUADSPI_Init();
 80005ca:	f000 fa4d 	bl	8000a68 <MX_QUADSPI_Init>
  MX_USART6_UART_Init();
 80005ce:	f000 faa7 	bl	8000b20 <MX_USART6_UART_Init>
  MX_CRC_Init();
 80005d2:	f000 f943 	bl	800085c <MX_CRC_Init>
  MX_LTDC_Init();
 80005d6:	f000 f995 	bl	8000904 <MX_LTDC_Init>
  MX_UART4_Init();
 80005da:	f000 fa71 	bl	8000ac0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  product p1 = {"product1", " 10000  ", " 1", "10000"};
 80005de:	4b61      	ldr	r3, [pc, #388]	; (8000764 <main+0x1b0>)
 80005e0:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 80005e4:	461d      	mov	r5, r3
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  product p2 = {"product2", " 20000  ", " 2", "40000"};
 80005f2:	4b5d      	ldr	r3, [pc, #372]	; (8000768 <main+0x1b4>)
 80005f4:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 80005f8:	461d      	mov	r5, r3
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  product p3 = {"product3", " 30000  ", " 3", "90000"};
 8000606:	4b59      	ldr	r3, [pc, #356]	; (800076c <main+0x1b8>)
 8000608:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  product p4 = {"product4", " 40000  ", " 4", "160000"};
 800061a:	4b55      	ldr	r3, [pc, #340]	; (8000770 <main+0x1bc>)
 800061c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   // 변수 값을 문자열로 변환
   char buffer1[30];
   sprintf(buffer1, " %s|%s|%s|%s", p1.name, p1.price, p1.quantity, p1.total_price);
 800062e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000632:	f103 0109 	add.w	r1, r3, #9
 8000636:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800063a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800063e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000642:	3315      	adds	r3, #21
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800064a:	3312      	adds	r3, #18
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	460b      	mov	r3, r1
 8000650:	4948      	ldr	r1, [pc, #288]	; (8000774 <main+0x1c0>)
 8000652:	f005 fd7f 	bl	8006154 <siprintf>
   char buffer2[30];
   sprintf(buffer2, " %s|%s|%s|%s", p2.name, p2.price, p2.quantity, p2.total_price);
 8000656:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800065a:	f103 0109 	add.w	r1, r3, #9
 800065e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000662:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000666:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800066a:	3315      	adds	r3, #21
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000672:	3312      	adds	r3, #18
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	460b      	mov	r3, r1
 8000678:	493e      	ldr	r1, [pc, #248]	; (8000774 <main+0x1c0>)
 800067a:	f005 fd6b 	bl	8006154 <siprintf>
   char buffer3[30];
   sprintf(buffer3, " %s|%s|%s|%s", p3.name, p3.price, p3.quantity, p3.total_price);
 800067e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000682:	f103 0109 	add.w	r1, r3, #9
 8000686:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800068a:	f107 0020 	add.w	r0, r7, #32
 800068e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000692:	3315      	adds	r3, #21
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800069a:	3312      	adds	r3, #18
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	460b      	mov	r3, r1
 80006a0:	4934      	ldr	r1, [pc, #208]	; (8000774 <main+0x1c0>)
 80006a2:	f005 fd57 	bl	8006154 <siprintf>
   char buffer4[30];
   sprintf(buffer4, " %s|%s|%s|%s", p4.name, p4.price, p4.quantity, p4.total_price);
 80006a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006aa:	f103 0109 	add.w	r1, r3, #9
 80006ae:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80006b2:	4638      	mov	r0, r7
 80006b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006b8:	3315      	adds	r3, #21
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006c0:	3312      	adds	r3, #18
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	460b      	mov	r3, r1
 80006c6:	492b      	ldr	r1, [pc, #172]	; (8000774 <main+0x1c0>)
 80006c8:	f005 fd44 	bl	8006154 <siprintf>

  int i;
  LCD_Config();
 80006cc:	f000 fac4 	bl	8000c58 <LCD_Config>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80006d0:	4829      	ldr	r0, [pc, #164]	; (8000778 <main+0x1c4>)
 80006d2:	f000 ff71 	bl	80015b8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80006d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006da:	f000 ff85 	bl	80015e8 <BSP_LCD_SetBackColor>
  BSP_LCD_DrawLine(10,10,470,10);
 80006de:	230a      	movs	r3, #10
 80006e0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80006e4:	210a      	movs	r1, #10
 80006e6:	200a      	movs	r0, #10
 80006e8:	f001 f914 	bl	8001914 <BSP_LCD_DrawLine>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"SMART CART", CENTER_MODE);
 80006ec:	2301      	movs	r3, #1
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <main+0x1c8>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	2000      	movs	r0, #0
 80006f4:	f001 f82e 	bl	8001754 <BSP_LCD_DisplayStringAt>
//  for(i=2; i<10; i+=2){
//
//	  BSP_LCD_DisplayStringAtLine(i, (uint8_t*) " Product1| BTN    |ade |UT!");
//  }

  BSP_LCD_DisplayStringAtLine(2, buffer1);
 80006f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006fc:	4619      	mov	r1, r3
 80006fe:	2002      	movs	r0, #2
 8000700:	f001 f8f0 	bl	80018e4 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(4, buffer2);
 8000704:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000708:	4619      	mov	r1, r3
 800070a:	2004      	movs	r0, #4
 800070c:	f001 f8ea 	bl	80018e4 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(6, buffer3);
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4619      	mov	r1, r3
 8000716:	2006      	movs	r0, #6
 8000718:	f001 f8e4 	bl	80018e4 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(8, buffer4);
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	2008      	movs	r0, #8
 8000722:	f001 f8df 	bl	80018e4 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(10, " Total Price :        300000");
 8000726:	4916      	ldr	r1, [pc, #88]	; (8000780 <main+0x1cc>)
 8000728:	200a      	movs	r0, #10
 800072a:	f001 f8db 	bl	80018e4 <BSP_LCD_DisplayStringAtLine>
//  BSP_LCD_DisplayStringAtLine(i, buffer);
  BSP_LCD_DrawLine(10,10,10,260);
 800072e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000732:	220a      	movs	r2, #10
 8000734:	210a      	movs	r1, #10
 8000736:	200a      	movs	r0, #10
 8000738:	f001 f8ec 	bl	8001914 <BSP_LCD_DrawLine>
  BSP_LCD_DrawLine(470,10,470,260);
 800073c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000740:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8000744:	210a      	movs	r1, #10
 8000746:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800074a:	f001 f8e3 	bl	8001914 <BSP_LCD_DrawLine>
  BSP_LCD_DrawLine(10,260,470,260);
 800074e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000752:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8000756:	f44f 7182 	mov.w	r1, #260	; 0x104
 800075a:	200a      	movs	r0, #10
 800075c:	f001 f8da 	bl	8001914 <BSP_LCD_DrawLine>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000760:	e7fe      	b.n	8000760 <main+0x1ac>
 8000762:	bf00      	nop
 8000764:	08006a84 	.word	0x08006a84
 8000768:	08006aa0 	.word	0x08006aa0
 800076c:	08006abc 	.word	0x08006abc
 8000770:	08006ad8 	.word	0x08006ad8
 8000774:	08006a48 	.word	0x08006a48
 8000778:	ff0000ff 	.word	0xff0000ff
 800077c:	08006a58 	.word	0x08006a58
 8000780:	08006a64 	.word	0x08006a64

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f005 fcd6 	bl	8006144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <SystemClock_Config+0xd0>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a29      	ldr	r2, [pc, #164]	; (8000854 <SystemClock_Config+0xd0>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <SystemClock_Config+0xd0>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <SystemClock_Config+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a24      	ldr	r2, [pc, #144]	; (8000858 <SystemClock_Config+0xd4>)
 80007c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <SystemClock_Config+0xd4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ec:	2308      	movs	r3, #8
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007f0:	23d8      	movs	r3, #216	; 0xd8
 80007f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007f8:	2309      	movs	r3, #9
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4618      	mov	r0, r3
 8000802:	f003 fa63 	bl	8003ccc <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800080c:	f000 fa38 	bl	8000c80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000810:	f003 f94a 	bl	8003aa8 <HAL_PWREx_EnableOverDrive>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800081a:	f000 fa31 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2302      	movs	r3, #2
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800082e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2107      	movs	r1, #7
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fce9 	bl	8004214 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000848:	f000 fa1a 	bl	8000c80 <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	; 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_CRC_Init+0x3c>)
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <MX_CRC_Init+0x40>)
 8000864:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_CRC_Init+0x3c>)
 8000868:	2200      	movs	r2, #0
 800086a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_CRC_Init+0x3c>)
 800086e:	2200      	movs	r2, #0
 8000870:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_CRC_Init+0x3c>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_CRC_Init+0x3c>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_CRC_Init+0x3c>)
 8000880:	2201      	movs	r2, #1
 8000882:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_CRC_Init+0x3c>)
 8000886:	f001 febb 	bl	8002600 <HAL_CRC_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000890:	f000 f9f6 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000098 	.word	0x20000098
 800089c:	40023000 	.word	0x40023000

080008a0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_DMA2D_Init+0x5c>)
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <MX_DMA2D_Init+0x60>)
 80008a8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_DMA2D_Init+0x5c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_DMA2D_Init+0x5c>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_DMA2D_Init+0x5c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_DMA2D_Init+0x5c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_DMA2D_Init+0x5c>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_DMA2D_Init+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_DMA2D_Init+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_DMA2D_Init+0x5c>)
 80008d6:	f002 f9cd 	bl	8002c74 <HAL_DMA2D_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008e0:	f000 f9ce 	bl	8000c80 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008e4:	2101      	movs	r1, #1
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_DMA2D_Init+0x5c>)
 80008e8:	f002 fb22 	bl	8002f30 <HAL_DMA2D_ConfigLayer>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008f2:	f000 f9c5 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000bc 	.word	0x200000bc
 8000900:	4002b000 	.word	0x4002b000

08000904 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09a      	sub	sp, #104	; 0x68
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800090a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800090e:	2234      	movs	r2, #52	; 0x34
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f005 fc16 	bl	8006144 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	2234      	movs	r2, #52	; 0x34
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f005 fc10 	bl	8006144 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000924:	4b4e      	ldr	r3, [pc, #312]	; (8000a60 <MX_LTDC_Init+0x15c>)
 8000926:	4a4f      	ldr	r2, [pc, #316]	; (8000a64 <MX_LTDC_Init+0x160>)
 8000928:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800092a:	4b4d      	ldr	r3, [pc, #308]	; (8000a60 <MX_LTDC_Init+0x15c>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000930:	4b4b      	ldr	r3, [pc, #300]	; (8000a60 <MX_LTDC_Init+0x15c>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000936:	4b4a      	ldr	r3, [pc, #296]	; (8000a60 <MX_LTDC_Init+0x15c>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800093c:	4b48      	ldr	r3, [pc, #288]	; (8000a60 <MX_LTDC_Init+0x15c>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000942:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <MX_LTDC_Init+0x15c>)
 8000944:	2207      	movs	r2, #7
 8000946:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000948:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <MX_LTDC_Init+0x15c>)
 800094a:	2203      	movs	r2, #3
 800094c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800094e:	4b44      	ldr	r3, [pc, #272]	; (8000a60 <MX_LTDC_Init+0x15c>)
 8000950:	220e      	movs	r2, #14
 8000952:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000954:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <MX_LTDC_Init+0x15c>)
 8000956:	2205      	movs	r2, #5
 8000958:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800095a:	4b41      	ldr	r3, [pc, #260]	; (8000a60 <MX_LTDC_Init+0x15c>)
 800095c:	f240 228e 	movw	r2, #654	; 0x28e
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000962:	4b3f      	ldr	r3, [pc, #252]	; (8000a60 <MX_LTDC_Init+0x15c>)
 8000964:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000968:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800096a:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <MX_LTDC_Init+0x15c>)
 800096c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000972:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <MX_LTDC_Init+0x15c>)
 8000974:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <MX_LTDC_Init+0x15c>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000982:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <MX_LTDC_Init+0x15c>)
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800098a:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <MX_LTDC_Init+0x15c>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000992:	4833      	ldr	r0, [pc, #204]	; (8000a60 <MX_LTDC_Init+0x15c>)
 8000994:	f002 fdc0 	bl	8003518 <HAL_LTDC_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800099e:	f000 f96f 	bl	8000c80 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009b2:	2302      	movs	r3, #2
 80009b4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009c4:	2305      	movs	r3, #5
 80009c6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	481c      	ldr	r0, [pc, #112]	; (8000a60 <MX_LTDC_Init+0x15c>)
 80009f0:	f002 fe6e 	bl	80036d0 <HAL_LTDC_ConfigLayer>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80009fa:	f000 f941 	bl	8000c80 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a20:	2305      	movs	r3, #5
 8000a22:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	2201      	movs	r2, #1
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_LTDC_Init+0x15c>)
 8000a4a:	f002 fe41 	bl	80036d0 <HAL_LTDC_ConfigLayer>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000a54:	f000 f914 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	3768      	adds	r7, #104	; 0x68
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000fc 	.word	0x200000fc
 8000a64:	40016800 	.word	0x40016800

08000a68 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_QUADSPI_Init+0x50>)
 8000a6e:	4a13      	ldr	r2, [pc, #76]	; (8000abc <MX_QUADSPI_Init+0x54>)
 8000a70:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_QUADSPI_Init+0x50>)
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_QUADSPI_Init+0x50>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_QUADSPI_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_QUADSPI_Init+0x50>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_QUADSPI_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_QUADSPI_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_QUADSPI_Init+0x50>)
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_QUADSPI_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_QUADSPI_Init+0x50>)
 8000aa4:	f003 f850 	bl	8003b48 <HAL_QSPI_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000aae:	f000 f8e7 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200001a4 	.word	0x200001a4
 8000abc:	a0001000 	.word	0xa0001000

08000ac0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_UART4_Init+0x58>)
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <MX_UART4_Init+0x5c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_UART4_Init+0x58>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_UART4_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_UART4_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_UART4_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_UART4_Init+0x58>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_UART4_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_UART4_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_UART4_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_UART4_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_UART4_Init+0x58>)
 8000b04:	f004 f9e5 	bl	8004ed2 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 f8b7 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200001f0 	.word	0x200001f0
 8000b1c:	40004c00 	.word	0x40004c00

08000b20 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MX_USART6_UART_Init+0x5c>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART6_UART_Init+0x58>)
 8000b64:	f004 f9b5 	bl	8004ed2 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 f887 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000278 	.word	0x20000278
 8000b7c:	40011400 	.word	0x40011400

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b86:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a2c      	ldr	r2, [pc, #176]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a20      	ldr	r2, [pc, #128]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a1a      	ldr	r2, [pc, #104]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000c04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_GPIO_Init+0xd4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c46:	bf00      	nop
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* LCD Initialization */
  BSP_LCD_Init();
 8000c5c:	f000 fba4 	bl	80013a8 <BSP_LCD_Init>

  /* LCD Initialization */
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000c60:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fc37 	bl	80014d8 <BSP_LCD_LayerDefaultInit>

  /* Enable the LCD */
  BSP_LCD_DisplayOn();
 8000c6a:	f000 ff67 	bl	8001b3c <BSP_LCD_DisplayOn>

  /* Select the LCD Background Layer  */
  BSP_LCD_SelectLayer(0);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 fc92 	bl	8001598 <BSP_LCD_SelectLayer>

  /* Clear the Background Layer */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c78:	f000 fd00 	bl	800167c <BSP_LCD_Clear>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	f06f 0001 	mvn.w	r0, #1
 8000cca:	f001 fc62 	bl	8002592 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_CRC_MspInit+0x38>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10b      	bne.n	8000d06 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_CRC_MspInit+0x3c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_CRC_MspInit+0x3c>)
 8000cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_CRC_MspInit+0x3c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40023000 	.word	0x40023000
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_DMA2D_MspInit+0x38>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10b      	bne.n	8000d46 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_DMA2D_MspInit+0x3c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <HAL_DMA2D_MspInit+0x3c>)
 8000d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <HAL_DMA2D_MspInit+0x3c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	4002b000 	.word	0x4002b000
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0b0      	sub	sp, #192	; 0xc0
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d78:	2284      	movs	r2, #132	; 0x84
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 f9e1 	bl	8006144 <memset>
  if(hltdc->Instance==LTDC)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a97      	ldr	r2, [pc, #604]	; (8000fe4 <HAL_LTDC_MspInit+0x288>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	f040 8126 	bne.w	8000fda <HAL_LTDC_MspInit+0x27e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d8e:	2308      	movs	r3, #8
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000d92:	2332      	movs	r3, #50	; 0x32
 8000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000da6:	2300      	movs	r3, #0
 8000da8:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dae:	4618      	mov	r0, r3
 8000db0:	f003 fc16 	bl	80045e0 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8000dba:	f7ff ff61 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000dbe:	4b8a      	ldr	r3, [pc, #552]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a89      	ldr	r2, [pc, #548]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b87      	ldr	r3, [pc, #540]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b84      	ldr	r3, [pc, #528]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a83      	ldr	r2, [pc, #524]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b81      	ldr	r3, [pc, #516]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dee:	4b7e      	ldr	r3, [pc, #504]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a7d      	ldr	r2, [pc, #500]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b7b      	ldr	r3, [pc, #492]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b78      	ldr	r3, [pc, #480]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a77      	ldr	r2, [pc, #476]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b75      	ldr	r3, [pc, #468]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e1e:	4b72      	ldr	r3, [pc, #456]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a71      	ldr	r2, [pc, #452]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b6f      	ldr	r3, [pc, #444]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e36:	4b6c      	ldr	r3, [pc, #432]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a6b      	ldr	r2, [pc, #428]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b69      	ldr	r3, [pc, #420]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4e:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a65      	ldr	r2, [pc, #404]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b63      	ldr	r3, [pc, #396]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e66:	4b60      	ldr	r3, [pc, #384]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a5f      	ldr	r2, [pc, #380]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <HAL_LTDC_MspInit+0x28c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> LTDC_R6
    PI14     ------> LTDC_CLK
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e98:	230e      	movs	r3, #14
 8000e9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4851      	ldr	r0, [pc, #324]	; (8000fec <HAL_LTDC_MspInit+0x290>)
 8000ea6:	f002 f971 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8000eaa:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000eae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ec4:	230e      	movs	r3, #14
 8000ec6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4847      	ldr	r0, [pc, #284]	; (8000ff0 <HAL_LTDC_MspInit+0x294>)
 8000ed2:	f002 f95b 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 8000ed6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ef0:	230e      	movs	r3, #14
 8000ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000efa:	4619      	mov	r1, r3
 8000efc:	483d      	ldr	r0, [pc, #244]	; (8000ff4 <HAL_LTDC_MspInit+0x298>)
 8000efe:	f002 f945 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_1
 8000f02:	f244 6333 	movw	r3, #17971	; 0x4633
 8000f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1c:	230e      	movs	r3, #14
 8000f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f26:	4619      	mov	r1, r3
 8000f28:	4833      	ldr	r0, [pc, #204]	; (8000ff8 <HAL_LTDC_MspInit+0x29c>)
 8000f2a:	f002 f92f 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f46:	230e      	movs	r3, #14
 8000f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f50:	4619      	mov	r1, r3
 8000f52:	482a      	ldr	r0, [pc, #168]	; (8000ffc <HAL_LTDC_MspInit+0x2a0>)
 8000f54:	f002 f91a 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f72:	2309      	movs	r3, #9
 8000f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481c      	ldr	r0, [pc, #112]	; (8000ff0 <HAL_LTDC_MspInit+0x294>)
 8000f80:	f002 f904 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f84:	2308      	movs	r3, #8
 8000f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f9c:	230e      	movs	r3, #14
 8000f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4815      	ldr	r0, [pc, #84]	; (8001000 <HAL_LTDC_MspInit+0x2a4>)
 8000faa:	f002 f8ef 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 8000fae:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8000fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc8:	230e      	movs	r3, #14
 8000fca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <HAL_LTDC_MspInit+0x2a8>)
 8000fd6:	f002 f8d9 	bl	800318c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	37c0      	adds	r7, #192	; 0xc0
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40016800 	.word	0x40016800
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	40021800 	.word	0x40021800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	40022800 	.word	0x40022800
 8001000:	40020c00 	.word	0x40020c00
 8001004:	40021c00 	.word	0x40021c00

08001008 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	; 0x30
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a33      	ldr	r2, [pc, #204]	; (80010f4 <HAL_QSPI_MspInit+0xec>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d160      	bne.n	80010ec <HAL_QSPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 800102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102e:	4a32      	ldr	r2, [pc, #200]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6393      	str	r3, [r2, #56]	; 0x38
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 8001038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a2c      	ldr	r2, [pc, #176]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 8001060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HAL_QSPI_MspInit+0xf0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> QUADSPI_BK2_NCS
    PH3     ------> QUADSPI_BK2_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800108a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800109c:	2309      	movs	r3, #9
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4815      	ldr	r0, [pc, #84]	; (80010fc <HAL_QSPI_MspInit+0xf4>)
 80010a8:	f002 f870 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80010ac:	230c      	movs	r3, #12
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010bc:	2309      	movs	r3, #9
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <HAL_QSPI_MspInit+0xf8>)
 80010c8:	f002 f860 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010cc:	2304      	movs	r3, #4
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010dc:	2309      	movs	r3, #9
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <HAL_QSPI_MspInit+0xfc>)
 80010e8:	f002 f850 	bl	800318c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3730      	adds	r7, #48	; 0x30
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	a0001000 	.word	0xa0001000
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020800 	.word	0x40020800
 8001100:	40021c00 	.word	0x40021c00
 8001104:	40020400 	.word	0x40020400

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0ac      	sub	sp, #176	; 0xb0
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 0318 	add.w	r3, r7, #24
 8001124:	2284      	movs	r2, #132	; 0x84
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f005 f80b 	bl	8006144 <memset>
  if(huart->Instance==UART4)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a47      	ldr	r2, [pc, #284]	; (8001250 <HAL_UART_MspInit+0x148>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d13c      	bne.n	80011b2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800113e:	2300      	movs	r3, #0
 8001140:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	4618      	mov	r0, r3
 8001148:	f003 fa4a 	bl	80045e0 <HAL_RCCEx_PeriphCLKConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001152:	f7ff fd95 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001156:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <HAL_UART_MspInit+0x14c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a3e      	ldr	r2, [pc, #248]	; (8001254 <HAL_UART_MspInit+0x14c>)
 800115c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <HAL_UART_MspInit+0x14c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b39      	ldr	r3, [pc, #228]	; (8001254 <HAL_UART_MspInit+0x14c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a38      	ldr	r2, [pc, #224]	; (8001254 <HAL_UART_MspInit+0x14c>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_UART_MspInit+0x14c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001186:	2303      	movs	r3, #3
 8001188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800119e:	2308      	movs	r3, #8
 80011a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011a8:	4619      	mov	r1, r3
 80011aa:	482b      	ldr	r0, [pc, #172]	; (8001258 <HAL_UART_MspInit+0x150>)
 80011ac:	f001 ffee 	bl	800318c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80011b0:	e049      	b.n	8001246 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART6)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a29      	ldr	r2, [pc, #164]	; (800125c <HAL_UART_MspInit+0x154>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d144      	bne.n	8001246 <HAL_UART_MspInit+0x13e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80011bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80011c2:	2300      	movs	r3, #0
 80011c4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fa08 	bl	80045e0 <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80011d6:	f7ff fd53 	bl	8000c80 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_UART_MspInit+0x14c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <HAL_UART_MspInit+0x14c>)
 80011e0:	f043 0320 	orr.w	r3, r3, #32
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_UART_MspInit+0x14c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f003 0320 	and.w	r3, r3, #32
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_UART_MspInit+0x14c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <HAL_UART_MspInit+0x14c>)
 80011f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_UART_MspInit+0x14c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800120a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800120e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001224:	2308      	movs	r3, #8
 8001226:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800122a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800122e:	4619      	mov	r1, r3
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <HAL_UART_MspInit+0x158>)
 8001232:	f001 ffab 	bl	800318c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2047      	movs	r0, #71	; 0x47
 800123c:	f001 f9a9 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001240:	2047      	movs	r0, #71	; 0x47
 8001242:	f001 f9c2 	bl	80025ca <HAL_NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	37b0      	adds	r7, #176	; 0xb0
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40004c00 	.word	0x40004c00
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000
 800125c:	40011400 	.word	0x40011400
 8001260:	40021800 	.word	0x40021800

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b0:	f001 f850 	bl	8002354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <USART6_IRQHandler+0x10>)
 80012be:	f003 fe57 	bl	8004f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000278 	.word	0x20000278

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f004 fef8 	bl	80060f0 <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20050000 	.word	0x20050000
 800132c:	00000400 	.word	0x00000400
 8001330:	20000300 	.word	0x20000300
 8001334:	20000560 	.word	0x20000560

08001338 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800135e:	490d      	ldr	r1, [pc, #52]	; (8001394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001374:	4c0a      	ldr	r4, [pc, #40]	; (80013a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001382:	f7ff ffd9 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001386:	f004 feb9 	bl	80060fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138a:	f7ff f913 	bl	80005b4 <main>
  bx  lr    
 800138e:	4770      	bx	lr
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001398:	08008610 	.word	0x08008610
  ldr r2, =_sbss
 800139c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013a0:	20000560 	.word	0x20000560

080013a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC_IRQHandler>
	...

080013a8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013ae:	2228      	movs	r2, #40	; 0x28
 80013b0:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013b4:	2209      	movs	r2, #9
 80013b6:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013ba:	2235      	movs	r2, #53	; 0x35
 80013bc:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013c0:	220b      	movs	r2, #11
 80013c2:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013c6:	f240 121b 	movw	r2, #283	; 0x11b
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013ce:	f240 2215 	movw	r2, #533	; 0x215
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013d6:	f240 121d 	movw	r2, #285	; 0x11d
 80013da:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013de:	f240 2235 	movw	r2, #565	; 0x235
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80013e4:	2100      	movs	r1, #0
 80013e6:	4823      	ldr	r0, [pc, #140]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013e8:	f000 fca0 	bl	8001d2c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013f2:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013f6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80013fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <BSP_LCD_Init+0xcc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <BSP_LCD_Init+0xcc>)
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <BSP_LCD_Init+0xcc>)
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <BSP_LCD_Init+0xcc>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <BSP_LCD_Init+0xcc>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <BSP_LCD_Init+0xcc>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <BSP_LCD_Init+0xcc>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <BSP_LCD_Init+0xcc>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <BSP_LCD_Init+0xd0>)
 8001430:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001432:	4810      	ldr	r0, [pc, #64]	; (8001474 <BSP_LCD_Init+0xcc>)
 8001434:	f002 f98a 	bl	800374c <HAL_LTDC_GetState>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800143e:	2100      	movs	r1, #0
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <BSP_LCD_Init+0xcc>)
 8001442:	f000 fb99 	bl	8001b78 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <BSP_LCD_Init+0xcc>)
 8001448:	f002 f866 	bl	8003518 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001452:	480a      	ldr	r0, [pc, #40]	; (800147c <BSP_LCD_Init+0xd4>)
 8001454:	f002 f846 	bl	80034e4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2108      	movs	r1, #8
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <BSP_LCD_Init+0xd8>)
 800145e:	f002 f841 	bl	80034e4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001462:	f000 fd83 	bl	8001f6c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <BSP_LCD_Init+0xdc>)
 8001468:	f000 f8d8 	bl	800161c <BSP_LCD_SetFont>
  
  return LCD_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000304 	.word	0x20000304
 8001478:	40016800 	.word	0x40016800
 800147c:	40022000 	.word	0x40022000
 8001480:	40022800 	.word	0x40022800
 8001484:	20000004 	.word	0x20000004

08001488 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <BSP_LCD_GetXSize+0x20>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <BSP_LCD_GetXSize+0x24>)
 8001492:	2134      	movs	r1, #52	; 0x34
 8001494:	fb01 f303 	mul.w	r3, r1, r3
 8001498:	4413      	add	r3, r2
 800149a:	3360      	adds	r3, #96	; 0x60
 800149c:	681b      	ldr	r3, [r3, #0]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	200003ec 	.word	0x200003ec
 80014ac:	20000304 	.word	0x20000304

080014b0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <BSP_LCD_GetYSize+0x20>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <BSP_LCD_GetYSize+0x24>)
 80014ba:	2134      	movs	r1, #52	; 0x34
 80014bc:	fb01 f303 	mul.w	r3, r1, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	3364      	adds	r3, #100	; 0x64
 80014c4:	681b      	ldr	r3, [r3, #0]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	200003ec 	.word	0x200003ec
 80014d4:	20000304 	.word	0x20000304

080014d8 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80014d8:	b580      	push	{r7, lr}
 80014da:	b090      	sub	sp, #64	; 0x40
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80014e8:	f7ff ffce 	bl	8001488 <BSP_LCD_GetXSize>
 80014ec:	4603      	mov	r3, r0
 80014ee:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80014f4:	f7ff ffdc 	bl	80014b0 <BSP_LCD_GetYSize>
 80014f8:	4603      	mov	r3, r0
 80014fa:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8001504:	23ff      	movs	r3, #255	; 0xff
 8001506:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800151e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001524:	2307      	movs	r3, #7
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001528:	f7ff ffae 	bl	8001488 <BSP_LCD_GetXSize>
 800152c:	4603      	mov	r3, r0
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001530:	f7ff ffbe 	bl	80014b0 <BSP_LCD_GetYSize>
 8001534:	4603      	mov	r3, r0
 8001536:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001538:	88fa      	ldrh	r2, [r7, #6]
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4619      	mov	r1, r3
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <BSP_LCD_LayerDefaultInit+0xb4>)
 8001542:	f002 f8c5 	bl	80036d0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001546:	88fa      	ldrh	r2, [r7, #6]
 8001548:	4911      	ldr	r1, [pc, #68]	; (8001590 <BSP_LCD_LayerDefaultInit+0xb8>)
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3304      	adds	r3, #4
 8001556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800155a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800155c:	88fa      	ldrh	r2, [r7, #6]
 800155e:	490c      	ldr	r1, [pc, #48]	; (8001590 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3308      	adds	r3, #8
 800156c:	4a09      	ldr	r2, [pc, #36]	; (8001594 <BSP_LCD_LayerDefaultInit+0xbc>)
 800156e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	4907      	ldr	r1, [pc, #28]	; (8001590 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001582:	601a      	str	r2, [r3, #0]
}
 8001584:	bf00      	nop
 8001586:	3740      	adds	r7, #64	; 0x40
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000304 	.word	0x20000304
 8001590:	200003f0 	.word	0x200003f0
 8001594:	20000004 	.word	0x20000004

08001598 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <BSP_LCD_SelectLayer+0x1c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
} 
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	200003ec 	.word	0x200003ec

080015b8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <BSP_LCD_SetTextColor+0x28>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4907      	ldr	r1, [pc, #28]	; (80015e4 <BSP_LCD_SetTextColor+0x2c>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	601a      	str	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	200003ec 	.word	0x200003ec
 80015e4:	200003f0 	.word	0x200003f0

080015e8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <BSP_LCD_SetBackColor+0x2c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4908      	ldr	r1, [pc, #32]	; (8001618 <BSP_LCD_SetBackColor+0x30>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3304      	adds	r3, #4
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200003ec 	.word	0x200003ec
 8001618:	200003f0 	.word	0x200003f0

0800161c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <BSP_LCD_SetFont+0x2c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4908      	ldr	r1, [pc, #32]	; (800164c <BSP_LCD_SetFont+0x30>)
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	3308      	adds	r3, #8
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	601a      	str	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	200003ec 	.word	0x200003ec
 800164c:	200003f0 	.word	0x200003f0

08001650 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <BSP_LCD_GetFont+0x24>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4907      	ldr	r1, [pc, #28]	; (8001678 <BSP_LCD_GetFont+0x28>)
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3308      	adds	r3, #8
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200003ec 	.word	0x200003ec
 8001678:	200003f0 	.word	0x200003f0

0800167c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167e:	b085      	sub	sp, #20
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <BSP_LCD_Clear+0x48>)
 8001686:	681c      	ldr	r4, [r3, #0]
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <BSP_LCD_Clear+0x48>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <BSP_LCD_Clear+0x4c>)
 800168e:	2134      	movs	r1, #52	; 0x34
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	335c      	adds	r3, #92	; 0x5c
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	461e      	mov	r6, r3
 800169c:	f7ff fef4 	bl	8001488 <BSP_LCD_GetXSize>
 80016a0:	4605      	mov	r5, r0
 80016a2:	f7ff ff05 	bl	80014b0 <BSP_LCD_GetYSize>
 80016a6:	4602      	mov	r2, r0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	2300      	movs	r3, #0
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	4613      	mov	r3, r2
 80016b2:	462a      	mov	r2, r5
 80016b4:	4631      	mov	r1, r6
 80016b6:	4620      	mov	r0, r4
 80016b8:	f000 fc0c 	bl	8001ed4 <LL_FillBuffer>
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	200003ec 	.word	0x200003ec
 80016c8:	20000304 	.word	0x20000304

080016cc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
 80016d6:	460b      	mov	r3, r1
 80016d8:	80bb      	strh	r3, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <BSP_LCD_DisplayChar+0x80>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	491b      	ldr	r1, [pc, #108]	; (8001750 <BSP_LCD_DisplayChar+0x84>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	3308      	adds	r3, #8
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <BSP_LCD_DisplayChar+0x80>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4c14      	ldr	r4, [pc, #80]	; (8001750 <BSP_LCD_DisplayChar+0x84>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4423      	add	r3, r4
 800170a:	3308      	adds	r3, #8
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001710:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <BSP_LCD_DisplayChar+0x80>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4c0d      	ldr	r4, [pc, #52]	; (8001750 <BSP_LCD_DisplayChar+0x84>)
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4423      	add	r3, r4
 8001724:	3308      	adds	r3, #8
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	889b      	ldrh	r3, [r3, #4]
 800172a:	3307      	adds	r3, #7
 800172c:	2b00      	cmp	r3, #0
 800172e:	da00      	bge.n	8001732 <BSP_LCD_DisplayChar+0x66>
 8001730:	3307      	adds	r3, #7
 8001732:	10db      	asrs	r3, r3, #3
 8001734:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001738:	18ca      	adds	r2, r1, r3
 800173a:	88b9      	ldrh	r1, [r7, #4]
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fb10 	bl	8001d64 <DrawChar>
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	200003ec 	.word	0x200003ec
 8001750:	200003f0 	.word	0x200003f0

08001754 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	60ba      	str	r2, [r7, #8]
 800175c:	461a      	mov	r2, r3
 800175e:	4603      	mov	r3, r0
 8001760:	81fb      	strh	r3, [r7, #14]
 8001762:	460b      	mov	r3, r1
 8001764:	81bb      	strh	r3, [r7, #12]
 8001766:	4613      	mov	r3, r2
 8001768:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800176a:	2301      	movs	r3, #1
 800176c:	83fb      	strh	r3, [r7, #30]
 800176e:	2300      	movs	r3, #0
 8001770:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800177e:	e002      	b.n	8001786 <BSP_LCD_DisplayStringAt+0x32>
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	3301      	adds	r3, #1
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	617a      	str	r2, [r7, #20]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f6      	bne.n	8001780 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001792:	f7ff fe79 	bl	8001488 <BSP_LCD_GetXSize>
 8001796:	4601      	mov	r1, r0
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <BSP_LCD_DisplayStringAt+0x188>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4850      	ldr	r0, [pc, #320]	; (80018e0 <BSP_LCD_DisplayStringAt+0x18c>)
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4403      	add	r3, r0
 80017a8:	3308      	adds	r3, #8
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	889b      	ldrh	r3, [r3, #4]
 80017ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d01c      	beq.n	80017f4 <BSP_LCD_DisplayStringAt+0xa0>
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	dc33      	bgt.n	8001826 <BSP_LCD_DisplayStringAt+0xd2>
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d002      	beq.n	80017c8 <BSP_LCD_DisplayStringAt+0x74>
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d019      	beq.n	80017fa <BSP_LCD_DisplayStringAt+0xa6>
 80017c6:	e02e      	b.n	8001826 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	1ad1      	subs	r1, r2, r3
 80017ce:	4b43      	ldr	r3, [pc, #268]	; (80018dc <BSP_LCD_DisplayStringAt+0x188>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4843      	ldr	r0, [pc, #268]	; (80018e0 <BSP_LCD_DisplayStringAt+0x18c>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4403      	add	r3, r0
 80017de:	3308      	adds	r3, #8
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	889b      	ldrh	r3, [r3, #4]
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	89fb      	ldrh	r3, [r7, #14]
 80017ee:	4413      	add	r3, r2
 80017f0:	83fb      	strh	r3, [r7, #30]
      break;
 80017f2:	e01b      	b.n	800182c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80017f4:	89fb      	ldrh	r3, [r7, #14]
 80017f6:	83fb      	strh	r3, [r7, #30]
      break;
 80017f8:	e018      	b.n	800182c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	b299      	uxth	r1, r3
 8001802:	4b36      	ldr	r3, [pc, #216]	; (80018dc <BSP_LCD_DisplayStringAt+0x188>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4836      	ldr	r0, [pc, #216]	; (80018e0 <BSP_LCD_DisplayStringAt+0x18c>)
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4403      	add	r3, r0
 8001812:	3308      	adds	r3, #8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	889b      	ldrh	r3, [r3, #4]
 8001818:	fb11 f303 	smulbb	r3, r1, r3
 800181c:	b29a      	uxth	r2, r3
 800181e:	89fb      	ldrh	r3, [r7, #14]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	83fb      	strh	r3, [r7, #30]
      break;
 8001824:	e002      	b.n	800182c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	83fb      	strh	r3, [r7, #30]
      break;
 800182a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800182c:	8bfb      	ldrh	r3, [r7, #30]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <BSP_LCD_DisplayStringAt+0xe6>
 8001832:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001836:	2b00      	cmp	r3, #0
 8001838:	da1d      	bge.n	8001876 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800183a:	2301      	movs	r3, #1
 800183c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800183e:	e01a      	b.n	8001876 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	89b9      	ldrh	r1, [r7, #12]
 8001846:	8bfb      	ldrh	r3, [r7, #30]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff3f 	bl	80016cc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800184e:	4b23      	ldr	r3, [pc, #140]	; (80018dc <BSP_LCD_DisplayStringAt+0x188>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4923      	ldr	r1, [pc, #140]	; (80018e0 <BSP_LCD_DisplayStringAt+0x18c>)
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	3308      	adds	r3, #8
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	889a      	ldrh	r2, [r3, #4]
 8001864:	8bfb      	ldrh	r3, [r7, #30]
 8001866:	4413      	add	r3, r2
 8001868:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3301      	adds	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
    i++;
 8001870:	8bbb      	ldrh	r3, [r7, #28]
 8001872:	3301      	adds	r3, #1
 8001874:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf14      	ite	ne
 800187e:	2301      	movne	r3, #1
 8001880:	2300      	moveq	r3, #0
 8001882:	b2dc      	uxtb	r4, r3
 8001884:	f7ff fe00 	bl	8001488 <BSP_LCD_GetXSize>
 8001888:	8bb9      	ldrh	r1, [r7, #28]
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <BSP_LCD_DisplayStringAt+0x188>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4d14      	ldr	r5, [pc, #80]	; (80018e0 <BSP_LCD_DisplayStringAt+0x18c>)
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	442b      	add	r3, r5
 800189a:	3308      	adds	r3, #8
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	889b      	ldrh	r3, [r3, #4]
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	1ac3      	subs	r3, r0, r3
 80018a6:	b299      	uxth	r1, r3
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <BSP_LCD_DisplayStringAt+0x188>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <BSP_LCD_DisplayStringAt+0x18c>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4403      	add	r3, r0
 80018b8:	3308      	adds	r3, #8
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	889b      	ldrh	r3, [r3, #4]
 80018be:	4299      	cmp	r1, r3
 80018c0:	bf2c      	ite	cs
 80018c2:	2301      	movcs	r3, #1
 80018c4:	2300      	movcc	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4023      	ands	r3, r4
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1b7      	bne.n	8001840 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bdb0      	pop	{r4, r5, r7, pc}
 80018da:	bf00      	nop
 80018dc:	200003ec 	.word	0x200003ec
 80018e0:	200003f0 	.word	0x200003f0

080018e4 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80018f0:	f7ff feae 	bl	8001650 <BSP_LCD_GetFont>
 80018f4:	4603      	mov	r3, r0
 80018f6:	88db      	ldrh	r3, [r3, #6]
 80018f8:	88fa      	ldrh	r2, [r7, #6]
 80018fa:	fb12 f303 	smulbb	r3, r2, r3
 80018fe:	b299      	uxth	r1, r3
 8001900:	2303      	movs	r3, #3
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	2000      	movs	r0, #0
 8001906:	f7ff ff25 	bl	8001754 <BSP_LCD_DisplayStringAt>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b08b      	sub	sp, #44	; 0x2c
 8001918:	af00      	add	r7, sp, #0
 800191a:	4604      	mov	r4, r0
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4623      	mov	r3, r4
 8001924:	80fb      	strh	r3, [r7, #6]
 8001926:	4603      	mov	r3, r0
 8001928:	80bb      	strh	r3, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	807b      	strh	r3, [r7, #2]
 800192e:	4613      	mov	r3, r2
 8001930:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8001932:	2300      	movs	r3, #0
 8001934:	823b      	strh	r3, [r7, #16]
 8001936:	2300      	movs	r3, #0
 8001938:	81fb      	strh	r3, [r7, #14]
 800193a:	2300      	movs	r3, #0
 800193c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800193e:	2300      	movs	r3, #0
 8001940:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001942:	2300      	movs	r3, #0
 8001944:	847b      	strh	r3, [r7, #34]	; 0x22
 8001946:	2300      	movs	r3, #0
 8001948:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 800194a:	2300      	movs	r3, #0
 800194c:	83fb      	strh	r3, [r7, #30]
 800194e:	2300      	movs	r3, #0
 8001950:	83bb      	strh	r3, [r7, #28]
 8001952:	2300      	movs	r3, #0
 8001954:	837b      	strh	r3, [r7, #26]
 8001956:	2300      	movs	r3, #0
 8001958:	833b      	strh	r3, [r7, #24]
 800195a:	2300      	movs	r3, #0
 800195c:	82fb      	strh	r3, [r7, #22]
 800195e:	2300      	movs	r3, #0
 8001960:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	bfb8      	it	lt
 8001970:	425b      	neglt	r3, r3
 8001972:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8001974:	883a      	ldrh	r2, [r7, #0]
 8001976:	88bb      	ldrh	r3, [r7, #4]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	bfb8      	it	lt
 800197e:	425b      	neglt	r3, r3
 8001980:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	429a      	cmp	r2, r3
 8001990:	d304      	bcc.n	800199c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8001992:	2301      	movs	r3, #1
 8001994:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	843b      	strh	r3, [r7, #32]
 800199a:	e005      	b.n	80019a8 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800199c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80019a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a6:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80019a8:	883a      	ldrh	r2, [r7, #0]
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d304      	bcc.n	80019ba <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	83bb      	strh	r3, [r7, #28]
 80019b8:	e005      	b.n	80019c6 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80019ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019be:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80019c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80019c6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80019ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	db11      	blt.n	80019f6 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80019d2:	2300      	movs	r3, #0
 80019d4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80019d6:	2300      	movs	r3, #0
 80019d8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80019da:	8a3b      	ldrh	r3, [r7, #16]
 80019dc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80019de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da00      	bge.n	80019e8 <BSP_LCD_DrawLine+0xd4>
 80019e6:	3301      	adds	r3, #1
 80019e8:	105b      	asrs	r3, r3, #1
 80019ea:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80019ec:	89fb      	ldrh	r3, [r7, #14]
 80019ee:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 80019f0:	8a3b      	ldrh	r3, [r7, #16]
 80019f2:	82bb      	strh	r3, [r7, #20]
 80019f4:	e010      	b.n	8001a18 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80019f6:	2300      	movs	r3, #0
 80019f8:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80019fa:	2300      	movs	r3, #0
 80019fc:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8001a02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da00      	bge.n	8001a0c <BSP_LCD_DrawLine+0xf8>
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	105b      	asrs	r3, r3, #1
 8001a0e:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8001a10:	8a3b      	ldrh	r3, [r7, #16]
 8001a12:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	827b      	strh	r3, [r7, #18]
 8001a1c:	e037      	b.n	8001a8e <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8001a1e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001a20:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <BSP_LCD_DrawLine+0x190>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4c20      	ldr	r4, [pc, #128]	; (8001aa8 <BSP_LCD_DrawLine+0x194>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4423      	add	r3, r4
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	f000 f839 	bl	8001aac <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8001a3a:	8b3a      	ldrh	r2, [r7, #24]
 8001a3c:	8afb      	ldrh	r3, [r7, #22]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8001a44:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001a48:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	db0e      	blt.n	8001a6e <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8001a50:	8b3a      	ldrh	r2, [r7, #24]
 8001a52:	8b7b      	ldrh	r3, [r7, #26]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8001a5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a5e:	4413      	add	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8001a64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a66:	8bfb      	ldrh	r3, [r7, #30]
 8001a68:	4413      	add	r3, r2
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8001a6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a70:	8c3b      	ldrh	r3, [r7, #32]
 8001a72:	4413      	add	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8001a78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a7a:	8bbb      	ldrh	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8001a82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	827b      	strh	r3, [r7, #18]
 8001a8e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001a92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	ddc1      	ble.n	8001a1e <BSP_LCD_DrawLine+0x10a>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	372c      	adds	r7, #44	; 0x2c
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	200003ec 	.word	0x200003ec
 8001aa8:	200003f0 	.word	0x200003f0

08001aac <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001aac:	b5b0      	push	{r4, r5, r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	603a      	str	r2, [r7, #0]
 8001ab6:	80fb      	strh	r3, [r7, #6]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <BSP_LCD_DrawPixel+0x88>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <BSP_LCD_DrawPixel+0x8c>)
 8001ac2:	2134      	movs	r1, #52	; 0x34
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3348      	adds	r3, #72	; 0x48
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d116      	bne.n	8001b00 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <BSP_LCD_DrawPixel+0x88>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a18      	ldr	r2, [pc, #96]	; (8001b38 <BSP_LCD_DrawPixel+0x8c>)
 8001ad8:	2134      	movs	r1, #52	; 0x34
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	335c      	adds	r3, #92	; 0x5c
 8001ae2:	681c      	ldr	r4, [r3, #0]
 8001ae4:	88bd      	ldrh	r5, [r7, #4]
 8001ae6:	f7ff fccf 	bl	8001488 <BSP_LCD_GetXSize>
 8001aea:	4603      	mov	r3, r0
 8001aec:	fb03 f205 	mul.w	r2, r3, r5
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	4413      	add	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4423      	add	r3, r4
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	b292      	uxth	r2, r2
 8001afc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8001afe:	e015      	b.n	8001b2c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <BSP_LCD_DrawPixel+0x88>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0c      	ldr	r2, [pc, #48]	; (8001b38 <BSP_LCD_DrawPixel+0x8c>)
 8001b06:	2134      	movs	r1, #52	; 0x34
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	335c      	adds	r3, #92	; 0x5c
 8001b10:	681c      	ldr	r4, [r3, #0]
 8001b12:	88bd      	ldrh	r5, [r7, #4]
 8001b14:	f7ff fcb8 	bl	8001488 <BSP_LCD_GetXSize>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	fb03 f205 	mul.w	r2, r3, r5
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4423      	add	r3, r4
 8001b26:	461a      	mov	r2, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bdb0      	pop	{r4, r5, r7, pc}
 8001b34:	200003ec 	.word	0x200003ec
 8001b38:	20000304 	.word	0x20000304

08001b3c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <BSP_LCD_DisplayOn+0x30>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <BSP_LCD_DisplayOn+0x30>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001b50:	2201      	movs	r2, #1
 8001b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b56:	4806      	ldr	r0, [pc, #24]	; (8001b70 <BSP_LCD_DisplayOn+0x34>)
 8001b58:	f001 fcc4 	bl	80034e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2108      	movs	r1, #8
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <BSP_LCD_DisplayOn+0x38>)
 8001b62:	f001 fcbf 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000304 	.word	0x20000304
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40022800 	.word	0x40022800

08001b78 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b090      	sub	sp, #64	; 0x40
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001b82:	4b64      	ldr	r3, [pc, #400]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a63      	ldr	r2, [pc, #396]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001b88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b9a:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a5d      	ldr	r2, [pc, #372]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb2:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a57      	ldr	r2, [pc, #348]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001bb8:	f043 0310 	orr.w	r3, r3, #16
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b55      	ldr	r3, [pc, #340]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	623b      	str	r3, [r7, #32]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bca:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a51      	ldr	r2, [pc, #324]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b4f      	ldr	r3, [pc, #316]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001be2:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a4b      	ldr	r2, [pc, #300]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b49      	ldr	r3, [pc, #292]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001bfa:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a45      	ldr	r2, [pc, #276]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a3f      	ldr	r2, [pc, #252]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001c18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a39      	ldr	r2, [pc, #228]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001c42:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a33      	ldr	r2, [pc, #204]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001c48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <BSP_LCD_MspInit+0x19c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001c66:	2302      	movs	r3, #2
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001c6a:	230e      	movs	r3, #14
 8001c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c72:	4619      	mov	r1, r3
 8001c74:	4828      	ldr	r0, [pc, #160]	; (8001d18 <BSP_LCD_MspInit+0x1a0>)
 8001c76:	f001 fa89 	bl	800318c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001c84:	2309      	movs	r3, #9
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4823      	ldr	r0, [pc, #140]	; (8001d1c <BSP_LCD_MspInit+0x1a4>)
 8001c90:	f001 fa7c 	bl	800318c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8001c94:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001c9e:	230e      	movs	r3, #14
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	481d      	ldr	r0, [pc, #116]	; (8001d20 <BSP_LCD_MspInit+0x1a8>)
 8001caa:	f001 fa6f 	bl	800318c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001cae:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001cb8:	230e      	movs	r3, #14
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4818      	ldr	r0, [pc, #96]	; (8001d24 <BSP_LCD_MspInit+0x1ac>)
 8001cc4:	f001 fa62 	bl	800318c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001cc8:	23f7      	movs	r3, #247	; 0xf7
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001cd0:	230e      	movs	r3, #14
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4813      	ldr	r0, [pc, #76]	; (8001d28 <BSP_LCD_MspInit+0x1b0>)
 8001cdc:	f001 fa56 	bl	800318c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cee:	4619      	mov	r1, r3
 8001cf0:	480b      	ldr	r0, [pc, #44]	; (8001d20 <BSP_LCD_MspInit+0x1a8>)
 8001cf2:	f001 fa4b 	bl	800318c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d02:	4619      	mov	r1, r3
 8001d04:	4808      	ldr	r0, [pc, #32]	; (8001d28 <BSP_LCD_MspInit+0x1b0>)
 8001d06:	f001 fa41 	bl	800318c <HAL_GPIO_Init>
}
 8001d0a:	bf00      	nop
 8001d0c:	3740      	adds	r7, #64	; 0x40
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40021800 	.word	0x40021800
 8001d20:	40022000 	.word	0x40022000
 8001d24:	40022400 	.word	0x40022400
 8001d28:	40022800 	.word	0x40022800

08001d2c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <BSP_LCD_ClockConfig+0x34>)
 8001d38:	2208      	movs	r2, #8
 8001d3a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <BSP_LCD_ClockConfig+0x34>)
 8001d3e:	22c0      	movs	r2, #192	; 0xc0
 8001d40:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <BSP_LCD_ClockConfig+0x34>)
 8001d44:	2205      	movs	r2, #5
 8001d46:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <BSP_LCD_ClockConfig+0x34>)
 8001d4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001d50:	4803      	ldr	r0, [pc, #12]	; (8001d60 <BSP_LCD_ClockConfig+0x34>)
 8001d52:	f002 fc45 	bl	80045e0 <HAL_RCCEx_PeriphCLKConfig>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000408 	.word	0x20000408

08001d64 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	603a      	str	r2, [r7, #0]
 8001d6e:	80fb      	strh	r3, [r7, #6]
 8001d70:	460b      	mov	r3, r1
 8001d72:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <DrawChar+0x168>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4953      	ldr	r1, [pc, #332]	; (8001ed0 <DrawChar+0x16c>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3308      	adds	r3, #8
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	88db      	ldrh	r3, [r3, #6]
 8001d92:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001d94:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <DrawChar+0x168>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	494d      	ldr	r1, [pc, #308]	; (8001ed0 <DrawChar+0x16c>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	3308      	adds	r3, #8
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	889b      	ldrh	r3, [r3, #4]
 8001daa:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001dac:	8a3b      	ldrh	r3, [r7, #16]
 8001dae:	3307      	adds	r3, #7
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da00      	bge.n	8001db6 <DrawChar+0x52>
 8001db4:	3307      	adds	r3, #7
 8001db6:	10db      	asrs	r3, r3, #3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	8a3b      	ldrh	r3, [r7, #16]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e076      	b.n	8001eba <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001dcc:	8a3b      	ldrh	r3, [r7, #16]
 8001dce:	3307      	adds	r3, #7
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	da00      	bge.n	8001dd6 <DrawChar+0x72>
 8001dd4:	3307      	adds	r3, #7
 8001dd6:	10db      	asrs	r3, r3, #3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001de6:	8a3b      	ldrh	r3, [r7, #16]
 8001de8:	3307      	adds	r3, #7
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	da00      	bge.n	8001df0 <DrawChar+0x8c>
 8001dee:	3307      	adds	r3, #7
 8001df0:	10db      	asrs	r3, r3, #3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d002      	beq.n	8001dfc <DrawChar+0x98>
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d004      	beq.n	8001e04 <DrawChar+0xa0>
 8001dfa:	e00c      	b.n	8001e16 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	617b      	str	r3, [r7, #20]
      break;
 8001e02:	e016      	b.n	8001e32 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	3201      	adds	r2, #1
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
      break;
 8001e14:	e00d      	b.n	8001e32 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	041a      	lsls	r2, r3, #16
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	4313      	orrs	r3, r2
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	3202      	adds	r2, #2
 8001e2a:	7812      	ldrb	r2, [r2, #0]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
      break;
 8001e30:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	e036      	b.n	8001ea6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001e38:	8a3a      	ldrh	r2, [r7, #16]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad2      	subs	r2, r2, r3
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	4413      	add	r3, r2
 8001e42:	3b01      	subs	r3, #1
 8001e44:	2201      	movs	r2, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d012      	beq.n	8001e7a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	b298      	uxth	r0, r3
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <DrawChar+0x168>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <DrawChar+0x16c>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	88bb      	ldrh	r3, [r7, #4]
 8001e72:	4619      	mov	r1, r3
 8001e74:	f7ff fe1a 	bl	8001aac <BSP_LCD_DrawPixel>
 8001e78:	e012      	b.n	8001ea0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	4413      	add	r3, r2
 8001e82:	b298      	uxth	r0, r3
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <DrawChar+0x168>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4911      	ldr	r1, [pc, #68]	; (8001ed0 <DrawChar+0x16c>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	3304      	adds	r3, #4
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	88bb      	ldrh	r3, [r7, #4]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f7ff fe06 	bl	8001aac <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	8a3b      	ldrh	r3, [r7, #16]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d3c4      	bcc.n	8001e38 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001eae:	88bb      	ldrh	r3, [r7, #4]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	8a7b      	ldrh	r3, [r7, #18]
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d384      	bcc.n	8001dcc <DrawChar+0x68>
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200003ec 	.word	0x200003ec
 8001ed0:	200003f0 	.word	0x200003f0

08001ed4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <LL_FillBuffer+0x88>)
 8001ee4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ee8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <LL_FillBuffer+0x8c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <LL_FillBuffer+0x90>)
 8001ef0:	2134      	movs	r1, #52	; 0x34
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3348      	adds	r3, #72	; 0x48
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d103      	bne.n	8001f08 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <LL_FillBuffer+0x88>)
 8001f02:	2202      	movs	r2, #2
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	e002      	b.n	8001f0e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <LL_FillBuffer+0x88>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <LL_FillBuffer+0x88>)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <LL_FillBuffer+0x88>)
 8001f16:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <LL_FillBuffer+0x94>)
 8001f18:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001f1a:	4810      	ldr	r0, [pc, #64]	; (8001f5c <LL_FillBuffer+0x88>)
 8001f1c:	f000 feaa 	bl	8002c74 <HAL_DMA2D_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d115      	bne.n	8001f52 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <LL_FillBuffer+0x88>)
 8001f2a:	f001 f801 	bl	8002f30 <HAL_DMA2D_ConfigLayer>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10e      	bne.n	8001f52 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69f9      	ldr	r1, [r7, #28]
 8001f3e:	4807      	ldr	r0, [pc, #28]	; (8001f5c <LL_FillBuffer+0x88>)
 8001f40:	f000 fee2 	bl	8002d08 <HAL_DMA2D_Start>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001f4a:	210a      	movs	r1, #10
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <LL_FillBuffer+0x88>)
 8001f4e:	f000 ff06 	bl	8002d5e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200003ac 	.word	0x200003ac
 8001f60:	200003ec 	.word	0x200003ec
 8001f64:	20000304 	.word	0x20000304
 8001f68:	4002b000 	.word	0x4002b000

08001f6c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001f70:	4b29      	ldr	r3, [pc, #164]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001f72:	4a2a      	ldr	r2, [pc, #168]	; (800201c <BSP_SDRAM_Init+0xb0>)
 8001f74:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001f76:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f78:	2202      	movs	r2, #2
 8001f7a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f7e:	2207      	movs	r2, #7
 8001f80:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001f82:	4b27      	ldr	r3, [pc, #156]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f84:	2204      	movs	r2, #4
 8001f86:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f90:	2202      	movs	r2, #2
 8001f92:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f96:	2202      	movs	r2, #2
 8001f98:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fae:	2204      	movs	r2, #4
 8001fb0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fba:	2240      	movs	r2, #64	; 0x40
 8001fbc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fe6:	f000 f87f 	bl	80020e8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001fea:	490d      	ldr	r1, [pc, #52]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001fec:	480a      	ldr	r0, [pc, #40]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fee:	f002 fee7 	bl	8004dc0 <HAL_SDRAM_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <BSP_SDRAM_Init+0xb8>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e002      	b.n	8002006 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <BSP_SDRAM_Init+0xb8>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002006:	f240 6003 	movw	r0, #1539	; 0x603
 800200a:	f000 f80d 	bl	8002028 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <BSP_SDRAM_Init+0xb8>)
 8002010:	781b      	ldrb	r3, [r3, #0]
}
 8002012:	4618      	mov	r0, r3
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000048c 	.word	0x2000048c
 800201c:	a0000140 	.word	0xa0000140
 8002020:	200004c0 	.word	0x200004c0
 8002024:	2000000c 	.word	0x2000000c

08002028 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800203c:	2210      	movs	r2, #16
 800203e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002042:	2201      	movs	r2, #1
 8002044:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800204c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002050:	4923      	ldr	r1, [pc, #140]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002052:	4824      	ldr	r0, [pc, #144]	; (80020e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002054:	f002 fef2 	bl	8004e3c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002058:	2001      	movs	r0, #1
 800205a:	f000 f99b 	bl	8002394 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002060:	2202      	movs	r2, #2
 8002062:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002066:	2210      	movs	r2, #16
 8002068:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800206c:	2201      	movs	r2, #1
 800206e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800207a:	4919      	ldr	r1, [pc, #100]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800207c:	4819      	ldr	r0, [pc, #100]	; (80020e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800207e:	f002 fedd 	bl	8004e3c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002084:	2203      	movs	r2, #3
 8002086:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800208a:	2210      	movs	r2, #16
 800208c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002090:	2208      	movs	r2, #8
 8002092:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800209a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209e:	4910      	ldr	r1, [pc, #64]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020a0:	4810      	ldr	r0, [pc, #64]	; (80020e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80020a2:	f002 fecb 	bl	8004e3c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80020a6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80020aa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020ae:	2204      	movs	r2, #4
 80020b0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020b4:	2210      	movs	r2, #16
 80020b6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020c2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80020c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c8:	4905      	ldr	r1, [pc, #20]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80020cc:	f002 feb6 	bl	8004e3c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4804      	ldr	r0, [pc, #16]	; (80020e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80020d4:	f002 fedd 	bl	8004e92 <HAL_SDRAM_ProgramRefreshRate>
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200004dc 	.word	0x200004dc
 80020e4:	2000048c 	.word	0x2000048c

080020e8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b090      	sub	sp, #64	; 0x40
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80020f2:	4b70      	ldr	r3, [pc, #448]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	4a6f      	ldr	r2, [pc, #444]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6393      	str	r3, [r2, #56]	; 0x38
 80020fe:	4b6d      	ldr	r3, [pc, #436]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800210a:	4b6a      	ldr	r3, [pc, #424]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a69      	ldr	r2, [pc, #420]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b67      	ldr	r3, [pc, #412]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002122:	4b64      	ldr	r3, [pc, #400]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a63      	ldr	r2, [pc, #396]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	623b      	str	r3, [r7, #32]
 8002138:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800213a:	4b5e      	ldr	r3, [pc, #376]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a5d      	ldr	r2, [pc, #372]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002140:	f043 0308 	orr.w	r3, r3, #8
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b5b      	ldr	r3, [pc, #364]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002152:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a57      	ldr	r2, [pc, #348]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002158:	f043 0310 	orr.w	r3, r3, #16
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b55      	ldr	r3, [pc, #340]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800216a:	4b52      	ldr	r3, [pc, #328]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002170:	f043 0320 	orr.w	r3, r3, #32
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002182:	4b4c      	ldr	r3, [pc, #304]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a4b      	ldr	r2, [pc, #300]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b49      	ldr	r3, [pc, #292]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800219a:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a45      	ldr	r2, [pc, #276]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 80021a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <BSP_SDRAM_MspInit+0x1cc>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80021ba:	2302      	movs	r3, #2
 80021bc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80021be:	230c      	movs	r3, #12
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80021c2:	2308      	movs	r3, #8
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80021c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ca:	4619      	mov	r1, r3
 80021cc:	483a      	ldr	r0, [pc, #232]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 80021ce:	f000 ffdd 	bl	800318c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80021d2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80021d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021dc:	4619      	mov	r1, r3
 80021de:	4837      	ldr	r0, [pc, #220]	; (80022bc <BSP_SDRAM_MspInit+0x1d4>)
 80021e0:	f000 ffd4 	bl	800318c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80021e4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80021ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ee:	4619      	mov	r1, r3
 80021f0:	4833      	ldr	r0, [pc, #204]	; (80022c0 <BSP_SDRAM_MspInit+0x1d8>)
 80021f2:	f000 ffcb 	bl	800318c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80021f6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80021fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002200:	4619      	mov	r1, r3
 8002202:	4830      	ldr	r0, [pc, #192]	; (80022c4 <BSP_SDRAM_MspInit+0x1dc>)
 8002204:	f000 ffc2 	bl	800318c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002208:	f248 1333 	movw	r3, #33075	; 0x8133
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800220e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002212:	4619      	mov	r1, r3
 8002214:	482c      	ldr	r0, [pc, #176]	; (80022c8 <BSP_SDRAM_MspInit+0x1e0>)
 8002216:	f000 ffb9 	bl	800318c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800221a:	2328      	movs	r3, #40	; 0x28
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800221e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002222:	4619      	mov	r1, r3
 8002224:	4829      	ldr	r0, [pc, #164]	; (80022cc <BSP_SDRAM_MspInit+0x1e4>)
 8002226:	f000 ffb1 	bl	800318c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800223c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002244:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800224c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002250:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002254:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002258:	2200      	movs	r2, #0
 800225a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 800225e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002262:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002266:	2200      	movs	r2, #0
 8002268:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 800226c:	2203      	movs	r2, #3
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002272:	2200      	movs	r2, #0
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002278:	2200      	movs	r2, #0
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 800227e:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 8002280:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800228e:	4810      	ldr	r0, [pc, #64]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002290:	f000 fb4e 	bl	8002930 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002294:	480e      	ldr	r0, [pc, #56]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 8002296:	f000 fa9d 	bl	80027d4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	210f      	movs	r1, #15
 800229e:	2038      	movs	r0, #56	; 0x38
 80022a0:	f000 f977 	bl	8002592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80022a4:	2038      	movs	r0, #56	; 0x38
 80022a6:	f000 f990 	bl	80025ca <HAL_NVIC_EnableIRQ>
}
 80022aa:	bf00      	nop
 80022ac:	3740      	adds	r7, #64	; 0x40
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	200004ec 	.word	0x200004ec
 80022d4:	40026410 	.word	0x40026410

080022d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022dc:	2003      	movs	r0, #3
 80022de:	f000 f94d 	bl	800257c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f000 f806 	bl	80022f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e8:	f7fe fcd0 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_InitTick+0x54>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_InitTick+0x58>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230a:	fbb3 f3f1 	udiv	r3, r3, r1
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f967 	bl	80025e6 <HAL_SYSTICK_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e00e      	b.n	8002340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b0f      	cmp	r3, #15
 8002326:	d80a      	bhi.n	800233e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002328:	2200      	movs	r2, #0
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002330:	f000 f92f 	bl	8002592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <HAL_InitTick+0x5c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000000 	.word	0x20000000
 800234c:	20000014 	.word	0x20000014
 8002350:	20000010 	.word	0x20000010

08002354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_IncTick+0x20>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_IncTick+0x24>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4413      	add	r3, r2
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_IncTick+0x24>)
 8002366:	6013      	str	r3, [r2, #0]
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000014 	.word	0x20000014
 8002378:	2000054c 	.word	0x2000054c

0800237c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return uwTick;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_GetTick+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	2000054c 	.word	0x2000054c

08002394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff ffee 	bl	800237c <HAL_GetTick>
 80023a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ac:	d005      	beq.n	80023ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_Delay+0x44>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ba:	bf00      	nop
 80023bc:	f7ff ffde 	bl	800237c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d8f7      	bhi.n	80023bc <HAL_Delay+0x28>
  {
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000014 	.word	0x20000014

080023dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <__NVIC_SetPriorityGrouping+0x40>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	4313      	orrs	r3, r2
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <__NVIC_SetPriorityGrouping+0x40>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00
 8002420:	05fa0000 	.word	0x05fa0000

08002424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <__NVIC_GetPriorityGrouping+0x18>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 0307 	and.w	r3, r3, #7
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db0b      	blt.n	800246a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4907      	ldr	r1, [pc, #28]	; (8002478 <__NVIC_EnableIRQ+0x38>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	2001      	movs	r0, #1
 8002462:	fa00 f202 	lsl.w	r2, r0, r2
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	; (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	; (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
         );
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002548:	d301      	bcc.n	800254e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254a:	2301      	movs	r3, #1
 800254c:	e00f      	b.n	800256e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254e:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <SysTick_Config+0x40>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002556:	210f      	movs	r1, #15
 8002558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800255c:	f7ff ff8e 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <SysTick_Config+0x40>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <SysTick_Config+0x40>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010

0800257c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff29 	bl	80023dc <__NVIC_SetPriorityGrouping>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a4:	f7ff ff3e 	bl	8002424 <__NVIC_GetPriorityGrouping>
 80025a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f7ff ff8e 	bl	80024d0 <NVIC_EncodePriority>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff5d 	bl	800247c <__NVIC_SetPriority>
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff31 	bl	8002440 <__NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffa2 	bl	8002538 <SysTick_Config>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e054      	b.n	80026bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7f5b      	ldrb	r3, [r3, #29]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fb5a 	bl	8000cdc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	791b      	ldrb	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <HAL_CRC_Init+0xc4>)
 800263c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0218 	bic.w	r2, r2, #24
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	e00c      	b.n	800266a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	461a      	mov	r2, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f834 	bl	80026c8 <HAL_CRCEx_Polynomial_Set>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e028      	b.n	80026bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	795b      	ldrb	r3, [r3, #5]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d105      	bne.n	800267e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800267a:	611a      	str	r2, [r3, #16]
 800267c:	e004      	b.n	8002688 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6912      	ldr	r2, [r2, #16]
 8002686:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	04c11db7 	.word	0x04c11db7

080026c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80026d8:	231f      	movs	r3, #31
 80026da:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80026dc:	bf00      	nop
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	613a      	str	r2, [r7, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d009      	beq.n	80026fc <HAL_CRCEx_Polynomial_Set+0x34>
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b18      	cmp	r3, #24
 8002700:	d846      	bhi.n	8002790 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002797 	.word	0x08002797
 800270c:	08002791 	.word	0x08002791
 8002710:	08002791 	.word	0x08002791
 8002714:	08002791 	.word	0x08002791
 8002718:	08002791 	.word	0x08002791
 800271c:	08002791 	.word	0x08002791
 8002720:	08002791 	.word	0x08002791
 8002724:	08002791 	.word	0x08002791
 8002728:	08002785 	.word	0x08002785
 800272c:	08002791 	.word	0x08002791
 8002730:	08002791 	.word	0x08002791
 8002734:	08002791 	.word	0x08002791
 8002738:	08002791 	.word	0x08002791
 800273c:	08002791 	.word	0x08002791
 8002740:	08002791 	.word	0x08002791
 8002744:	08002791 	.word	0x08002791
 8002748:	08002779 	.word	0x08002779
 800274c:	08002791 	.word	0x08002791
 8002750:	08002791 	.word	0x08002791
 8002754:	08002791 	.word	0x08002791
 8002758:	08002791 	.word	0x08002791
 800275c:	08002791 	.word	0x08002791
 8002760:	08002791 	.word	0x08002791
 8002764:	08002791 	.word	0x08002791
 8002768:	0800276d 	.word	0x0800276d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2b06      	cmp	r3, #6
 8002770:	d913      	bls.n	800279a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002776:	e010      	b.n	800279a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b07      	cmp	r3, #7
 800277c:	d90f      	bls.n	800279e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002782:	e00c      	b.n	800279e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	d90b      	bls.n	80027a2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800278e:	e008      	b.n	80027a2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	75fb      	strb	r3, [r7, #23]
      break;
 8002794:	e006      	b.n	80027a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002796:	bf00      	nop
 8002798:	e004      	b.n	80027a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800279a:	bf00      	nop
 800279c:	e002      	b.n	80027a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800279e:	bf00      	nop
 80027a0:	e000      	b.n	80027a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80027a2:	bf00      	nop
  }
  if (status == HAL_OK)
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 0118 	bic.w	r1, r3, #24
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff fdcc 	bl	800237c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e099      	b.n	8002924 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002810:	e00f      	b.n	8002832 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002812:	f7ff fdb3 	bl	800237c <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b05      	cmp	r3, #5
 800281e:	d908      	bls.n	8002832 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2203      	movs	r2, #3
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e078      	b.n	8002924 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1e8      	bne.n	8002812 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_DMA_Init+0x158>)
 800284c:	4013      	ands	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2b04      	cmp	r3, #4
 800288a:	d107      	bne.n	800289c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	4313      	orrs	r3, r2
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f023 0307 	bic.w	r3, r3, #7
 80028b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d117      	bne.n	80028f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f94f 	bl	8002b7c <DMA_CheckFifoParam>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028f2:	2301      	movs	r3, #1
 80028f4:	e016      	b.n	8002924 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f906 	bl	8002b10 <DMA_CalcBaseAndBitshift>
 8002904:	4603      	mov	r3, r0
 8002906:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	223f      	movs	r2, #63	; 0x3f
 800290e:	409a      	lsls	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	f010803f 	.word	0xf010803f

08002930 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e050      	b.n	80029e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d101      	bne.n	8002952 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800294e:	2302      	movs	r3, #2
 8002950:	e048      	b.n	80029e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2221      	movs	r2, #33	; 0x21
 8002990:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8bc 	bl	8002b10 <DMA_CalcBaseAndBitshift>
 8002998:	4603      	mov	r3, r0
 800299a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	223f      	movs	r2, #63	; 0x3f
 80029a2:	409a      	lsls	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029fa:	f7ff fcbf 	bl	800237c <HAL_GetTick>
 80029fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d008      	beq.n	8002a1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e052      	b.n	8002ac4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0216 	bic.w	r2, r2, #22
 8002a2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695a      	ldr	r2, [r3, #20]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <HAL_DMA_Abort+0x62>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0208 	bic.w	r2, r2, #8
 8002a5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6e:	e013      	b.n	8002a98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a70:	f7ff fc84 	bl	800237c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d90c      	bls.n	8002a98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2203      	movs	r2, #3
 8002a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e015      	b.n	8002ac4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e4      	bne.n	8002a70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	223f      	movs	r2, #63	; 0x3f
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d004      	beq.n	8002aea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00c      	b.n	8002b04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2205      	movs	r2, #5
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	3b10      	subs	r3, #16
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <DMA_CalcBaseAndBitshift+0x60>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <DMA_CalcBaseAndBitshift+0x64>)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d908      	bls.n	8002b50 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <DMA_CalcBaseAndBitshift+0x68>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	1d1a      	adds	r2, r3, #4
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	659a      	str	r2, [r3, #88]	; 0x58
 8002b4e:	e006      	b.n	8002b5e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <DMA_CalcBaseAndBitshift+0x68>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	aaaaaaab 	.word	0xaaaaaaab
 8002b74:	080085c4 	.word	0x080085c4
 8002b78:	fffffc00 	.word	0xfffffc00

08002b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11f      	bne.n	8002bd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d856      	bhi.n	8002c4a <DMA_CheckFifoParam+0xce>
 8002b9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <DMA_CheckFifoParam+0x28>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bc7 	.word	0x08002bc7
 8002bac:	08002bb5 	.word	0x08002bb5
 8002bb0:	08002c4b 	.word	0x08002c4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d046      	beq.n	8002c4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e043      	b.n	8002c4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bce:	d140      	bne.n	8002c52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd4:	e03d      	b.n	8002c52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bde:	d121      	bne.n	8002c24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d837      	bhi.n	8002c56 <DMA_CheckFifoParam+0xda>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <DMA_CheckFifoParam+0x70>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c03 	.word	0x08002c03
 8002bf4:	08002bfd 	.word	0x08002bfd
 8002bf8:	08002c15 	.word	0x08002c15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e030      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d025      	beq.n	8002c5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c12:	e022      	b.n	8002c5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c1c:	d11f      	bne.n	8002c5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c22:	e01c      	b.n	8002c5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d903      	bls.n	8002c32 <DMA_CheckFifoParam+0xb6>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d003      	beq.n	8002c38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c30:	e018      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      break;
 8002c36:	e015      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      break;
 8002c48:	e00b      	b.n	8002c62 <DMA_CheckFifoParam+0xe6>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e00a      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e008      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
 8002c54:	e006      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
 8002c58:	e004      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e002      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
    }
  } 
  
  return status; 
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop

08002c74 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e039      	b.n	8002cfa <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe f83e 	bl	8000d1c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc4:	f023 0107 	bic.w	r1, r3, #7
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_DMA2D_Init+0x90>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68d1      	ldr	r1, [r2, #12]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	ffffc000 	.word	0xffffc000

08002d08 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_DMA2D_Start+0x1c>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e018      	b.n	8002d56 <HAL_DMA2D_Start+0x4e>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f988 	bl	8003054 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d056      	beq.n	8002e28 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d7a:	f7ff faff 	bl	800237c <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d80:	e04b      	b.n	8002e1a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d023      	beq.n	8002ddc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da2:	f043 0202 	orr.w	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2221      	movs	r2, #33	; 0x21
 8002dc6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2204      	movs	r2, #4
 8002dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0a5      	b.n	8002f28 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de2:	d01a      	beq.n	8002e1a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002de4:	f7ff faca 	bl	800237c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d302      	bcc.n	8002dfa <HAL_DMA2D_PollForTransfer+0x9c>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	f043 0220 	orr.w	r2, r3, #32
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e086      	b.n	8002f28 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ac      	beq.n	8002d82 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d061      	beq.n	8002f0e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e4a:	f7ff fa97 	bl	800237c <HAL_GetTick>
 8002e4e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e50:	e056      	b.n	8002f00 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d02e      	beq.n	8002ec2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	f043 0204 	orr.w	r2, r3, #4
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	f043 0202 	orr.w	r2, r3, #2
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2229      	movs	r2, #41	; 0x29
 8002eac:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e032      	b.n	8002f28 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec8:	d01a      	beq.n	8002f00 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7ff fa57 	bl	800237c <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <HAL_DMA2D_PollForTransfer+0x182>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10f      	bne.n	8002f00 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e013      	b.n	8002f28 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0a1      	beq.n	8002e52 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2212      	movs	r2, #18
 8002f14:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_DMA2D_ConfigLayer+0x20>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e079      	b.n	8003044 <HAL_DMA2D_ConfigLayer+0x114>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	3318      	adds	r3, #24
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002f7a:	4b35      	ldr	r3, [pc, #212]	; (8003050 <HAL_DMA2D_ConfigLayer+0x120>)
 8002f7c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b0a      	cmp	r3, #10
 8002f84:	d003      	beq.n	8002f8e <HAL_DMA2D_ConfigLayer+0x5e>
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b09      	cmp	r3, #9
 8002f8c:	d107      	bne.n	8002f9e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e005      	b.n	8002faa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	061b      	lsls	r3, r3, #24
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d120      	bne.n	8002ff2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	ea02 0103 	and.w	r1, r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b0a      	cmp	r3, #10
 8002fd8:	d003      	beq.n	8002fe2 <HAL_DMA2D_ConfigLayer+0xb2>
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b09      	cmp	r3, #9
 8002fe0:	d127      	bne.n	8003032 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff0:	e01f      	b.n	8003032 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	ea02 0103 	and.w	r1, r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	430a      	orrs	r2, r1
 8003008:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b0a      	cmp	r3, #10
 800301a:	d003      	beq.n	8003024 <HAL_DMA2D_ConfigLayer+0xf4>
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b09      	cmp	r3, #9
 8003022:	d106      	bne.n	8003032 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003030:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	ff03000f 	.word	0xff03000f

08003054 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003054:	b480      	push	{r7}
 8003056:	b08b      	sub	sp, #44	; 0x2c
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	041a      	lsls	r2, r3, #16
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	431a      	orrs	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800308c:	d174      	bne.n	8003178 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003094:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800309c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030a4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d108      	bne.n	80030c6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	4313      	orrs	r3, r2
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	e053      	b.n	800316e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d106      	bne.n	80030dc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	e048      	b.n	800316e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d111      	bne.n	8003108 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	0cdb      	lsrs	r3, r3, #19
 80030e8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	0a9b      	lsrs	r3, r3, #10
 80030ee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	08db      	lsrs	r3, r3, #3
 80030f4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	02db      	lsls	r3, r3, #11
 80030fe:	4313      	orrs	r3, r2
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	e032      	b.n	800316e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d117      	bne.n	8003140 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	0fdb      	lsrs	r3, r3, #31
 8003114:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	0cdb      	lsrs	r3, r3, #19
 800311a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	0adb      	lsrs	r3, r3, #11
 8003120:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	08db      	lsrs	r3, r3, #3
 8003126:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	029b      	lsls	r3, r3, #10
 8003130:	431a      	orrs	r2, r3
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	03db      	lsls	r3, r3, #15
 8003136:	4313      	orrs	r3, r2
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	e016      	b.n	800316e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	0f1b      	lsrs	r3, r3, #28
 8003144:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	0d1b      	lsrs	r3, r3, #20
 800314a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	0b1b      	lsrs	r3, r3, #12
 8003150:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	011a      	lsls	r2, r3, #4
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	431a      	orrs	r2, r3
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	031b      	lsls	r3, r3, #12
 8003166:	4313      	orrs	r3, r2
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003174:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003176:	e003      	b.n	8003180 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	60da      	str	r2, [r3, #12]
}
 8003180:	bf00      	nop
 8003182:	372c      	adds	r7, #44	; 0x2c
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	; 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e175      	b.n	8003498 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031ac:	2201      	movs	r2, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	f040 8164 	bne.w	8003492 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d005      	beq.n	80031e2 <HAL_GPIO_Init+0x56>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d130      	bne.n	8003244 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	2203      	movs	r2, #3
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003218:	2201      	movs	r2, #1
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 0201 	and.w	r2, r3, #1
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b03      	cmp	r3, #3
 800324e:	d017      	beq.n	8003280 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	2203      	movs	r2, #3
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d123      	bne.n	80032d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	08da      	lsrs	r2, r3, #3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3208      	adds	r2, #8
 8003294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	220f      	movs	r2, #15
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	08da      	lsrs	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3208      	adds	r2, #8
 80032ce:	69b9      	ldr	r1, [r7, #24]
 80032d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	2203      	movs	r2, #3
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0203 	and.w	r2, r3, #3
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80be 	beq.w	8003492 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003316:	4b66      	ldr	r3, [pc, #408]	; (80034b0 <HAL_GPIO_Init+0x324>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	4a65      	ldr	r2, [pc, #404]	; (80034b0 <HAL_GPIO_Init+0x324>)
 800331c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003320:	6453      	str	r3, [r2, #68]	; 0x44
 8003322:	4b63      	ldr	r3, [pc, #396]	; (80034b0 <HAL_GPIO_Init+0x324>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800332e:	4a61      	ldr	r2, [pc, #388]	; (80034b4 <HAL_GPIO_Init+0x328>)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a58      	ldr	r2, [pc, #352]	; (80034b8 <HAL_GPIO_Init+0x32c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d037      	beq.n	80033ca <HAL_GPIO_Init+0x23e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a57      	ldr	r2, [pc, #348]	; (80034bc <HAL_GPIO_Init+0x330>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d031      	beq.n	80033c6 <HAL_GPIO_Init+0x23a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a56      	ldr	r2, [pc, #344]	; (80034c0 <HAL_GPIO_Init+0x334>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d02b      	beq.n	80033c2 <HAL_GPIO_Init+0x236>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a55      	ldr	r2, [pc, #340]	; (80034c4 <HAL_GPIO_Init+0x338>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d025      	beq.n	80033be <HAL_GPIO_Init+0x232>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a54      	ldr	r2, [pc, #336]	; (80034c8 <HAL_GPIO_Init+0x33c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01f      	beq.n	80033ba <HAL_GPIO_Init+0x22e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a53      	ldr	r2, [pc, #332]	; (80034cc <HAL_GPIO_Init+0x340>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d019      	beq.n	80033b6 <HAL_GPIO_Init+0x22a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_GPIO_Init+0x344>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_GPIO_Init+0x226>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a51      	ldr	r2, [pc, #324]	; (80034d4 <HAL_GPIO_Init+0x348>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00d      	beq.n	80033ae <HAL_GPIO_Init+0x222>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a50      	ldr	r2, [pc, #320]	; (80034d8 <HAL_GPIO_Init+0x34c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <HAL_GPIO_Init+0x21e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4f      	ldr	r2, [pc, #316]	; (80034dc <HAL_GPIO_Init+0x350>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_GPIO_Init+0x21a>
 80033a2:	2309      	movs	r3, #9
 80033a4:	e012      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033a6:	230a      	movs	r3, #10
 80033a8:	e010      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033aa:	2308      	movs	r3, #8
 80033ac:	e00e      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e00c      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033b2:	2306      	movs	r3, #6
 80033b4:	e00a      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033b6:	2305      	movs	r3, #5
 80033b8:	e008      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ba:	2304      	movs	r3, #4
 80033bc:	e006      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033be:	2303      	movs	r3, #3
 80033c0:	e004      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e002      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_GPIO_Init+0x240>
 80033ca:	2300      	movs	r3, #0
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	f002 0203 	and.w	r2, r2, #3
 80033d2:	0092      	lsls	r2, r2, #2
 80033d4:	4093      	lsls	r3, r2
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033dc:	4935      	ldr	r1, [pc, #212]	; (80034b4 <HAL_GPIO_Init+0x328>)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	3302      	adds	r3, #2
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ea:	4b3d      	ldr	r3, [pc, #244]	; (80034e0 <HAL_GPIO_Init+0x354>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800340e:	4a34      	ldr	r2, [pc, #208]	; (80034e0 <HAL_GPIO_Init+0x354>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <HAL_GPIO_Init+0x354>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003438:	4a29      	ldr	r2, [pc, #164]	; (80034e0 <HAL_GPIO_Init+0x354>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800343e:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_GPIO_Init+0x354>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003462:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <HAL_GPIO_Init+0x354>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_GPIO_Init+0x354>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800348c:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <HAL_GPIO_Init+0x354>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3301      	adds	r3, #1
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b0f      	cmp	r3, #15
 800349c:	f67f ae86 	bls.w	80031ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40020000 	.word	0x40020000
 80034bc:	40020400 	.word	0x40020400
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020c00 	.word	0x40020c00
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40021400 	.word	0x40021400
 80034d0:	40021800 	.word	0x40021800
 80034d4:	40021c00 	.word	0x40021c00
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40022400 	.word	0x40022400
 80034e0:	40013c00 	.word	0x40013c00

080034e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
 80034f0:	4613      	mov	r3, r2
 80034f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f4:	787b      	ldrb	r3, [r7, #1]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003500:	e003      	b.n	800350a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	041a      	lsls	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0c7      	b.n	80036c2 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fd fc08 	bl	8000d5c <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003562:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6999      	ldr	r1, [r3, #24]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003578:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6899      	ldr	r1, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4b4e      	ldr	r3, [pc, #312]	; (80036cc <HAL_LTDC_Init+0x1b4>)
 8003594:	400b      	ands	r3, r1
 8003596:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68d9      	ldr	r1, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b42      	ldr	r3, [pc, #264]	; (80036cc <HAL_LTDC_Init+0x1b4>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	041b      	lsls	r3, r3, #16
 80035cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68d9      	ldr	r1, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1a      	ldr	r2, [r3, #32]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6919      	ldr	r1, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_LTDC_Init+0x1b4>)
 80035f0:	400b      	ands	r3, r1
 80035f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6919      	ldr	r1, [r3, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6959      	ldr	r1, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_LTDC_Init+0x1b4>)
 800361e:	400b      	ands	r3, r1
 8003620:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6959      	ldr	r1, [r3, #20]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0204 	orr.w	r2, r2, #4
 800368e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0202 	orr.w	r2, r2, #2
 800369e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	f000f800 	.word	0xf000f800

080036d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80036d0:	b5b0      	push	{r4, r5, r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_LTDC_ConfigLayer+0x1a>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e02c      	b.n	8003744 <HAL_LTDC_ConfigLayer+0x74>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2134      	movs	r1, #52	; 0x34
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4614      	mov	r4, r2
 800370e:	461d      	mov	r5, r3
 8003710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800371a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f81f 	bl	8003768 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2201      	movs	r2, #1
 8003730:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bdb0      	pop	{r4, r5, r7, pc}

0800374c <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800375a:	b2db      	uxtb	r3, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003768:	b480      	push	{r7}
 800376a:	b089      	sub	sp, #36	; 0x24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003790:	4413      	add	r3, r2
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	01db      	lsls	r3, r3, #7
 80037a0:	4413      	add	r3, r2
 80037a2:	3384      	adds	r3, #132	; 0x84
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	4611      	mov	r1, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	01d2      	lsls	r2, r2, #7
 80037b0:	440a      	add	r2, r1
 80037b2:	3284      	adds	r2, #132	; 0x84
 80037b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80037b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ca:	4413      	add	r3, r2
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4619      	mov	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	01db      	lsls	r3, r3, #7
 80037d8:	440b      	add	r3, r1
 80037da:	3384      	adds	r3, #132	; 0x84
 80037dc:	4619      	mov	r1, r3
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f2:	4413      	add	r3, r2
 80037f4:	041b      	lsls	r3, r3, #16
 80037f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	01db      	lsls	r3, r3, #7
 8003802:	4413      	add	r3, r2
 8003804:	3384      	adds	r3, #132	; 0x84
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	4611      	mov	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	01d2      	lsls	r2, r2, #7
 8003812:	440a      	add	r2, r1
 8003814:	3284      	adds	r2, #132	; 0x84
 8003816:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800381a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800382a:	4413      	add	r3, r2
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	01db      	lsls	r3, r3, #7
 8003838:	440b      	add	r3, r1
 800383a:	3384      	adds	r3, #132	; 0x84
 800383c:	4619      	mov	r1, r3
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4313      	orrs	r3, r2
 8003842:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	01db      	lsls	r3, r3, #7
 800384e:	4413      	add	r3, r2
 8003850:	3384      	adds	r3, #132	; 0x84
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	4611      	mov	r1, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	01d2      	lsls	r2, r2, #7
 800385e:	440a      	add	r2, r1
 8003860:	3284      	adds	r2, #132	; 0x84
 8003862:	f023 0307 	bic.w	r3, r3, #7
 8003866:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	01db      	lsls	r3, r3, #7
 8003872:	4413      	add	r3, r2
 8003874:	3384      	adds	r3, #132	; 0x84
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	061b      	lsls	r3, r3, #24
 8003898:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	01db      	lsls	r3, r3, #7
 80038a4:	4413      	add	r3, r2
 80038a6:	3384      	adds	r3, #132	; 0x84
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	01db      	lsls	r3, r3, #7
 80038b4:	4413      	add	r3, r2
 80038b6:	3384      	adds	r3, #132	; 0x84
 80038b8:	461a      	mov	r2, r3
 80038ba:	2300      	movs	r3, #0
 80038bc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038c4:	461a      	mov	r2, r3
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4619      	mov	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	01db      	lsls	r3, r3, #7
 80038d8:	440b      	add	r3, r1
 80038da:	3384      	adds	r3, #132	; 0x84
 80038dc:	4619      	mov	r1, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	01db      	lsls	r3, r3, #7
 80038ee:	4413      	add	r3, r2
 80038f0:	3384      	adds	r3, #132	; 0x84
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	4611      	mov	r1, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	01d2      	lsls	r2, r2, #7
 80038fe:	440a      	add	r2, r1
 8003900:	3284      	adds	r2, #132	; 0x84
 8003902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003906:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	01db      	lsls	r3, r3, #7
 8003912:	4413      	add	r3, r2
 8003914:	3384      	adds	r3, #132	; 0x84
 8003916:	461a      	mov	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	01db      	lsls	r3, r3, #7
 8003928:	4413      	add	r3, r2
 800392a:	3384      	adds	r3, #132	; 0x84
 800392c:	69da      	ldr	r2, [r3, #28]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4619      	mov	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	01db      	lsls	r3, r3, #7
 8003938:	440b      	add	r3, r1
 800393a:	3384      	adds	r3, #132	; 0x84
 800393c:	4619      	mov	r1, r3
 800393e:	4b58      	ldr	r3, [pc, #352]	; (8003aa0 <LTDC_SetConfig+0x338>)
 8003940:	4013      	ands	r3, r2
 8003942:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	68f9      	ldr	r1, [r7, #12]
 800394e:	6809      	ldr	r1, [r1, #0]
 8003950:	4608      	mov	r0, r1
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	01c9      	lsls	r1, r1, #7
 8003956:	4401      	add	r1, r0
 8003958:	3184      	adds	r1, #132	; 0x84
 800395a:	4313      	orrs	r3, r2
 800395c:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	01db      	lsls	r3, r3, #7
 8003968:	4413      	add	r3, r2
 800396a:	3384      	adds	r3, #132	; 0x84
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	01db      	lsls	r3, r3, #7
 8003978:	4413      	add	r3, r2
 800397a:	3384      	adds	r3, #132	; 0x84
 800397c:	461a      	mov	r2, r3
 800397e:	2300      	movs	r3, #0
 8003980:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	01db      	lsls	r3, r3, #7
 800398c:	4413      	add	r3, r2
 800398e:	3384      	adds	r3, #132	; 0x84
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 80039a0:	2304      	movs	r3, #4
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	e01b      	b.n	80039de <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d102      	bne.n	80039b4 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 80039ae:	2303      	movs	r3, #3
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e014      	b.n	80039de <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d00b      	beq.n	80039d4 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d007      	beq.n	80039d4 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d003      	beq.n	80039d4 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80039d0:	2b07      	cmp	r3, #7
 80039d2:	d102      	bne.n	80039da <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 80039d4:	2302      	movs	r3, #2
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	e001      	b.n	80039de <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 80039da:	2301      	movs	r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	01db      	lsls	r3, r3, #7
 80039e8:	4413      	add	r3, r2
 80039ea:	3384      	adds	r3, #132	; 0x84
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	4611      	mov	r1, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	01d2      	lsls	r2, r2, #7
 80039f8:	440a      	add	r2, r1
 80039fa:	3284      	adds	r2, #132	; 0x84
 80039fc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003a00:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	041a      	lsls	r2, r3, #16
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	1acb      	subs	r3, r1, r3
 8003a18:	69f9      	ldr	r1, [r7, #28]
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	3303      	adds	r3, #3
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	6809      	ldr	r1, [r1, #0]
 8003a24:	4608      	mov	r0, r1
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	01c9      	lsls	r1, r1, #7
 8003a2a:	4401      	add	r1, r0
 8003a2c:	3184      	adds	r1, #132	; 0x84
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	01db      	lsls	r3, r3, #7
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3384      	adds	r3, #132	; 0x84
 8003a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4619      	mov	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	01db      	lsls	r3, r3, #7
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3384      	adds	r3, #132	; 0x84
 8003a50:	4619      	mov	r1, r3
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <LTDC_SetConfig+0x33c>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	01db      	lsls	r3, r3, #7
 8003a62:	4413      	add	r3, r2
 8003a64:	3384      	adds	r3, #132	; 0x84
 8003a66:	461a      	mov	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	01db      	lsls	r3, r3, #7
 8003a78:	4413      	add	r3, r2
 8003a7a:	3384      	adds	r3, #132	; 0x84
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	4611      	mov	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	01d2      	lsls	r2, r2, #7
 8003a88:	440a      	add	r2, r1
 8003a8a:	3284      	adds	r2, #132	; 0x84
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6013      	str	r3, [r2, #0]
}
 8003a92:	bf00      	nop
 8003a94:	3724      	adds	r7, #36	; 0x24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	fffff8f8 	.word	0xfffff8f8
 8003aa4:	fffff800 	.word	0xfffff800

08003aa8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4a22      	ldr	r2, [pc, #136]	; (8003b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6413      	str	r3, [r2, #64]	; 0x40
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003aca:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad6:	f7fe fc51 	bl	800237c <HAL_GetTick>
 8003ada:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003adc:	e009      	b.n	8003af2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ade:	f7fe fc4d 	bl	800237c <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aec:	d901      	bls.n	8003af2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e022      	b.n	8003b38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003af2:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afe:	d1ee      	bne.n	8003ade <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b00:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a0f      	ldr	r2, [pc, #60]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b0c:	f7fe fc36 	bl	800237c <HAL_GetTick>
 8003b10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b12:	e009      	b.n	8003b28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b14:	f7fe fc32 	bl	800237c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b22:	d901      	bls.n	8003b28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e007      	b.n	8003b38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b34:	d1ee      	bne.n	8003b14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40007000 	.word	0x40007000

08003b48 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b50:	f7fe fc14 	bl	800237c <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e067      	b.n	8003c30 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fd fa47 	bl	8001008 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003b7a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f85e 	bl	8003c40 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	021a      	lsls	r2, r3, #8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2120      	movs	r1, #32
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f856 	bl	8003c5c <QSPI_WaitFlagStateUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003bb4:	7afb      	ldrb	r3, [r7, #11]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d135      	bne.n	8003c26 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_QSPI_Init+0xf0>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6852      	ldr	r2, [r2, #4]
 8003bc8:	0611      	lsls	r1, r2, #24
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68d2      	ldr	r2, [r2, #12]
 8003bce:	4311      	orrs	r1, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	69d2      	ldr	r2, [r2, #28]
 8003bd4:	4311      	orrs	r1, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6a12      	ldr	r2, [r2, #32]
 8003bda:	4311      	orrs	r1, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <HAL_QSPI_Init+0xf4>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6912      	ldr	r2, [r2, #16]
 8003bf2:	0411      	lsls	r1, r2, #16
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6952      	ldr	r2, [r2, #20]
 8003bf8:	4311      	orrs	r1, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6992      	ldr	r2, [r2, #24]
 8003bfe:	4311      	orrs	r1, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	00ffff2f 	.word	0x00ffff2f
 8003c3c:	ffe0f8fe 	.word	0xffe0f8fe

08003c40 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003c6c:	e01a      	b.n	8003ca4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c74:	d016      	beq.n	8003ca4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c76:	f7fe fb81 	bl	800237c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d302      	bcc.n	8003c8c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10b      	bne.n	8003ca4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c98:	f043 0201 	orr.w	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e00e      	b.n	8003cc2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bf14      	ite	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	2300      	moveq	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1d6      	bne.n	8003c6e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e291      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8087 	beq.w	8003dfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf0:	4b96      	ldr	r3, [pc, #600]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d00c      	beq.n	8003d16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfc:	4b93      	ldr	r3, [pc, #588]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d112      	bne.n	8003d2e <HAL_RCC_OscConfig+0x62>
 8003d08:	4b90      	ldr	r3, [pc, #576]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d14:	d10b      	bne.n	8003d2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d16:	4b8d      	ldr	r3, [pc, #564]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d06c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x130>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d168      	bne.n	8003dfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e26b      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d36:	d106      	bne.n	8003d46 <HAL_RCC_OscConfig+0x7a>
 8003d38:	4b84      	ldr	r3, [pc, #528]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a83      	ldr	r2, [pc, #524]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	e02e      	b.n	8003da4 <HAL_RCC_OscConfig+0xd8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x9c>
 8003d4e:	4b7f      	ldr	r3, [pc, #508]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7e      	ldr	r2, [pc, #504]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	4b7c      	ldr	r3, [pc, #496]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7b      	ldr	r2, [pc, #492]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e01d      	b.n	8003da4 <HAL_RCC_OscConfig+0xd8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0xc0>
 8003d72:	4b76      	ldr	r3, [pc, #472]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a75      	ldr	r2, [pc, #468]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b73      	ldr	r3, [pc, #460]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a72      	ldr	r2, [pc, #456]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0xd8>
 8003d8c:	4b6f      	ldr	r3, [pc, #444]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6e      	ldr	r2, [pc, #440]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6b      	ldr	r2, [pc, #428]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d013      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe fae6 	bl	800237c <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db4:	f7fe fae2 	bl	800237c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	; 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e21f      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0xe8>
 8003dd2:	e014      	b.n	8003dfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fad2 	bl	800237c <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fe face 	bl	800237c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e20b      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	4b57      	ldr	r3, [pc, #348]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x110>
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d069      	beq.n	8003ede <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e0a:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e16:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d11c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x190>
 8003e22:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d116      	bne.n	8003e5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	4b47      	ldr	r3, [pc, #284]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_RCC_OscConfig+0x17a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e1df      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	4b41      	ldr	r3, [pc, #260]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	493d      	ldr	r1, [pc, #244]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5a:	e040      	b.n	8003ede <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d023      	beq.n	8003eac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e64:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a38      	ldr	r2, [pc, #224]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fe fa84 	bl	800237c <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e78:	f7fe fa80 	bl	800237c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e1bd      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8a:	4b30      	ldr	r3, [pc, #192]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e96:	4b2d      	ldr	r3, [pc, #180]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4929      	ldr	r1, [pc, #164]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
 8003eaa:	e018      	b.n	8003ede <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eac:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fe fa60 	bl	800237c <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec0:	f7fe fa5c 	bl	800237c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e199      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d038      	beq.n	8003f5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d019      	beq.n	8003f26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef6:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efe:	f7fe fa3d 	bl	800237c <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f06:	f7fe fa39 	bl	800237c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e176      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x23a>
 8003f24:	e01a      	b.n	8003f5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f26:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2a:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <HAL_RCC_OscConfig+0x280>)
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f32:	f7fe fa23 	bl	800237c <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3a:	f7fe fa1f 	bl	800237c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d903      	bls.n	8003f50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e15c      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
 8003f4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f50:	4b91      	ldr	r3, [pc, #580]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8003f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1ee      	bne.n	8003f3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80a4 	beq.w	80040b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6a:	4b8b      	ldr	r3, [pc, #556]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10d      	bne.n	8003f92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f76:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a87      	ldr	r2, [pc, #540]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
 8003f82:	4b85      	ldr	r3, [pc, #532]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f92:	4b82      	ldr	r3, [pc, #520]	; (800419c <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d118      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f9e:	4b7f      	ldr	r3, [pc, #508]	; (800419c <HAL_RCC_OscConfig+0x4d0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a7e      	ldr	r2, [pc, #504]	; (800419c <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003faa:	f7fe f9e7 	bl	800237c <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7fe f9e3 	bl	800237c <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b64      	cmp	r3, #100	; 0x64
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e120      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc4:	4b75      	ldr	r3, [pc, #468]	; (800419c <HAL_RCC_OscConfig+0x4d0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x31a>
 8003fd8:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	4a6e      	ldr	r2, [pc, #440]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe4:	e02d      	b.n	8004042 <HAL_RCC_OscConfig+0x376>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x33c>
 8003fee:	4b6a      	ldr	r3, [pc, #424]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a69      	ldr	r2, [pc, #420]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffa:	4b67      	ldr	r3, [pc, #412]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a66      	ldr	r2, [pc, #408]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004000:	f023 0304 	bic.w	r3, r3, #4
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
 8004006:	e01c      	b.n	8004042 <HAL_RCC_OscConfig+0x376>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b05      	cmp	r3, #5
 800400e:	d10c      	bne.n	800402a <HAL_RCC_OscConfig+0x35e>
 8004010:	4b61      	ldr	r3, [pc, #388]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a60      	ldr	r2, [pc, #384]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4a5d      	ldr	r2, [pc, #372]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6713      	str	r3, [r2, #112]	; 0x70
 8004028:	e00b      	b.n	8004042 <HAL_RCC_OscConfig+0x376>
 800402a:	4b5b      	ldr	r3, [pc, #364]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a5a      	ldr	r2, [pc, #360]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
 8004036:	4b58      	ldr	r3, [pc, #352]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a57      	ldr	r2, [pc, #348]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 800403c:	f023 0304 	bic.w	r3, r3, #4
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d015      	beq.n	8004076 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404a:	f7fe f997 	bl	800237c <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004050:	e00a      	b.n	8004068 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004052:	f7fe f993 	bl	800237c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e0ce      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004068:	4b4b      	ldr	r3, [pc, #300]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ee      	beq.n	8004052 <HAL_RCC_OscConfig+0x386>
 8004074:	e014      	b.n	80040a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fe f981 	bl	800237c <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fe f97d 	bl	800237c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0b8      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004094:	4b40      	ldr	r3, [pc, #256]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ee      	bne.n	800407e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d105      	bne.n	80040b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a6:	4b3c      	ldr	r3, [pc, #240]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	4a3b      	ldr	r2, [pc, #236]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80a4 	beq.w	8004204 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040bc:	4b36      	ldr	r3, [pc, #216]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 030c 	and.w	r3, r3, #12
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d06b      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d149      	bne.n	8004164 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d0:	4b31      	ldr	r3, [pc, #196]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a30      	ldr	r2, [pc, #192]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 80040d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fe f94e 	bl	800237c <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fe f94a 	bl	800237c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e087      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	4b28      	ldr	r3, [pc, #160]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69da      	ldr	r2, [r3, #28]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	019b      	lsls	r3, r3, #6
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	3b01      	subs	r3, #1
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	061b      	lsls	r3, r3, #24
 8004126:	4313      	orrs	r3, r2
 8004128:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 800412a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800412e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a18      	ldr	r2, [pc, #96]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800413a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fe f91e 	bl	800237c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004144:	f7fe f91a 	bl	800237c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e057      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x478>
 8004162:	e04f      	b.n	8004204 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a0b      	ldr	r2, [pc, #44]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 800416a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fe f904 	bl	800237c <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004178:	f7fe f900 	bl	800237c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e03d      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x4ac>
 8004196:	e035      	b.n	8004204 <HAL_RCC_OscConfig+0x538>
 8004198:	40023800 	.word	0x40023800
 800419c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041a0:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <HAL_RCC_OscConfig+0x544>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d028      	beq.n	8004200 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d121      	bne.n	8004200 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d11a      	bne.n	8004200 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d8:	4293      	cmp	r3, r2
 80041da:	d111      	bne.n	8004200 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	3b01      	subs	r3, #1
 80041ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800

08004214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0d0      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800422c:	4b6a      	ldr	r3, [pc, #424]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d910      	bls.n	800425c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b67      	ldr	r3, [pc, #412]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 020f 	bic.w	r2, r3, #15
 8004242:	4965      	ldr	r1, [pc, #404]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	4313      	orrs	r3, r2
 8004248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800424a:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0b8      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d020      	beq.n	80042aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004274:	4b59      	ldr	r3, [pc, #356]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a58      	ldr	r2, [pc, #352]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800427e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800428c:	4b53      	ldr	r3, [pc, #332]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a52      	ldr	r2, [pc, #328]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 8004292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004296:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004298:	4b50      	ldr	r3, [pc, #320]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	494d      	ldr	r1, [pc, #308]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d040      	beq.n	8004338 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d115      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e07f      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d6:	4b41      	ldr	r3, [pc, #260]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e073      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	4b3d      	ldr	r3, [pc, #244]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e06b      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f6:	4b39      	ldr	r3, [pc, #228]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f023 0203 	bic.w	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4936      	ldr	r1, [pc, #216]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004308:	f7fe f838 	bl	800237c <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	e00a      	b.n	8004326 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004310:	f7fe f834 	bl	800237c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e053      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 020c 	and.w	r2, r3, #12
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	429a      	cmp	r2, r3
 8004336:	d1eb      	bne.n	8004310 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004338:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d210      	bcs.n	8004368 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 020f 	bic.w	r2, r3, #15
 800434e:	4922      	ldr	r1, [pc, #136]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e032      	b.n	80043ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4916      	ldr	r1, [pc, #88]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	490e      	ldr	r1, [pc, #56]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043a6:	f000 f821 	bl	80043ec <HAL_RCC_GetSysClockFreq>
 80043aa:	4602      	mov	r2, r0
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	490a      	ldr	r1, [pc, #40]	; (80043e0 <HAL_RCC_ClockConfig+0x1cc>)
 80043b8:	5ccb      	ldrb	r3, [r1, r3]
 80043ba:	fa22 f303 	lsr.w	r3, r2, r3
 80043be:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <HAL_RCC_ClockConfig+0x1d0>)
 80043c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_ClockConfig+0x1d4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fd ff94 	bl	80022f4 <HAL_InitTick>

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40023c00 	.word	0x40023c00
 80043dc:	40023800 	.word	0x40023800
 80043e0:	08006af4 	.word	0x08006af4
 80043e4:	20000000 	.word	0x20000000
 80043e8:	20000010 	.word	0x20000010

080043ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f0:	b090      	sub	sp, #64	; 0x40
 80043f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	637b      	str	r3, [r7, #52]	; 0x34
 80043f8:	2300      	movs	r3, #0
 80043fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043fc:	2300      	movs	r3, #0
 80043fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004404:	4b59      	ldr	r3, [pc, #356]	; (800456c <HAL_RCC_GetSysClockFreq+0x180>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	2b08      	cmp	r3, #8
 800440e:	d00d      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x40>
 8004410:	2b08      	cmp	r3, #8
 8004412:	f200 80a1 	bhi.w	8004558 <HAL_RCC_GetSysClockFreq+0x16c>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x34>
 800441a:	2b04      	cmp	r3, #4
 800441c:	d003      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0x3a>
 800441e:	e09b      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004420:	4b53      	ldr	r3, [pc, #332]	; (8004570 <HAL_RCC_GetSysClockFreq+0x184>)
 8004422:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004424:	e09b      	b.n	800455e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004426:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_GetSysClockFreq+0x188>)
 8004428:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800442a:	e098      	b.n	800455e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800442c:	4b4f      	ldr	r3, [pc, #316]	; (800456c <HAL_RCC_GetSysClockFreq+0x180>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004434:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004436:	4b4d      	ldr	r3, [pc, #308]	; (800456c <HAL_RCC_GetSysClockFreq+0x180>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d028      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004442:	4b4a      	ldr	r3, [pc, #296]	; (800456c <HAL_RCC_GetSysClockFreq+0x180>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	099b      	lsrs	r3, r3, #6
 8004448:	2200      	movs	r2, #0
 800444a:	623b      	str	r3, [r7, #32]
 800444c:	627a      	str	r2, [r7, #36]	; 0x24
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004454:	2100      	movs	r1, #0
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_GetSysClockFreq+0x188>)
 8004458:	fb03 f201 	mul.w	r2, r3, r1
 800445c:	2300      	movs	r3, #0
 800445e:	fb00 f303 	mul.w	r3, r0, r3
 8004462:	4413      	add	r3, r2
 8004464:	4a43      	ldr	r2, [pc, #268]	; (8004574 <HAL_RCC_GetSysClockFreq+0x188>)
 8004466:	fba0 1202 	umull	r1, r2, r0, r2
 800446a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800446c:	460a      	mov	r2, r1
 800446e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004472:	4413      	add	r3, r2
 8004474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004478:	2200      	movs	r2, #0
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	61fa      	str	r2, [r7, #28]
 800447e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004482:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004486:	f7fb ff13 	bl	80002b0 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4613      	mov	r3, r2
 8004490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004492:	e053      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004494:	4b35      	ldr	r3, [pc, #212]	; (800456c <HAL_RCC_GetSysClockFreq+0x180>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	099b      	lsrs	r3, r3, #6
 800449a:	2200      	movs	r2, #0
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	617a      	str	r2, [r7, #20]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044a6:	f04f 0b00 	mov.w	fp, #0
 80044aa:	4652      	mov	r2, sl
 80044ac:	465b      	mov	r3, fp
 80044ae:	f04f 0000 	mov.w	r0, #0
 80044b2:	f04f 0100 	mov.w	r1, #0
 80044b6:	0159      	lsls	r1, r3, #5
 80044b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044bc:	0150      	lsls	r0, r2, #5
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	ebb2 080a 	subs.w	r8, r2, sl
 80044c6:	eb63 090b 	sbc.w	r9, r3, fp
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044de:	ebb2 0408 	subs.w	r4, r2, r8
 80044e2:	eb63 0509 	sbc.w	r5, r3, r9
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	00eb      	lsls	r3, r5, #3
 80044f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044f4:	00e2      	lsls	r2, r4, #3
 80044f6:	4614      	mov	r4, r2
 80044f8:	461d      	mov	r5, r3
 80044fa:	eb14 030a 	adds.w	r3, r4, sl
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	eb45 030b 	adc.w	r3, r5, fp
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004512:	4629      	mov	r1, r5
 8004514:	028b      	lsls	r3, r1, #10
 8004516:	4621      	mov	r1, r4
 8004518:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800451c:	4621      	mov	r1, r4
 800451e:	028a      	lsls	r2, r1, #10
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004526:	2200      	movs	r2, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	60fa      	str	r2, [r7, #12]
 800452c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004530:	f7fb febe 	bl	80002b0 <__aeabi_uldivmod>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4613      	mov	r3, r2
 800453a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_RCC_GetSysClockFreq+0x180>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	0c1b      	lsrs	r3, r3, #16
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	3301      	adds	r3, #1
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800454c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004556:	e002      	b.n	800455e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCC_GetSysClockFreq+0x184>)
 800455a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800455c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004560:	4618      	mov	r0, r3
 8004562:	3740      	adds	r7, #64	; 0x40
 8004564:	46bd      	mov	sp, r7
 8004566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800
 8004570:	00f42400 	.word	0x00f42400
 8004574:	017d7840 	.word	0x017d7840

08004578 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <HAL_RCC_GetHCLKFreq+0x14>)
 800457e:	681b      	ldr	r3, [r3, #0]
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000000 	.word	0x20000000

08004590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004594:	f7ff fff0 	bl	8004578 <HAL_RCC_GetHCLKFreq>
 8004598:	4602      	mov	r2, r0
 800459a:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	0a9b      	lsrs	r3, r3, #10
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	4903      	ldr	r1, [pc, #12]	; (80045b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a6:	5ccb      	ldrb	r3, [r1, r3]
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40023800 	.word	0x40023800
 80045b4:	08006b04 	.word	0x08006b04

080045b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045bc:	f7ff ffdc 	bl	8004578 <HAL_RCC_GetHCLKFreq>
 80045c0:	4602      	mov	r2, r0
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	0b5b      	lsrs	r3, r3, #13
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	4903      	ldr	r1, [pc, #12]	; (80045dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ce:	5ccb      	ldrb	r3, [r1, r3]
 80045d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40023800 	.word	0x40023800
 80045dc:	08006b04 	.word	0x08006b04

080045e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d012      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004608:	4b69      	ldr	r3, [pc, #420]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a68      	ldr	r2, [pc, #416]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004612:	6093      	str	r3, [r2, #8]
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461c:	4964      	ldr	r1, [pc, #400]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800463a:	4b5d      	ldr	r3, [pc, #372]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004640:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	4959      	ldr	r1, [pc, #356]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004658:	d101      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800465a:	2301      	movs	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004666:	2301      	movs	r3, #1
 8004668:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d017      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004676:	4b4e      	ldr	r3, [pc, #312]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	494a      	ldr	r1, [pc, #296]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004694:	d101      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004696:	2301      	movs	r3, #1
 8004698:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 808b 	beq.w	80047da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046c4:	4b3a      	ldr	r3, [pc, #232]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	4a39      	ldr	r2, [pc, #228]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ce:	6413      	str	r3, [r2, #64]	; 0x40
 80046d0:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046dc:	4b35      	ldr	r3, [pc, #212]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a34      	ldr	r2, [pc, #208]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e8:	f7fd fe48 	bl	800237c <HAL_GetTick>
 80046ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f0:	f7fd fe44 	bl	800237c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b64      	cmp	r3, #100	; 0x64
 80046fc:	d901      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e357      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004702:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800470e:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d035      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	429a      	cmp	r2, r3
 800472a:	d02e      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800472c:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004734:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004736:	4b1e      	ldr	r3, [pc, #120]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	4a1d      	ldr	r2, [pc, #116]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004740:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004742:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a1a      	ldr	r2, [pc, #104]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800474e:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004754:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b01      	cmp	r3, #1
 800475e:	d114      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fd fe0c 	bl	800237c <HAL_GetTick>
 8004764:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004766:	e00a      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004768:	f7fd fe08 	bl	800237c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	; 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e319      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477e:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0ee      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004796:	d111      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047a6:	400b      	ands	r3, r1
 80047a8:	4901      	ldr	r1, [pc, #4]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
 80047ae:	e00b      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40007000 	.word	0x40007000
 80047b8:	0ffffcff 	.word	0x0ffffcff
 80047bc:	4baa      	ldr	r3, [pc, #680]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4aa9      	ldr	r2, [pc, #676]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047c6:	6093      	str	r3, [r2, #8]
 80047c8:	4ba7      	ldr	r3, [pc, #668]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d4:	49a4      	ldr	r1, [pc, #656]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d010      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047e6:	4ba0      	ldr	r3, [pc, #640]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ec:	4a9e      	ldr	r2, [pc, #632]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047f6:	4b9c      	ldr	r3, [pc, #624]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	4999      	ldr	r1, [pc, #612]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004814:	4b94      	ldr	r3, [pc, #592]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004822:	4991      	ldr	r1, [pc, #580]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004836:	4b8c      	ldr	r3, [pc, #560]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004844:	4988      	ldr	r1, [pc, #544]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004858:	4b83      	ldr	r3, [pc, #524]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004866:	4980      	ldr	r1, [pc, #512]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800487a:	4b7b      	ldr	r3, [pc, #492]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004888:	4977      	ldr	r1, [pc, #476]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800489c:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f023 0203 	bic.w	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048aa:	496f      	ldr	r1, [pc, #444]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048be:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	f023 020c 	bic.w	r2, r3, #12
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048cc:	4966      	ldr	r1, [pc, #408]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048e0:	4b61      	ldr	r3, [pc, #388]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	495e      	ldr	r1, [pc, #376]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004902:	4b59      	ldr	r3, [pc, #356]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004910:	4955      	ldr	r1, [pc, #340]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004924:	4b50      	ldr	r3, [pc, #320]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	494d      	ldr	r1, [pc, #308]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004946:	4b48      	ldr	r3, [pc, #288]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	4944      	ldr	r1, [pc, #272]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004968:	4b3f      	ldr	r3, [pc, #252]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004976:	493c      	ldr	r1, [pc, #240]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800498a:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004998:	4933      	ldr	r1, [pc, #204]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049ac:	4b2e      	ldr	r3, [pc, #184]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ba:	492b      	ldr	r1, [pc, #172]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d011      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049ce:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049dc:	4922      	ldr	r1, [pc, #136]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ec:	d101      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80049ee:	2301      	movs	r3, #1
 80049f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a0e:	4b16      	ldr	r3, [pc, #88]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1c:	4912      	ldr	r1, [pc, #72]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00b      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a30:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a40:	4909      	ldr	r1, [pc, #36]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d006      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 80d9 	beq.w	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a5c:	4b02      	ldr	r3, [pc, #8]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a01      	ldr	r2, [pc, #4]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a66:	e001      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6e:	f7fd fc85 	bl	800237c <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a74:	e008      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a76:	f7fd fc81 	bl	800237c <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b64      	cmp	r3, #100	; 0x64
 8004a82:	d901      	bls.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e194      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a88:	4b6c      	ldr	r3, [pc, #432]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f0      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d021      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d11d      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aa8:	4b64      	ldr	r3, [pc, #400]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aae:	0c1b      	lsrs	r3, r3, #16
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ab6:	4b61      	ldr	r3, [pc, #388]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004abc:	0e1b      	lsrs	r3, r3, #24
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	019a      	lsls	r2, r3, #6
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	041b      	lsls	r3, r3, #16
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	061b      	lsls	r3, r3, #24
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	071b      	lsls	r3, r3, #28
 8004adc:	4957      	ldr	r1, [pc, #348]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af8:	d00a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d02e      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b0e:	d129      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b10:	4b4a      	ldr	r3, [pc, #296]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b16:	0c1b      	lsrs	r3, r3, #16
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b1e:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b24:	0f1b      	lsrs	r3, r3, #28
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	019a      	lsls	r2, r3, #6
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	041b      	lsls	r3, r3, #16
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	061b      	lsls	r3, r3, #24
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	071b      	lsls	r3, r3, #28
 8004b44:	493d      	ldr	r1, [pc, #244]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b4c:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b52:	f023 021f 	bic.w	r2, r3, #31
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	4937      	ldr	r1, [pc, #220]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01d      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b70:	4b32      	ldr	r3, [pc, #200]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b76:	0e1b      	lsrs	r3, r3, #24
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b7e:	4b2f      	ldr	r3, [pc, #188]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b84:	0f1b      	lsrs	r3, r3, #28
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	019a      	lsls	r2, r3, #6
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	061b      	lsls	r3, r3, #24
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	071b      	lsls	r3, r3, #28
 8004ba4:	4925      	ldr	r1, [pc, #148]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d011      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	019a      	lsls	r2, r3, #6
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	071b      	lsls	r3, r3, #28
 8004bd4:	4919      	ldr	r1, [pc, #100]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bdc:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be8:	f7fd fbc8 	bl	800237c <HAL_GetTick>
 8004bec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bf0:	f7fd fbc4 	bl	800237c <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b64      	cmp	r3, #100	; 0x64
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e0d7      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c02:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	f040 80cd 	bne.w	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c22:	f7fd fbab 	bl	800237c <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c28:	e00a      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c2a:	f7fd fba7 	bl	800237c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b64      	cmp	r3, #100	; 0x64
 8004c36:	d903      	bls.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0ba      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c40:	4b5e      	ldr	r3, [pc, #376]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c4c:	d0ed      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d02e      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d12a      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c76:	4b51      	ldr	r3, [pc, #324]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	0c1b      	lsrs	r3, r3, #16
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c84:	4b4d      	ldr	r3, [pc, #308]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	0f1b      	lsrs	r3, r3, #28
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	019a      	lsls	r2, r3, #6
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	061b      	lsls	r3, r3, #24
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	071b      	lsls	r3, r3, #28
 8004caa:	4944      	ldr	r1, [pc, #272]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cb2:	4b42      	ldr	r3, [pc, #264]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	493d      	ldr	r1, [pc, #244]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d022      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce0:	d11d      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ce2:	4b36      	ldr	r3, [pc, #216]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	0e1b      	lsrs	r3, r3, #24
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cf0:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	0f1b      	lsrs	r3, r3, #28
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	019a      	lsls	r2, r3, #6
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	061b      	lsls	r3, r3, #24
 8004d10:	431a      	orrs	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	071b      	lsls	r3, r3, #28
 8004d16:	4929      	ldr	r1, [pc, #164]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d028      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d2a:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	0e1b      	lsrs	r3, r3, #24
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d38:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	0c1b      	lsrs	r3, r3, #16
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	019a      	lsls	r2, r3, #6
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	041b      	lsls	r3, r3, #16
 8004d50:	431a      	orrs	r2, r3
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	061b      	lsls	r3, r3, #24
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	071b      	lsls	r3, r3, #28
 8004d5e:	4917      	ldr	r1, [pc, #92]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4911      	ldr	r1, [pc, #68]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a0e      	ldr	r2, [pc, #56]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d88:	f7fd faf8 	bl	800237c <HAL_GetTick>
 8004d8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d90:	f7fd faf4 	bl	800237c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e007      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dae:	d1ef      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800

08004dc0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e025      	b.n	8004e20 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f81d 	bl	8004e28 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f001 f84f 	bl	8005ea4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6839      	ldr	r1, [r7, #0]
 8004e12:	f001 f8b9 	bl	8005f88 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d101      	bne.n	8004e58 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
 8004e56:	e018      	b.n	8004e8a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f001 f90d 	bl	8006088 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d104      	bne.n	8004e80 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2205      	movs	r2, #5
 8004e7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004e7e:	e003      	b.n	8004e88 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d101      	bne.n	8004eac <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e00e      	b.n	8004eca <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f001 f905 	bl	80060ca <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e040      	b.n	8004f66 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fc f907 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2224      	movs	r2, #36	; 0x24
 8004efe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fb1f 	bl	8005554 <UART_SetConfig>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e022      	b.n	8004f66 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fd77 	bl	8005a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0201 	orr.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fdfe 	bl	8005b60 <UART_CheckIdleState>
 8004f64:	4603      	mov	r3, r0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b0ba      	sub	sp, #232	; 0xe8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d115      	bne.n	8004fd8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00f      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d009      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8297 	beq.w	80054fc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	4798      	blx	r3
      }
      return;
 8004fd6:	e291      	b.n	80054fc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8117 	beq.w	8005210 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ff2:	4b85      	ldr	r3, [pc, #532]	; (8005208 <HAL_UART_IRQHandler+0x298>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 810a 	beq.w	8005210 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d011      	beq.n	800502c <HAL_UART_IRQHandler+0xbc>
 8005008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2201      	movs	r2, #1
 800501a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005022:	f043 0201 	orr.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800502c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d011      	beq.n	800505c <HAL_UART_IRQHandler+0xec>
 8005038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00b      	beq.n	800505c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2202      	movs	r2, #2
 800504a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005052:	f043 0204 	orr.w	r2, r3, #4
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d011      	beq.n	800508c <HAL_UART_IRQHandler+0x11c>
 8005068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00b      	beq.n	800508c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2204      	movs	r2, #4
 800507a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005082:	f043 0202 	orr.w	r2, r3, #2
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800508c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d017      	beq.n	80050c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00b      	beq.n	80050c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2208      	movs	r2, #8
 80050b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050be:	f043 0208 	orr.w	r2, r3, #8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d012      	beq.n	80050fa <HAL_UART_IRQHandler+0x18a>
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00c      	beq.n	80050fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f0:	f043 0220 	orr.w	r2, r3, #32
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 81fd 	beq.w	8005500 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005134:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d005      	beq.n	8005152 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800514a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800514e:	2b00      	cmp	r3, #0
 8005150:	d04f      	beq.n	80051f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fe01 	bl	8005d5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d141      	bne.n	80051ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3308      	adds	r3, #8
 800516c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800517c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005192:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800519e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1d9      	bne.n	8005166 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d013      	beq.n	80051e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <HAL_UART_IRQHandler+0x29c>)
 80051c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fd fc80 	bl	8002acc <HAL_DMA_Abort_IT>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d017      	beq.n	8005202 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051dc:	4610      	mov	r0, r2
 80051de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e0:	e00f      	b.n	8005202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f9a0 	bl	8005528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e8:	e00b      	b.n	8005202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f99c 	bl	8005528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f0:	e007      	b.n	8005202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f998 	bl	8005528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005200:	e17e      	b.n	8005500 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005202:	bf00      	nop
    return;
 8005204:	e17c      	b.n	8005500 <HAL_UART_IRQHandler+0x590>
 8005206:	bf00      	nop
 8005208:	04000120 	.word	0x04000120
 800520c:	08005e23 	.word	0x08005e23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005214:	2b01      	cmp	r3, #1
 8005216:	f040 814c 	bne.w	80054b2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800521a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521e:	f003 0310 	and.w	r3, r3, #16
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8145 	beq.w	80054b2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 813e 	beq.w	80054b2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2210      	movs	r2, #16
 800523c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	f040 80b6 	bne.w	80053ba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800525a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8150 	beq.w	8005504 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800526a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800526e:	429a      	cmp	r2, r3
 8005270:	f080 8148 	bcs.w	8005504 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800527a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005288:	f000 8086 	beq.w	8005398 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1da      	bne.n	800528c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3308      	adds	r3, #8
 80052dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3308      	adds	r3, #8
 80052f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005302:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800530c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e1      	bne.n	80052d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3308      	adds	r3, #8
 8005318:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005336:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800533c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e3      	bne.n	8005312 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005368:	f023 0310 	bic.w	r3, r3, #16
 800536c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800537a:	65bb      	str	r3, [r7, #88]	; 0x58
 800537c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e4      	bne.n	8005358 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005392:	4618      	mov	r0, r3
 8005394:	f7fd fb2a 	bl	80029ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f8c2 	bl	800553c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053b8:	e0a4      	b.n	8005504 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 8096 	beq.w	8005508 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80053dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 8091 	beq.w	8005508 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005408:	647b      	str	r3, [r7, #68]	; 0x44
 800540a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800540e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005410:	e841 2300 	strex	r3, r2, [r1]
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e4      	bne.n	80053e6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3308      	adds	r3, #8
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	623b      	str	r3, [r7, #32]
   return(result);
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	f023 0301 	bic.w	r3, r3, #1
 8005432:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005440:	633a      	str	r2, [r7, #48]	; 0x30
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e3      	bne.n	800541c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	60fb      	str	r3, [r7, #12]
   return(result);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f023 0310 	bic.w	r3, r3, #16
 800547c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	69b9      	ldr	r1, [r7, #24]
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	617b      	str	r3, [r7, #20]
   return(result);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e4      	bne.n	8005468 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f846 	bl	800553c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054b0:	e02a      	b.n	8005508 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00e      	beq.n	80054dc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d01c      	beq.n	800550c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
    }
    return;
 80054da:	e017      	b.n	800550c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d012      	beq.n	800550e <HAL_UART_IRQHandler+0x59e>
 80054e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00c      	beq.n	800550e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fcaa 	bl	8005e4e <UART_EndTransmit_IT>
    return;
 80054fa:	e008      	b.n	800550e <HAL_UART_IRQHandler+0x59e>
      return;
 80054fc:	bf00      	nop
 80054fe:	e006      	b.n	800550e <HAL_UART_IRQHandler+0x59e>
    return;
 8005500:	bf00      	nop
 8005502:	e004      	b.n	800550e <HAL_UART_IRQHandler+0x59e>
      return;
 8005504:	bf00      	nop
 8005506:	e002      	b.n	800550e <HAL_UART_IRQHandler+0x59e>
      return;
 8005508:	bf00      	nop
 800550a:	e000      	b.n	800550e <HAL_UART_IRQHandler+0x59e>
    return;
 800550c:	bf00      	nop
  }

}
 800550e:	37e8      	adds	r7, #232	; 0xe8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4ba6      	ldr	r3, [pc, #664]	; (8005818 <UART_SetConfig+0x2c4>)
 8005580:	4013      	ands	r3, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6812      	ldr	r2, [r2, #0]
 8005586:	6979      	ldr	r1, [r7, #20]
 8005588:	430b      	orrs	r3, r1
 800558a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a94      	ldr	r2, [pc, #592]	; (800581c <UART_SetConfig+0x2c8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d120      	bne.n	8005612 <UART_SetConfig+0xbe>
 80055d0:	4b93      	ldr	r3, [pc, #588]	; (8005820 <UART_SetConfig+0x2cc>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d816      	bhi.n	800560c <UART_SetConfig+0xb8>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <UART_SetConfig+0x90>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055f5 	.word	0x080055f5
 80055e8:	08005601 	.word	0x08005601
 80055ec:	080055fb 	.word	0x080055fb
 80055f0:	08005607 	.word	0x08005607
 80055f4:	2301      	movs	r3, #1
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e150      	b.n	800589c <UART_SetConfig+0x348>
 80055fa:	2302      	movs	r3, #2
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e14d      	b.n	800589c <UART_SetConfig+0x348>
 8005600:	2304      	movs	r3, #4
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e14a      	b.n	800589c <UART_SetConfig+0x348>
 8005606:	2308      	movs	r3, #8
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e147      	b.n	800589c <UART_SetConfig+0x348>
 800560c:	2310      	movs	r3, #16
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e144      	b.n	800589c <UART_SetConfig+0x348>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a83      	ldr	r2, [pc, #524]	; (8005824 <UART_SetConfig+0x2d0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d132      	bne.n	8005682 <UART_SetConfig+0x12e>
 800561c:	4b80      	ldr	r3, [pc, #512]	; (8005820 <UART_SetConfig+0x2cc>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b0c      	cmp	r3, #12
 8005628:	d828      	bhi.n	800567c <UART_SetConfig+0x128>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0xdc>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005665 	.word	0x08005665
 8005634:	0800567d 	.word	0x0800567d
 8005638:	0800567d 	.word	0x0800567d
 800563c:	0800567d 	.word	0x0800567d
 8005640:	08005671 	.word	0x08005671
 8005644:	0800567d 	.word	0x0800567d
 8005648:	0800567d 	.word	0x0800567d
 800564c:	0800567d 	.word	0x0800567d
 8005650:	0800566b 	.word	0x0800566b
 8005654:	0800567d 	.word	0x0800567d
 8005658:	0800567d 	.word	0x0800567d
 800565c:	0800567d 	.word	0x0800567d
 8005660:	08005677 	.word	0x08005677
 8005664:	2300      	movs	r3, #0
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e118      	b.n	800589c <UART_SetConfig+0x348>
 800566a:	2302      	movs	r3, #2
 800566c:	77fb      	strb	r3, [r7, #31]
 800566e:	e115      	b.n	800589c <UART_SetConfig+0x348>
 8005670:	2304      	movs	r3, #4
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e112      	b.n	800589c <UART_SetConfig+0x348>
 8005676:	2308      	movs	r3, #8
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e10f      	b.n	800589c <UART_SetConfig+0x348>
 800567c:	2310      	movs	r3, #16
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e10c      	b.n	800589c <UART_SetConfig+0x348>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a68      	ldr	r2, [pc, #416]	; (8005828 <UART_SetConfig+0x2d4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d120      	bne.n	80056ce <UART_SetConfig+0x17a>
 800568c:	4b64      	ldr	r3, [pc, #400]	; (8005820 <UART_SetConfig+0x2cc>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005692:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005696:	2b30      	cmp	r3, #48	; 0x30
 8005698:	d013      	beq.n	80056c2 <UART_SetConfig+0x16e>
 800569a:	2b30      	cmp	r3, #48	; 0x30
 800569c:	d814      	bhi.n	80056c8 <UART_SetConfig+0x174>
 800569e:	2b20      	cmp	r3, #32
 80056a0:	d009      	beq.n	80056b6 <UART_SetConfig+0x162>
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d810      	bhi.n	80056c8 <UART_SetConfig+0x174>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <UART_SetConfig+0x15c>
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	d006      	beq.n	80056bc <UART_SetConfig+0x168>
 80056ae:	e00b      	b.n	80056c8 <UART_SetConfig+0x174>
 80056b0:	2300      	movs	r3, #0
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e0f2      	b.n	800589c <UART_SetConfig+0x348>
 80056b6:	2302      	movs	r3, #2
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e0ef      	b.n	800589c <UART_SetConfig+0x348>
 80056bc:	2304      	movs	r3, #4
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e0ec      	b.n	800589c <UART_SetConfig+0x348>
 80056c2:	2308      	movs	r3, #8
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e0e9      	b.n	800589c <UART_SetConfig+0x348>
 80056c8:	2310      	movs	r3, #16
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e0e6      	b.n	800589c <UART_SetConfig+0x348>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a56      	ldr	r2, [pc, #344]	; (800582c <UART_SetConfig+0x2d8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d120      	bne.n	800571a <UART_SetConfig+0x1c6>
 80056d8:	4b51      	ldr	r3, [pc, #324]	; (8005820 <UART_SetConfig+0x2cc>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056e2:	2bc0      	cmp	r3, #192	; 0xc0
 80056e4:	d013      	beq.n	800570e <UART_SetConfig+0x1ba>
 80056e6:	2bc0      	cmp	r3, #192	; 0xc0
 80056e8:	d814      	bhi.n	8005714 <UART_SetConfig+0x1c0>
 80056ea:	2b80      	cmp	r3, #128	; 0x80
 80056ec:	d009      	beq.n	8005702 <UART_SetConfig+0x1ae>
 80056ee:	2b80      	cmp	r3, #128	; 0x80
 80056f0:	d810      	bhi.n	8005714 <UART_SetConfig+0x1c0>
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <UART_SetConfig+0x1a8>
 80056f6:	2b40      	cmp	r3, #64	; 0x40
 80056f8:	d006      	beq.n	8005708 <UART_SetConfig+0x1b4>
 80056fa:	e00b      	b.n	8005714 <UART_SetConfig+0x1c0>
 80056fc:	2300      	movs	r3, #0
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e0cc      	b.n	800589c <UART_SetConfig+0x348>
 8005702:	2302      	movs	r3, #2
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e0c9      	b.n	800589c <UART_SetConfig+0x348>
 8005708:	2304      	movs	r3, #4
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e0c6      	b.n	800589c <UART_SetConfig+0x348>
 800570e:	2308      	movs	r3, #8
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e0c3      	b.n	800589c <UART_SetConfig+0x348>
 8005714:	2310      	movs	r3, #16
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e0c0      	b.n	800589c <UART_SetConfig+0x348>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a44      	ldr	r2, [pc, #272]	; (8005830 <UART_SetConfig+0x2dc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d125      	bne.n	8005770 <UART_SetConfig+0x21c>
 8005724:	4b3e      	ldr	r3, [pc, #248]	; (8005820 <UART_SetConfig+0x2cc>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005732:	d017      	beq.n	8005764 <UART_SetConfig+0x210>
 8005734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005738:	d817      	bhi.n	800576a <UART_SetConfig+0x216>
 800573a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573e:	d00b      	beq.n	8005758 <UART_SetConfig+0x204>
 8005740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005744:	d811      	bhi.n	800576a <UART_SetConfig+0x216>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <UART_SetConfig+0x1fe>
 800574a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574e:	d006      	beq.n	800575e <UART_SetConfig+0x20a>
 8005750:	e00b      	b.n	800576a <UART_SetConfig+0x216>
 8005752:	2300      	movs	r3, #0
 8005754:	77fb      	strb	r3, [r7, #31]
 8005756:	e0a1      	b.n	800589c <UART_SetConfig+0x348>
 8005758:	2302      	movs	r3, #2
 800575a:	77fb      	strb	r3, [r7, #31]
 800575c:	e09e      	b.n	800589c <UART_SetConfig+0x348>
 800575e:	2304      	movs	r3, #4
 8005760:	77fb      	strb	r3, [r7, #31]
 8005762:	e09b      	b.n	800589c <UART_SetConfig+0x348>
 8005764:	2308      	movs	r3, #8
 8005766:	77fb      	strb	r3, [r7, #31]
 8005768:	e098      	b.n	800589c <UART_SetConfig+0x348>
 800576a:	2310      	movs	r3, #16
 800576c:	77fb      	strb	r3, [r7, #31]
 800576e:	e095      	b.n	800589c <UART_SetConfig+0x348>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2f      	ldr	r2, [pc, #188]	; (8005834 <UART_SetConfig+0x2e0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d125      	bne.n	80057c6 <UART_SetConfig+0x272>
 800577a:	4b29      	ldr	r3, [pc, #164]	; (8005820 <UART_SetConfig+0x2cc>)
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005780:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005784:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005788:	d017      	beq.n	80057ba <UART_SetConfig+0x266>
 800578a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800578e:	d817      	bhi.n	80057c0 <UART_SetConfig+0x26c>
 8005790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005794:	d00b      	beq.n	80057ae <UART_SetConfig+0x25a>
 8005796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579a:	d811      	bhi.n	80057c0 <UART_SetConfig+0x26c>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <UART_SetConfig+0x254>
 80057a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a4:	d006      	beq.n	80057b4 <UART_SetConfig+0x260>
 80057a6:	e00b      	b.n	80057c0 <UART_SetConfig+0x26c>
 80057a8:	2301      	movs	r3, #1
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e076      	b.n	800589c <UART_SetConfig+0x348>
 80057ae:	2302      	movs	r3, #2
 80057b0:	77fb      	strb	r3, [r7, #31]
 80057b2:	e073      	b.n	800589c <UART_SetConfig+0x348>
 80057b4:	2304      	movs	r3, #4
 80057b6:	77fb      	strb	r3, [r7, #31]
 80057b8:	e070      	b.n	800589c <UART_SetConfig+0x348>
 80057ba:	2308      	movs	r3, #8
 80057bc:	77fb      	strb	r3, [r7, #31]
 80057be:	e06d      	b.n	800589c <UART_SetConfig+0x348>
 80057c0:	2310      	movs	r3, #16
 80057c2:	77fb      	strb	r3, [r7, #31]
 80057c4:	e06a      	b.n	800589c <UART_SetConfig+0x348>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <UART_SetConfig+0x2e4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d138      	bne.n	8005842 <UART_SetConfig+0x2ee>
 80057d0:	4b13      	ldr	r3, [pc, #76]	; (8005820 <UART_SetConfig+0x2cc>)
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80057da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057de:	d017      	beq.n	8005810 <UART_SetConfig+0x2bc>
 80057e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057e4:	d82a      	bhi.n	800583c <UART_SetConfig+0x2e8>
 80057e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ea:	d00b      	beq.n	8005804 <UART_SetConfig+0x2b0>
 80057ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f0:	d824      	bhi.n	800583c <UART_SetConfig+0x2e8>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <UART_SetConfig+0x2aa>
 80057f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fa:	d006      	beq.n	800580a <UART_SetConfig+0x2b6>
 80057fc:	e01e      	b.n	800583c <UART_SetConfig+0x2e8>
 80057fe:	2300      	movs	r3, #0
 8005800:	77fb      	strb	r3, [r7, #31]
 8005802:	e04b      	b.n	800589c <UART_SetConfig+0x348>
 8005804:	2302      	movs	r3, #2
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e048      	b.n	800589c <UART_SetConfig+0x348>
 800580a:	2304      	movs	r3, #4
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e045      	b.n	800589c <UART_SetConfig+0x348>
 8005810:	2308      	movs	r3, #8
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e042      	b.n	800589c <UART_SetConfig+0x348>
 8005816:	bf00      	nop
 8005818:	efff69f3 	.word	0xefff69f3
 800581c:	40011000 	.word	0x40011000
 8005820:	40023800 	.word	0x40023800
 8005824:	40004400 	.word	0x40004400
 8005828:	40004800 	.word	0x40004800
 800582c:	40004c00 	.word	0x40004c00
 8005830:	40005000 	.word	0x40005000
 8005834:	40011400 	.word	0x40011400
 8005838:	40007800 	.word	0x40007800
 800583c:	2310      	movs	r3, #16
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e02c      	b.n	800589c <UART_SetConfig+0x348>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a72      	ldr	r2, [pc, #456]	; (8005a10 <UART_SetConfig+0x4bc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d125      	bne.n	8005898 <UART_SetConfig+0x344>
 800584c:	4b71      	ldr	r3, [pc, #452]	; (8005a14 <UART_SetConfig+0x4c0>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005852:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005856:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800585a:	d017      	beq.n	800588c <UART_SetConfig+0x338>
 800585c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005860:	d817      	bhi.n	8005892 <UART_SetConfig+0x33e>
 8005862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005866:	d00b      	beq.n	8005880 <UART_SetConfig+0x32c>
 8005868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586c:	d811      	bhi.n	8005892 <UART_SetConfig+0x33e>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <UART_SetConfig+0x326>
 8005872:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005876:	d006      	beq.n	8005886 <UART_SetConfig+0x332>
 8005878:	e00b      	b.n	8005892 <UART_SetConfig+0x33e>
 800587a:	2300      	movs	r3, #0
 800587c:	77fb      	strb	r3, [r7, #31]
 800587e:	e00d      	b.n	800589c <UART_SetConfig+0x348>
 8005880:	2302      	movs	r3, #2
 8005882:	77fb      	strb	r3, [r7, #31]
 8005884:	e00a      	b.n	800589c <UART_SetConfig+0x348>
 8005886:	2304      	movs	r3, #4
 8005888:	77fb      	strb	r3, [r7, #31]
 800588a:	e007      	b.n	800589c <UART_SetConfig+0x348>
 800588c:	2308      	movs	r3, #8
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	e004      	b.n	800589c <UART_SetConfig+0x348>
 8005892:	2310      	movs	r3, #16
 8005894:	77fb      	strb	r3, [r7, #31]
 8005896:	e001      	b.n	800589c <UART_SetConfig+0x348>
 8005898:	2310      	movs	r3, #16
 800589a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a4:	d15b      	bne.n	800595e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80058a6:	7ffb      	ldrb	r3, [r7, #31]
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d828      	bhi.n	80058fe <UART_SetConfig+0x3aa>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <UART_SetConfig+0x360>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058e1 	.word	0x080058e1
 80058bc:	080058e9 	.word	0x080058e9
 80058c0:	080058ff 	.word	0x080058ff
 80058c4:	080058ef 	.word	0x080058ef
 80058c8:	080058ff 	.word	0x080058ff
 80058cc:	080058ff 	.word	0x080058ff
 80058d0:	080058ff 	.word	0x080058ff
 80058d4:	080058f7 	.word	0x080058f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d8:	f7fe fe5a 	bl	8004590 <HAL_RCC_GetPCLK1Freq>
 80058dc:	61b8      	str	r0, [r7, #24]
        break;
 80058de:	e013      	b.n	8005908 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e0:	f7fe fe6a 	bl	80045b8 <HAL_RCC_GetPCLK2Freq>
 80058e4:	61b8      	str	r0, [r7, #24]
        break;
 80058e6:	e00f      	b.n	8005908 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e8:	4b4b      	ldr	r3, [pc, #300]	; (8005a18 <UART_SetConfig+0x4c4>)
 80058ea:	61bb      	str	r3, [r7, #24]
        break;
 80058ec:	e00c      	b.n	8005908 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ee:	f7fe fd7d 	bl	80043ec <HAL_RCC_GetSysClockFreq>
 80058f2:	61b8      	str	r0, [r7, #24]
        break;
 80058f4:	e008      	b.n	8005908 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058fa:	61bb      	str	r3, [r7, #24]
        break;
 80058fc:	e004      	b.n	8005908 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	77bb      	strb	r3, [r7, #30]
        break;
 8005906:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d074      	beq.n	80059f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	005a      	lsls	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	441a      	add	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005922:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2b0f      	cmp	r3, #15
 8005928:	d916      	bls.n	8005958 <UART_SetConfig+0x404>
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005930:	d212      	bcs.n	8005958 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	b29b      	uxth	r3, r3
 8005936:	f023 030f 	bic.w	r3, r3, #15
 800593a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	b29b      	uxth	r3, r3
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	b29a      	uxth	r2, r3
 8005948:	89fb      	ldrh	r3, [r7, #14]
 800594a:	4313      	orrs	r3, r2
 800594c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	89fa      	ldrh	r2, [r7, #14]
 8005954:	60da      	str	r2, [r3, #12]
 8005956:	e04f      	b.n	80059f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	77bb      	strb	r3, [r7, #30]
 800595c:	e04c      	b.n	80059f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800595e:	7ffb      	ldrb	r3, [r7, #31]
 8005960:	2b08      	cmp	r3, #8
 8005962:	d828      	bhi.n	80059b6 <UART_SetConfig+0x462>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0x418>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	08005991 	.word	0x08005991
 8005970:	08005999 	.word	0x08005999
 8005974:	080059a1 	.word	0x080059a1
 8005978:	080059b7 	.word	0x080059b7
 800597c:	080059a7 	.word	0x080059a7
 8005980:	080059b7 	.word	0x080059b7
 8005984:	080059b7 	.word	0x080059b7
 8005988:	080059b7 	.word	0x080059b7
 800598c:	080059af 	.word	0x080059af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005990:	f7fe fdfe 	bl	8004590 <HAL_RCC_GetPCLK1Freq>
 8005994:	61b8      	str	r0, [r7, #24]
        break;
 8005996:	e013      	b.n	80059c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005998:	f7fe fe0e 	bl	80045b8 <HAL_RCC_GetPCLK2Freq>
 800599c:	61b8      	str	r0, [r7, #24]
        break;
 800599e:	e00f      	b.n	80059c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059a0:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <UART_SetConfig+0x4c4>)
 80059a2:	61bb      	str	r3, [r7, #24]
        break;
 80059a4:	e00c      	b.n	80059c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059a6:	f7fe fd21 	bl	80043ec <HAL_RCC_GetSysClockFreq>
 80059aa:	61b8      	str	r0, [r7, #24]
        break;
 80059ac:	e008      	b.n	80059c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b2:	61bb      	str	r3, [r7, #24]
        break;
 80059b4:	e004      	b.n	80059c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	77bb      	strb	r3, [r7, #30]
        break;
 80059be:	bf00      	nop
    }

    if (pclk != 0U)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d018      	beq.n	80059f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	085a      	lsrs	r2, r3, #1
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	441a      	add	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b0f      	cmp	r3, #15
 80059de:	d909      	bls.n	80059f4 <UART_SetConfig+0x4a0>
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e6:	d205      	bcs.n	80059f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60da      	str	r2, [r3, #12]
 80059f2:	e001      	b.n	80059f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005a04:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40007c00 	.word	0x40007c00
 8005a14:	40023800 	.word	0x40023800
 8005a18:	00f42400 	.word	0x00f42400

08005a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01a      	beq.n	8005b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b1a:	d10a      	bne.n	8005b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]
  }
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b70:	f7fc fc04 	bl	800237c <HAL_GetTick>
 8005b74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d10e      	bne.n	8005ba2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f81b 	bl	8005bce <UART_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e011      	b.n	8005bc6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b09c      	sub	sp, #112	; 0x70
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	603b      	str	r3, [r7, #0]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bde:	e0a7      	b.n	8005d30 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be6:	f000 80a3 	beq.w	8005d30 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bea:	f7fc fbc7 	bl	800237c <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d302      	bcc.n	8005c00 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d13f      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c14:	667b      	str	r3, [r7, #100]	; 0x64
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c20:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e6      	bne.n	8005c00 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	f023 0301 	bic.w	r3, r3, #1
 8005c48:	663b      	str	r3, [r7, #96]	; 0x60
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3308      	adds	r3, #8
 8005c50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c52:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e5      	bne.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e068      	b.n	8005d52 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d050      	beq.n	8005d30 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9c:	d148      	bne.n	8005d30 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e6      	bne.n	8005ca8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3308      	adds	r3, #8
 8005ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f023 0301 	bic.w	r3, r3, #1
 8005cf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cfa:	623a      	str	r2, [r7, #32]
 8005cfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	69f9      	ldr	r1, [r7, #28]
 8005d00:	6a3a      	ldr	r2, [r7, #32]
 8005d02:	e841 2300 	strex	r3, r2, [r1]
 8005d06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1e5      	bne.n	8005cda <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e010      	b.n	8005d52 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69da      	ldr	r2, [r3, #28]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	bf0c      	ite	eq
 8005d40:	2301      	moveq	r3, #1
 8005d42:	2300      	movne	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	f43f af48 	beq.w	8005be0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3770      	adds	r7, #112	; 0x70
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b095      	sub	sp, #84	; 0x54
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d80:	643b      	str	r3, [r7, #64]	; 0x40
 8005d82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e6      	bne.n	8005d62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
 8005da2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3308      	adds	r3, #8
 8005db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005db4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e5      	bne.n	8005d94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d118      	bne.n	8005e02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f023 0310 	bic.w	r3, r3, #16
 8005de4:	647b      	str	r3, [r7, #68]	; 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	6979      	ldr	r1, [r7, #20]
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e6      	bne.n	8005dd0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e16:	bf00      	nop
 8005e18:	3754      	adds	r7, #84	; 0x54
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7ff fb71 	bl	8005528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e46:	bf00      	nop
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b088      	sub	sp, #32
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6979      	ldr	r1, [r7, #20]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	613b      	str	r3, [r7, #16]
   return(result);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e6      	bne.n	8005e56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fb3d 	bl	8005514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e9a:	bf00      	nop
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d027      	beq.n	8005f0e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4b2f      	ldr	r3, [pc, #188]	; (8005f84 <FMC_SDRAM_Init+0xe0>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ed4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005eda:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005ee0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005ee6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005eec:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005ef2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005ef8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005efe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	e032      	b.n	8005f74 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f1a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f24:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005f2a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <FMC_SDRAM_Init+0xe0>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f48:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005f4e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005f54:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005f5a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005f60:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	ffff8000 	.word	0xffff8000

08005f88 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d02e      	beq.n	8006000 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005fae:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005fbe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005fc8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005fd2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005fdc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005fe6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	3b01      	subs	r3, #1
 8005fee:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	609a      	str	r2, [r3, #8]
 8005ffe:	e039      	b.n	8006074 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4b1e      	ldr	r3, [pc, #120]	; (8006084 <FMC_SDRAM_Timing_Init+0xfc>)
 800600a:	4013      	ands	r3, r2
 800600c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	3b01      	subs	r3, #1
 8006014:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	3b01      	subs	r3, #1
 800601c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800601e:	4313      	orrs	r3, r2
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006032:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	3b01      	subs	r3, #1
 8006040:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006042:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	3b01      	subs	r3, #1
 800604a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800604c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	3b01      	subs	r3, #1
 8006054:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006056:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	3b01      	subs	r3, #1
 800605e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006060:	4313      	orrs	r3, r2
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	ff0f0fff 	.word	0xff0f0fff

08006088 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060a0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80060aa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <__errno>:
 80060f0:	4b01      	ldr	r3, [pc, #4]	; (80060f8 <__errno+0x8>)
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20000018 	.word	0x20000018

080060fc <__libc_init_array>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4d0d      	ldr	r5, [pc, #52]	; (8006134 <__libc_init_array+0x38>)
 8006100:	4c0d      	ldr	r4, [pc, #52]	; (8006138 <__libc_init_array+0x3c>)
 8006102:	1b64      	subs	r4, r4, r5
 8006104:	10a4      	asrs	r4, r4, #2
 8006106:	2600      	movs	r6, #0
 8006108:	42a6      	cmp	r6, r4
 800610a:	d109      	bne.n	8006120 <__libc_init_array+0x24>
 800610c:	4d0b      	ldr	r5, [pc, #44]	; (800613c <__libc_init_array+0x40>)
 800610e:	4c0c      	ldr	r4, [pc, #48]	; (8006140 <__libc_init_array+0x44>)
 8006110:	f000 fc8e 	bl	8006a30 <_init>
 8006114:	1b64      	subs	r4, r4, r5
 8006116:	10a4      	asrs	r4, r4, #2
 8006118:	2600      	movs	r6, #0
 800611a:	42a6      	cmp	r6, r4
 800611c:	d105      	bne.n	800612a <__libc_init_array+0x2e>
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	f855 3b04 	ldr.w	r3, [r5], #4
 8006124:	4798      	blx	r3
 8006126:	3601      	adds	r6, #1
 8006128:	e7ee      	b.n	8006108 <__libc_init_array+0xc>
 800612a:	f855 3b04 	ldr.w	r3, [r5], #4
 800612e:	4798      	blx	r3
 8006130:	3601      	adds	r6, #1
 8006132:	e7f2      	b.n	800611a <__libc_init_array+0x1e>
 8006134:	08008608 	.word	0x08008608
 8006138:	08008608 	.word	0x08008608
 800613c:	08008608 	.word	0x08008608
 8006140:	0800860c 	.word	0x0800860c

08006144 <memset>:
 8006144:	4402      	add	r2, r0
 8006146:	4603      	mov	r3, r0
 8006148:	4293      	cmp	r3, r2
 800614a:	d100      	bne.n	800614e <memset+0xa>
 800614c:	4770      	bx	lr
 800614e:	f803 1b01 	strb.w	r1, [r3], #1
 8006152:	e7f9      	b.n	8006148 <memset+0x4>

08006154 <siprintf>:
 8006154:	b40e      	push	{r1, r2, r3}
 8006156:	b500      	push	{lr}
 8006158:	b09c      	sub	sp, #112	; 0x70
 800615a:	ab1d      	add	r3, sp, #116	; 0x74
 800615c:	9002      	str	r0, [sp, #8]
 800615e:	9006      	str	r0, [sp, #24]
 8006160:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006164:	4809      	ldr	r0, [pc, #36]	; (800618c <siprintf+0x38>)
 8006166:	9107      	str	r1, [sp, #28]
 8006168:	9104      	str	r1, [sp, #16]
 800616a:	4909      	ldr	r1, [pc, #36]	; (8006190 <siprintf+0x3c>)
 800616c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006170:	9105      	str	r1, [sp, #20]
 8006172:	6800      	ldr	r0, [r0, #0]
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	a902      	add	r1, sp, #8
 8006178:	f000 f868 	bl	800624c <_svfiprintf_r>
 800617c:	9b02      	ldr	r3, [sp, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	b01c      	add	sp, #112	; 0x70
 8006184:	f85d eb04 	ldr.w	lr, [sp], #4
 8006188:	b003      	add	sp, #12
 800618a:	4770      	bx	lr
 800618c:	20000018 	.word	0x20000018
 8006190:	ffff0208 	.word	0xffff0208

08006194 <__ssputs_r>:
 8006194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006198:	688e      	ldr	r6, [r1, #8]
 800619a:	429e      	cmp	r6, r3
 800619c:	4682      	mov	sl, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	4690      	mov	r8, r2
 80061a2:	461f      	mov	r7, r3
 80061a4:	d838      	bhi.n	8006218 <__ssputs_r+0x84>
 80061a6:	898a      	ldrh	r2, [r1, #12]
 80061a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061ac:	d032      	beq.n	8006214 <__ssputs_r+0x80>
 80061ae:	6825      	ldr	r5, [r4, #0]
 80061b0:	6909      	ldr	r1, [r1, #16]
 80061b2:	eba5 0901 	sub.w	r9, r5, r1
 80061b6:	6965      	ldr	r5, [r4, #20]
 80061b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061c0:	3301      	adds	r3, #1
 80061c2:	444b      	add	r3, r9
 80061c4:	106d      	asrs	r5, r5, #1
 80061c6:	429d      	cmp	r5, r3
 80061c8:	bf38      	it	cc
 80061ca:	461d      	movcc	r5, r3
 80061cc:	0553      	lsls	r3, r2, #21
 80061ce:	d531      	bpl.n	8006234 <__ssputs_r+0xa0>
 80061d0:	4629      	mov	r1, r5
 80061d2:	f000 fb63 	bl	800689c <_malloc_r>
 80061d6:	4606      	mov	r6, r0
 80061d8:	b950      	cbnz	r0, 80061f0 <__ssputs_r+0x5c>
 80061da:	230c      	movs	r3, #12
 80061dc:	f8ca 3000 	str.w	r3, [sl]
 80061e0:	89a3      	ldrh	r3, [r4, #12]
 80061e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e6:	81a3      	strh	r3, [r4, #12]
 80061e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f0:	6921      	ldr	r1, [r4, #16]
 80061f2:	464a      	mov	r2, r9
 80061f4:	f000 fabe 	bl	8006774 <memcpy>
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	81a3      	strh	r3, [r4, #12]
 8006204:	6126      	str	r6, [r4, #16]
 8006206:	6165      	str	r5, [r4, #20]
 8006208:	444e      	add	r6, r9
 800620a:	eba5 0509 	sub.w	r5, r5, r9
 800620e:	6026      	str	r6, [r4, #0]
 8006210:	60a5      	str	r5, [r4, #8]
 8006212:	463e      	mov	r6, r7
 8006214:	42be      	cmp	r6, r7
 8006216:	d900      	bls.n	800621a <__ssputs_r+0x86>
 8006218:	463e      	mov	r6, r7
 800621a:	6820      	ldr	r0, [r4, #0]
 800621c:	4632      	mov	r2, r6
 800621e:	4641      	mov	r1, r8
 8006220:	f000 fab6 	bl	8006790 <memmove>
 8006224:	68a3      	ldr	r3, [r4, #8]
 8006226:	1b9b      	subs	r3, r3, r6
 8006228:	60a3      	str	r3, [r4, #8]
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	4433      	add	r3, r6
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	2000      	movs	r0, #0
 8006232:	e7db      	b.n	80061ec <__ssputs_r+0x58>
 8006234:	462a      	mov	r2, r5
 8006236:	f000 fba5 	bl	8006984 <_realloc_r>
 800623a:	4606      	mov	r6, r0
 800623c:	2800      	cmp	r0, #0
 800623e:	d1e1      	bne.n	8006204 <__ssputs_r+0x70>
 8006240:	6921      	ldr	r1, [r4, #16]
 8006242:	4650      	mov	r0, sl
 8006244:	f000 fabe 	bl	80067c4 <_free_r>
 8006248:	e7c7      	b.n	80061da <__ssputs_r+0x46>
	...

0800624c <_svfiprintf_r>:
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	4698      	mov	r8, r3
 8006252:	898b      	ldrh	r3, [r1, #12]
 8006254:	061b      	lsls	r3, r3, #24
 8006256:	b09d      	sub	sp, #116	; 0x74
 8006258:	4607      	mov	r7, r0
 800625a:	460d      	mov	r5, r1
 800625c:	4614      	mov	r4, r2
 800625e:	d50e      	bpl.n	800627e <_svfiprintf_r+0x32>
 8006260:	690b      	ldr	r3, [r1, #16]
 8006262:	b963      	cbnz	r3, 800627e <_svfiprintf_r+0x32>
 8006264:	2140      	movs	r1, #64	; 0x40
 8006266:	f000 fb19 	bl	800689c <_malloc_r>
 800626a:	6028      	str	r0, [r5, #0]
 800626c:	6128      	str	r0, [r5, #16]
 800626e:	b920      	cbnz	r0, 800627a <_svfiprintf_r+0x2e>
 8006270:	230c      	movs	r3, #12
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006278:	e0d1      	b.n	800641e <_svfiprintf_r+0x1d2>
 800627a:	2340      	movs	r3, #64	; 0x40
 800627c:	616b      	str	r3, [r5, #20]
 800627e:	2300      	movs	r3, #0
 8006280:	9309      	str	r3, [sp, #36]	; 0x24
 8006282:	2320      	movs	r3, #32
 8006284:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006288:	f8cd 800c 	str.w	r8, [sp, #12]
 800628c:	2330      	movs	r3, #48	; 0x30
 800628e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006438 <_svfiprintf_r+0x1ec>
 8006292:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006296:	f04f 0901 	mov.w	r9, #1
 800629a:	4623      	mov	r3, r4
 800629c:	469a      	mov	sl, r3
 800629e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062a2:	b10a      	cbz	r2, 80062a8 <_svfiprintf_r+0x5c>
 80062a4:	2a25      	cmp	r2, #37	; 0x25
 80062a6:	d1f9      	bne.n	800629c <_svfiprintf_r+0x50>
 80062a8:	ebba 0b04 	subs.w	fp, sl, r4
 80062ac:	d00b      	beq.n	80062c6 <_svfiprintf_r+0x7a>
 80062ae:	465b      	mov	r3, fp
 80062b0:	4622      	mov	r2, r4
 80062b2:	4629      	mov	r1, r5
 80062b4:	4638      	mov	r0, r7
 80062b6:	f7ff ff6d 	bl	8006194 <__ssputs_r>
 80062ba:	3001      	adds	r0, #1
 80062bc:	f000 80aa 	beq.w	8006414 <_svfiprintf_r+0x1c8>
 80062c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062c2:	445a      	add	r2, fp
 80062c4:	9209      	str	r2, [sp, #36]	; 0x24
 80062c6:	f89a 3000 	ldrb.w	r3, [sl]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80a2 	beq.w	8006414 <_svfiprintf_r+0x1c8>
 80062d0:	2300      	movs	r3, #0
 80062d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062da:	f10a 0a01 	add.w	sl, sl, #1
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	9307      	str	r3, [sp, #28]
 80062e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062e6:	931a      	str	r3, [sp, #104]	; 0x68
 80062e8:	4654      	mov	r4, sl
 80062ea:	2205      	movs	r2, #5
 80062ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f0:	4851      	ldr	r0, [pc, #324]	; (8006438 <_svfiprintf_r+0x1ec>)
 80062f2:	f7f9 ff8d 	bl	8000210 <memchr>
 80062f6:	9a04      	ldr	r2, [sp, #16]
 80062f8:	b9d8      	cbnz	r0, 8006332 <_svfiprintf_r+0xe6>
 80062fa:	06d0      	lsls	r0, r2, #27
 80062fc:	bf44      	itt	mi
 80062fe:	2320      	movmi	r3, #32
 8006300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006304:	0711      	lsls	r1, r2, #28
 8006306:	bf44      	itt	mi
 8006308:	232b      	movmi	r3, #43	; 0x2b
 800630a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800630e:	f89a 3000 	ldrb.w	r3, [sl]
 8006312:	2b2a      	cmp	r3, #42	; 0x2a
 8006314:	d015      	beq.n	8006342 <_svfiprintf_r+0xf6>
 8006316:	9a07      	ldr	r2, [sp, #28]
 8006318:	4654      	mov	r4, sl
 800631a:	2000      	movs	r0, #0
 800631c:	f04f 0c0a 	mov.w	ip, #10
 8006320:	4621      	mov	r1, r4
 8006322:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006326:	3b30      	subs	r3, #48	; 0x30
 8006328:	2b09      	cmp	r3, #9
 800632a:	d94e      	bls.n	80063ca <_svfiprintf_r+0x17e>
 800632c:	b1b0      	cbz	r0, 800635c <_svfiprintf_r+0x110>
 800632e:	9207      	str	r2, [sp, #28]
 8006330:	e014      	b.n	800635c <_svfiprintf_r+0x110>
 8006332:	eba0 0308 	sub.w	r3, r0, r8
 8006336:	fa09 f303 	lsl.w	r3, r9, r3
 800633a:	4313      	orrs	r3, r2
 800633c:	9304      	str	r3, [sp, #16]
 800633e:	46a2      	mov	sl, r4
 8006340:	e7d2      	b.n	80062e8 <_svfiprintf_r+0x9c>
 8006342:	9b03      	ldr	r3, [sp, #12]
 8006344:	1d19      	adds	r1, r3, #4
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	9103      	str	r1, [sp, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	bfbb      	ittet	lt
 800634e:	425b      	neglt	r3, r3
 8006350:	f042 0202 	orrlt.w	r2, r2, #2
 8006354:	9307      	strge	r3, [sp, #28]
 8006356:	9307      	strlt	r3, [sp, #28]
 8006358:	bfb8      	it	lt
 800635a:	9204      	strlt	r2, [sp, #16]
 800635c:	7823      	ldrb	r3, [r4, #0]
 800635e:	2b2e      	cmp	r3, #46	; 0x2e
 8006360:	d10c      	bne.n	800637c <_svfiprintf_r+0x130>
 8006362:	7863      	ldrb	r3, [r4, #1]
 8006364:	2b2a      	cmp	r3, #42	; 0x2a
 8006366:	d135      	bne.n	80063d4 <_svfiprintf_r+0x188>
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	1d1a      	adds	r2, r3, #4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	9203      	str	r2, [sp, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	bfb8      	it	lt
 8006374:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006378:	3402      	adds	r4, #2
 800637a:	9305      	str	r3, [sp, #20]
 800637c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006448 <_svfiprintf_r+0x1fc>
 8006380:	7821      	ldrb	r1, [r4, #0]
 8006382:	2203      	movs	r2, #3
 8006384:	4650      	mov	r0, sl
 8006386:	f7f9 ff43 	bl	8000210 <memchr>
 800638a:	b140      	cbz	r0, 800639e <_svfiprintf_r+0x152>
 800638c:	2340      	movs	r3, #64	; 0x40
 800638e:	eba0 000a 	sub.w	r0, r0, sl
 8006392:	fa03 f000 	lsl.w	r0, r3, r0
 8006396:	9b04      	ldr	r3, [sp, #16]
 8006398:	4303      	orrs	r3, r0
 800639a:	3401      	adds	r4, #1
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a2:	4826      	ldr	r0, [pc, #152]	; (800643c <_svfiprintf_r+0x1f0>)
 80063a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063a8:	2206      	movs	r2, #6
 80063aa:	f7f9 ff31 	bl	8000210 <memchr>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d038      	beq.n	8006424 <_svfiprintf_r+0x1d8>
 80063b2:	4b23      	ldr	r3, [pc, #140]	; (8006440 <_svfiprintf_r+0x1f4>)
 80063b4:	bb1b      	cbnz	r3, 80063fe <_svfiprintf_r+0x1b2>
 80063b6:	9b03      	ldr	r3, [sp, #12]
 80063b8:	3307      	adds	r3, #7
 80063ba:	f023 0307 	bic.w	r3, r3, #7
 80063be:	3308      	adds	r3, #8
 80063c0:	9303      	str	r3, [sp, #12]
 80063c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c4:	4433      	add	r3, r6
 80063c6:	9309      	str	r3, [sp, #36]	; 0x24
 80063c8:	e767      	b.n	800629a <_svfiprintf_r+0x4e>
 80063ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ce:	460c      	mov	r4, r1
 80063d0:	2001      	movs	r0, #1
 80063d2:	e7a5      	b.n	8006320 <_svfiprintf_r+0xd4>
 80063d4:	2300      	movs	r3, #0
 80063d6:	3401      	adds	r4, #1
 80063d8:	9305      	str	r3, [sp, #20]
 80063da:	4619      	mov	r1, r3
 80063dc:	f04f 0c0a 	mov.w	ip, #10
 80063e0:	4620      	mov	r0, r4
 80063e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063e6:	3a30      	subs	r2, #48	; 0x30
 80063e8:	2a09      	cmp	r2, #9
 80063ea:	d903      	bls.n	80063f4 <_svfiprintf_r+0x1a8>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0c5      	beq.n	800637c <_svfiprintf_r+0x130>
 80063f0:	9105      	str	r1, [sp, #20]
 80063f2:	e7c3      	b.n	800637c <_svfiprintf_r+0x130>
 80063f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80063f8:	4604      	mov	r4, r0
 80063fa:	2301      	movs	r3, #1
 80063fc:	e7f0      	b.n	80063e0 <_svfiprintf_r+0x194>
 80063fe:	ab03      	add	r3, sp, #12
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	462a      	mov	r2, r5
 8006404:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <_svfiprintf_r+0x1f8>)
 8006406:	a904      	add	r1, sp, #16
 8006408:	4638      	mov	r0, r7
 800640a:	f3af 8000 	nop.w
 800640e:	1c42      	adds	r2, r0, #1
 8006410:	4606      	mov	r6, r0
 8006412:	d1d6      	bne.n	80063c2 <_svfiprintf_r+0x176>
 8006414:	89ab      	ldrh	r3, [r5, #12]
 8006416:	065b      	lsls	r3, r3, #25
 8006418:	f53f af2c 	bmi.w	8006274 <_svfiprintf_r+0x28>
 800641c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800641e:	b01d      	add	sp, #116	; 0x74
 8006420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006424:	ab03      	add	r3, sp, #12
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	462a      	mov	r2, r5
 800642a:	4b06      	ldr	r3, [pc, #24]	; (8006444 <_svfiprintf_r+0x1f8>)
 800642c:	a904      	add	r1, sp, #16
 800642e:	4638      	mov	r0, r7
 8006430:	f000 f87a 	bl	8006528 <_printf_i>
 8006434:	e7eb      	b.n	800640e <_svfiprintf_r+0x1c2>
 8006436:	bf00      	nop
 8006438:	080085cc 	.word	0x080085cc
 800643c:	080085d6 	.word	0x080085d6
 8006440:	00000000 	.word	0x00000000
 8006444:	08006195 	.word	0x08006195
 8006448:	080085d2 	.word	0x080085d2

0800644c <_printf_common>:
 800644c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	4616      	mov	r6, r2
 8006452:	4699      	mov	r9, r3
 8006454:	688a      	ldr	r2, [r1, #8]
 8006456:	690b      	ldr	r3, [r1, #16]
 8006458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800645c:	4293      	cmp	r3, r2
 800645e:	bfb8      	it	lt
 8006460:	4613      	movlt	r3, r2
 8006462:	6033      	str	r3, [r6, #0]
 8006464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006468:	4607      	mov	r7, r0
 800646a:	460c      	mov	r4, r1
 800646c:	b10a      	cbz	r2, 8006472 <_printf_common+0x26>
 800646e:	3301      	adds	r3, #1
 8006470:	6033      	str	r3, [r6, #0]
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	0699      	lsls	r1, r3, #26
 8006476:	bf42      	ittt	mi
 8006478:	6833      	ldrmi	r3, [r6, #0]
 800647a:	3302      	addmi	r3, #2
 800647c:	6033      	strmi	r3, [r6, #0]
 800647e:	6825      	ldr	r5, [r4, #0]
 8006480:	f015 0506 	ands.w	r5, r5, #6
 8006484:	d106      	bne.n	8006494 <_printf_common+0x48>
 8006486:	f104 0a19 	add.w	sl, r4, #25
 800648a:	68e3      	ldr	r3, [r4, #12]
 800648c:	6832      	ldr	r2, [r6, #0]
 800648e:	1a9b      	subs	r3, r3, r2
 8006490:	42ab      	cmp	r3, r5
 8006492:	dc26      	bgt.n	80064e2 <_printf_common+0x96>
 8006494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006498:	1e13      	subs	r3, r2, #0
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	bf18      	it	ne
 800649e:	2301      	movne	r3, #1
 80064a0:	0692      	lsls	r2, r2, #26
 80064a2:	d42b      	bmi.n	80064fc <_printf_common+0xb0>
 80064a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064a8:	4649      	mov	r1, r9
 80064aa:	4638      	mov	r0, r7
 80064ac:	47c0      	blx	r8
 80064ae:	3001      	adds	r0, #1
 80064b0:	d01e      	beq.n	80064f0 <_printf_common+0xa4>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	68e5      	ldr	r5, [r4, #12]
 80064b6:	6832      	ldr	r2, [r6, #0]
 80064b8:	f003 0306 	and.w	r3, r3, #6
 80064bc:	2b04      	cmp	r3, #4
 80064be:	bf08      	it	eq
 80064c0:	1aad      	subeq	r5, r5, r2
 80064c2:	68a3      	ldr	r3, [r4, #8]
 80064c4:	6922      	ldr	r2, [r4, #16]
 80064c6:	bf0c      	ite	eq
 80064c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064cc:	2500      	movne	r5, #0
 80064ce:	4293      	cmp	r3, r2
 80064d0:	bfc4      	itt	gt
 80064d2:	1a9b      	subgt	r3, r3, r2
 80064d4:	18ed      	addgt	r5, r5, r3
 80064d6:	2600      	movs	r6, #0
 80064d8:	341a      	adds	r4, #26
 80064da:	42b5      	cmp	r5, r6
 80064dc:	d11a      	bne.n	8006514 <_printf_common+0xc8>
 80064de:	2000      	movs	r0, #0
 80064e0:	e008      	b.n	80064f4 <_printf_common+0xa8>
 80064e2:	2301      	movs	r3, #1
 80064e4:	4652      	mov	r2, sl
 80064e6:	4649      	mov	r1, r9
 80064e8:	4638      	mov	r0, r7
 80064ea:	47c0      	blx	r8
 80064ec:	3001      	adds	r0, #1
 80064ee:	d103      	bne.n	80064f8 <_printf_common+0xac>
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f8:	3501      	adds	r5, #1
 80064fa:	e7c6      	b.n	800648a <_printf_common+0x3e>
 80064fc:	18e1      	adds	r1, r4, r3
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	2030      	movs	r0, #48	; 0x30
 8006502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006506:	4422      	add	r2, r4
 8006508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800650c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006510:	3302      	adds	r3, #2
 8006512:	e7c7      	b.n	80064a4 <_printf_common+0x58>
 8006514:	2301      	movs	r3, #1
 8006516:	4622      	mov	r2, r4
 8006518:	4649      	mov	r1, r9
 800651a:	4638      	mov	r0, r7
 800651c:	47c0      	blx	r8
 800651e:	3001      	adds	r0, #1
 8006520:	d0e6      	beq.n	80064f0 <_printf_common+0xa4>
 8006522:	3601      	adds	r6, #1
 8006524:	e7d9      	b.n	80064da <_printf_common+0x8e>
	...

08006528 <_printf_i>:
 8006528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	7e0f      	ldrb	r7, [r1, #24]
 800652e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006530:	2f78      	cmp	r7, #120	; 0x78
 8006532:	4691      	mov	r9, r2
 8006534:	4680      	mov	r8, r0
 8006536:	460c      	mov	r4, r1
 8006538:	469a      	mov	sl, r3
 800653a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800653e:	d807      	bhi.n	8006550 <_printf_i+0x28>
 8006540:	2f62      	cmp	r7, #98	; 0x62
 8006542:	d80a      	bhi.n	800655a <_printf_i+0x32>
 8006544:	2f00      	cmp	r7, #0
 8006546:	f000 80d8 	beq.w	80066fa <_printf_i+0x1d2>
 800654a:	2f58      	cmp	r7, #88	; 0x58
 800654c:	f000 80a3 	beq.w	8006696 <_printf_i+0x16e>
 8006550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006558:	e03a      	b.n	80065d0 <_printf_i+0xa8>
 800655a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800655e:	2b15      	cmp	r3, #21
 8006560:	d8f6      	bhi.n	8006550 <_printf_i+0x28>
 8006562:	a101      	add	r1, pc, #4	; (adr r1, 8006568 <_printf_i+0x40>)
 8006564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006568:	080065c1 	.word	0x080065c1
 800656c:	080065d5 	.word	0x080065d5
 8006570:	08006551 	.word	0x08006551
 8006574:	08006551 	.word	0x08006551
 8006578:	08006551 	.word	0x08006551
 800657c:	08006551 	.word	0x08006551
 8006580:	080065d5 	.word	0x080065d5
 8006584:	08006551 	.word	0x08006551
 8006588:	08006551 	.word	0x08006551
 800658c:	08006551 	.word	0x08006551
 8006590:	08006551 	.word	0x08006551
 8006594:	080066e1 	.word	0x080066e1
 8006598:	08006605 	.word	0x08006605
 800659c:	080066c3 	.word	0x080066c3
 80065a0:	08006551 	.word	0x08006551
 80065a4:	08006551 	.word	0x08006551
 80065a8:	08006703 	.word	0x08006703
 80065ac:	08006551 	.word	0x08006551
 80065b0:	08006605 	.word	0x08006605
 80065b4:	08006551 	.word	0x08006551
 80065b8:	08006551 	.word	0x08006551
 80065bc:	080066cb 	.word	0x080066cb
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	1d1a      	adds	r2, r3, #4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	602a      	str	r2, [r5, #0]
 80065c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0a3      	b.n	800671c <_printf_i+0x1f4>
 80065d4:	6820      	ldr	r0, [r4, #0]
 80065d6:	6829      	ldr	r1, [r5, #0]
 80065d8:	0606      	lsls	r6, r0, #24
 80065da:	f101 0304 	add.w	r3, r1, #4
 80065de:	d50a      	bpl.n	80065f6 <_printf_i+0xce>
 80065e0:	680e      	ldr	r6, [r1, #0]
 80065e2:	602b      	str	r3, [r5, #0]
 80065e4:	2e00      	cmp	r6, #0
 80065e6:	da03      	bge.n	80065f0 <_printf_i+0xc8>
 80065e8:	232d      	movs	r3, #45	; 0x2d
 80065ea:	4276      	negs	r6, r6
 80065ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f0:	485e      	ldr	r0, [pc, #376]	; (800676c <_printf_i+0x244>)
 80065f2:	230a      	movs	r3, #10
 80065f4:	e019      	b.n	800662a <_printf_i+0x102>
 80065f6:	680e      	ldr	r6, [r1, #0]
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065fe:	bf18      	it	ne
 8006600:	b236      	sxthne	r6, r6
 8006602:	e7ef      	b.n	80065e4 <_printf_i+0xbc>
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	6820      	ldr	r0, [r4, #0]
 8006608:	1d19      	adds	r1, r3, #4
 800660a:	6029      	str	r1, [r5, #0]
 800660c:	0601      	lsls	r1, r0, #24
 800660e:	d501      	bpl.n	8006614 <_printf_i+0xec>
 8006610:	681e      	ldr	r6, [r3, #0]
 8006612:	e002      	b.n	800661a <_printf_i+0xf2>
 8006614:	0646      	lsls	r6, r0, #25
 8006616:	d5fb      	bpl.n	8006610 <_printf_i+0xe8>
 8006618:	881e      	ldrh	r6, [r3, #0]
 800661a:	4854      	ldr	r0, [pc, #336]	; (800676c <_printf_i+0x244>)
 800661c:	2f6f      	cmp	r7, #111	; 0x6f
 800661e:	bf0c      	ite	eq
 8006620:	2308      	moveq	r3, #8
 8006622:	230a      	movne	r3, #10
 8006624:	2100      	movs	r1, #0
 8006626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800662a:	6865      	ldr	r5, [r4, #4]
 800662c:	60a5      	str	r5, [r4, #8]
 800662e:	2d00      	cmp	r5, #0
 8006630:	bfa2      	ittt	ge
 8006632:	6821      	ldrge	r1, [r4, #0]
 8006634:	f021 0104 	bicge.w	r1, r1, #4
 8006638:	6021      	strge	r1, [r4, #0]
 800663a:	b90e      	cbnz	r6, 8006640 <_printf_i+0x118>
 800663c:	2d00      	cmp	r5, #0
 800663e:	d04d      	beq.n	80066dc <_printf_i+0x1b4>
 8006640:	4615      	mov	r5, r2
 8006642:	fbb6 f1f3 	udiv	r1, r6, r3
 8006646:	fb03 6711 	mls	r7, r3, r1, r6
 800664a:	5dc7      	ldrb	r7, [r0, r7]
 800664c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006650:	4637      	mov	r7, r6
 8006652:	42bb      	cmp	r3, r7
 8006654:	460e      	mov	r6, r1
 8006656:	d9f4      	bls.n	8006642 <_printf_i+0x11a>
 8006658:	2b08      	cmp	r3, #8
 800665a:	d10b      	bne.n	8006674 <_printf_i+0x14c>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	07de      	lsls	r6, r3, #31
 8006660:	d508      	bpl.n	8006674 <_printf_i+0x14c>
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	6861      	ldr	r1, [r4, #4]
 8006666:	4299      	cmp	r1, r3
 8006668:	bfde      	ittt	le
 800666a:	2330      	movle	r3, #48	; 0x30
 800666c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006670:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006674:	1b52      	subs	r2, r2, r5
 8006676:	6122      	str	r2, [r4, #16]
 8006678:	f8cd a000 	str.w	sl, [sp]
 800667c:	464b      	mov	r3, r9
 800667e:	aa03      	add	r2, sp, #12
 8006680:	4621      	mov	r1, r4
 8006682:	4640      	mov	r0, r8
 8006684:	f7ff fee2 	bl	800644c <_printf_common>
 8006688:	3001      	adds	r0, #1
 800668a:	d14c      	bne.n	8006726 <_printf_i+0x1fe>
 800668c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006690:	b004      	add	sp, #16
 8006692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006696:	4835      	ldr	r0, [pc, #212]	; (800676c <_printf_i+0x244>)
 8006698:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800669c:	6829      	ldr	r1, [r5, #0]
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80066a4:	6029      	str	r1, [r5, #0]
 80066a6:	061d      	lsls	r5, r3, #24
 80066a8:	d514      	bpl.n	80066d4 <_printf_i+0x1ac>
 80066aa:	07df      	lsls	r7, r3, #31
 80066ac:	bf44      	itt	mi
 80066ae:	f043 0320 	orrmi.w	r3, r3, #32
 80066b2:	6023      	strmi	r3, [r4, #0]
 80066b4:	b91e      	cbnz	r6, 80066be <_printf_i+0x196>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	f023 0320 	bic.w	r3, r3, #32
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	2310      	movs	r3, #16
 80066c0:	e7b0      	b.n	8006624 <_printf_i+0xfc>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	f043 0320 	orr.w	r3, r3, #32
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	2378      	movs	r3, #120	; 0x78
 80066cc:	4828      	ldr	r0, [pc, #160]	; (8006770 <_printf_i+0x248>)
 80066ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066d2:	e7e3      	b.n	800669c <_printf_i+0x174>
 80066d4:	0659      	lsls	r1, r3, #25
 80066d6:	bf48      	it	mi
 80066d8:	b2b6      	uxthmi	r6, r6
 80066da:	e7e6      	b.n	80066aa <_printf_i+0x182>
 80066dc:	4615      	mov	r5, r2
 80066de:	e7bb      	b.n	8006658 <_printf_i+0x130>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	6826      	ldr	r6, [r4, #0]
 80066e4:	6961      	ldr	r1, [r4, #20]
 80066e6:	1d18      	adds	r0, r3, #4
 80066e8:	6028      	str	r0, [r5, #0]
 80066ea:	0635      	lsls	r5, r6, #24
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	d501      	bpl.n	80066f4 <_printf_i+0x1cc>
 80066f0:	6019      	str	r1, [r3, #0]
 80066f2:	e002      	b.n	80066fa <_printf_i+0x1d2>
 80066f4:	0670      	lsls	r0, r6, #25
 80066f6:	d5fb      	bpl.n	80066f0 <_printf_i+0x1c8>
 80066f8:	8019      	strh	r1, [r3, #0]
 80066fa:	2300      	movs	r3, #0
 80066fc:	6123      	str	r3, [r4, #16]
 80066fe:	4615      	mov	r5, r2
 8006700:	e7ba      	b.n	8006678 <_printf_i+0x150>
 8006702:	682b      	ldr	r3, [r5, #0]
 8006704:	1d1a      	adds	r2, r3, #4
 8006706:	602a      	str	r2, [r5, #0]
 8006708:	681d      	ldr	r5, [r3, #0]
 800670a:	6862      	ldr	r2, [r4, #4]
 800670c:	2100      	movs	r1, #0
 800670e:	4628      	mov	r0, r5
 8006710:	f7f9 fd7e 	bl	8000210 <memchr>
 8006714:	b108      	cbz	r0, 800671a <_printf_i+0x1f2>
 8006716:	1b40      	subs	r0, r0, r5
 8006718:	6060      	str	r0, [r4, #4]
 800671a:	6863      	ldr	r3, [r4, #4]
 800671c:	6123      	str	r3, [r4, #16]
 800671e:	2300      	movs	r3, #0
 8006720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006724:	e7a8      	b.n	8006678 <_printf_i+0x150>
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	462a      	mov	r2, r5
 800672a:	4649      	mov	r1, r9
 800672c:	4640      	mov	r0, r8
 800672e:	47d0      	blx	sl
 8006730:	3001      	adds	r0, #1
 8006732:	d0ab      	beq.n	800668c <_printf_i+0x164>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	079b      	lsls	r3, r3, #30
 8006738:	d413      	bmi.n	8006762 <_printf_i+0x23a>
 800673a:	68e0      	ldr	r0, [r4, #12]
 800673c:	9b03      	ldr	r3, [sp, #12]
 800673e:	4298      	cmp	r0, r3
 8006740:	bfb8      	it	lt
 8006742:	4618      	movlt	r0, r3
 8006744:	e7a4      	b.n	8006690 <_printf_i+0x168>
 8006746:	2301      	movs	r3, #1
 8006748:	4632      	mov	r2, r6
 800674a:	4649      	mov	r1, r9
 800674c:	4640      	mov	r0, r8
 800674e:	47d0      	blx	sl
 8006750:	3001      	adds	r0, #1
 8006752:	d09b      	beq.n	800668c <_printf_i+0x164>
 8006754:	3501      	adds	r5, #1
 8006756:	68e3      	ldr	r3, [r4, #12]
 8006758:	9903      	ldr	r1, [sp, #12]
 800675a:	1a5b      	subs	r3, r3, r1
 800675c:	42ab      	cmp	r3, r5
 800675e:	dcf2      	bgt.n	8006746 <_printf_i+0x21e>
 8006760:	e7eb      	b.n	800673a <_printf_i+0x212>
 8006762:	2500      	movs	r5, #0
 8006764:	f104 0619 	add.w	r6, r4, #25
 8006768:	e7f5      	b.n	8006756 <_printf_i+0x22e>
 800676a:	bf00      	nop
 800676c:	080085dd 	.word	0x080085dd
 8006770:	080085ee 	.word	0x080085ee

08006774 <memcpy>:
 8006774:	440a      	add	r2, r1
 8006776:	4291      	cmp	r1, r2
 8006778:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800677c:	d100      	bne.n	8006780 <memcpy+0xc>
 800677e:	4770      	bx	lr
 8006780:	b510      	push	{r4, lr}
 8006782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800678a:	4291      	cmp	r1, r2
 800678c:	d1f9      	bne.n	8006782 <memcpy+0xe>
 800678e:	bd10      	pop	{r4, pc}

08006790 <memmove>:
 8006790:	4288      	cmp	r0, r1
 8006792:	b510      	push	{r4, lr}
 8006794:	eb01 0402 	add.w	r4, r1, r2
 8006798:	d902      	bls.n	80067a0 <memmove+0x10>
 800679a:	4284      	cmp	r4, r0
 800679c:	4623      	mov	r3, r4
 800679e:	d807      	bhi.n	80067b0 <memmove+0x20>
 80067a0:	1e43      	subs	r3, r0, #1
 80067a2:	42a1      	cmp	r1, r4
 80067a4:	d008      	beq.n	80067b8 <memmove+0x28>
 80067a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067ae:	e7f8      	b.n	80067a2 <memmove+0x12>
 80067b0:	4402      	add	r2, r0
 80067b2:	4601      	mov	r1, r0
 80067b4:	428a      	cmp	r2, r1
 80067b6:	d100      	bne.n	80067ba <memmove+0x2a>
 80067b8:	bd10      	pop	{r4, pc}
 80067ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067c2:	e7f7      	b.n	80067b4 <memmove+0x24>

080067c4 <_free_r>:
 80067c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067c6:	2900      	cmp	r1, #0
 80067c8:	d044      	beq.n	8006854 <_free_r+0x90>
 80067ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ce:	9001      	str	r0, [sp, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f1a1 0404 	sub.w	r4, r1, #4
 80067d6:	bfb8      	it	lt
 80067d8:	18e4      	addlt	r4, r4, r3
 80067da:	f000 f913 	bl	8006a04 <__malloc_lock>
 80067de:	4a1e      	ldr	r2, [pc, #120]	; (8006858 <_free_r+0x94>)
 80067e0:	9801      	ldr	r0, [sp, #4]
 80067e2:	6813      	ldr	r3, [r2, #0]
 80067e4:	b933      	cbnz	r3, 80067f4 <_free_r+0x30>
 80067e6:	6063      	str	r3, [r4, #4]
 80067e8:	6014      	str	r4, [r2, #0]
 80067ea:	b003      	add	sp, #12
 80067ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067f0:	f000 b90e 	b.w	8006a10 <__malloc_unlock>
 80067f4:	42a3      	cmp	r3, r4
 80067f6:	d908      	bls.n	800680a <_free_r+0x46>
 80067f8:	6825      	ldr	r5, [r4, #0]
 80067fa:	1961      	adds	r1, r4, r5
 80067fc:	428b      	cmp	r3, r1
 80067fe:	bf01      	itttt	eq
 8006800:	6819      	ldreq	r1, [r3, #0]
 8006802:	685b      	ldreq	r3, [r3, #4]
 8006804:	1949      	addeq	r1, r1, r5
 8006806:	6021      	streq	r1, [r4, #0]
 8006808:	e7ed      	b.n	80067e6 <_free_r+0x22>
 800680a:	461a      	mov	r2, r3
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	b10b      	cbz	r3, 8006814 <_free_r+0x50>
 8006810:	42a3      	cmp	r3, r4
 8006812:	d9fa      	bls.n	800680a <_free_r+0x46>
 8006814:	6811      	ldr	r1, [r2, #0]
 8006816:	1855      	adds	r5, r2, r1
 8006818:	42a5      	cmp	r5, r4
 800681a:	d10b      	bne.n	8006834 <_free_r+0x70>
 800681c:	6824      	ldr	r4, [r4, #0]
 800681e:	4421      	add	r1, r4
 8006820:	1854      	adds	r4, r2, r1
 8006822:	42a3      	cmp	r3, r4
 8006824:	6011      	str	r1, [r2, #0]
 8006826:	d1e0      	bne.n	80067ea <_free_r+0x26>
 8006828:	681c      	ldr	r4, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	6053      	str	r3, [r2, #4]
 800682e:	4421      	add	r1, r4
 8006830:	6011      	str	r1, [r2, #0]
 8006832:	e7da      	b.n	80067ea <_free_r+0x26>
 8006834:	d902      	bls.n	800683c <_free_r+0x78>
 8006836:	230c      	movs	r3, #12
 8006838:	6003      	str	r3, [r0, #0]
 800683a:	e7d6      	b.n	80067ea <_free_r+0x26>
 800683c:	6825      	ldr	r5, [r4, #0]
 800683e:	1961      	adds	r1, r4, r5
 8006840:	428b      	cmp	r3, r1
 8006842:	bf04      	itt	eq
 8006844:	6819      	ldreq	r1, [r3, #0]
 8006846:	685b      	ldreq	r3, [r3, #4]
 8006848:	6063      	str	r3, [r4, #4]
 800684a:	bf04      	itt	eq
 800684c:	1949      	addeq	r1, r1, r5
 800684e:	6021      	streq	r1, [r4, #0]
 8006850:	6054      	str	r4, [r2, #4]
 8006852:	e7ca      	b.n	80067ea <_free_r+0x26>
 8006854:	b003      	add	sp, #12
 8006856:	bd30      	pop	{r4, r5, pc}
 8006858:	20000550 	.word	0x20000550

0800685c <sbrk_aligned>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	4e0e      	ldr	r6, [pc, #56]	; (8006898 <sbrk_aligned+0x3c>)
 8006860:	460c      	mov	r4, r1
 8006862:	6831      	ldr	r1, [r6, #0]
 8006864:	4605      	mov	r5, r0
 8006866:	b911      	cbnz	r1, 800686e <sbrk_aligned+0x12>
 8006868:	f000 f8bc 	bl	80069e4 <_sbrk_r>
 800686c:	6030      	str	r0, [r6, #0]
 800686e:	4621      	mov	r1, r4
 8006870:	4628      	mov	r0, r5
 8006872:	f000 f8b7 	bl	80069e4 <_sbrk_r>
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	d00a      	beq.n	8006890 <sbrk_aligned+0x34>
 800687a:	1cc4      	adds	r4, r0, #3
 800687c:	f024 0403 	bic.w	r4, r4, #3
 8006880:	42a0      	cmp	r0, r4
 8006882:	d007      	beq.n	8006894 <sbrk_aligned+0x38>
 8006884:	1a21      	subs	r1, r4, r0
 8006886:	4628      	mov	r0, r5
 8006888:	f000 f8ac 	bl	80069e4 <_sbrk_r>
 800688c:	3001      	adds	r0, #1
 800688e:	d101      	bne.n	8006894 <sbrk_aligned+0x38>
 8006890:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006894:	4620      	mov	r0, r4
 8006896:	bd70      	pop	{r4, r5, r6, pc}
 8006898:	20000554 	.word	0x20000554

0800689c <_malloc_r>:
 800689c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a0:	1ccd      	adds	r5, r1, #3
 80068a2:	f025 0503 	bic.w	r5, r5, #3
 80068a6:	3508      	adds	r5, #8
 80068a8:	2d0c      	cmp	r5, #12
 80068aa:	bf38      	it	cc
 80068ac:	250c      	movcc	r5, #12
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	4607      	mov	r7, r0
 80068b2:	db01      	blt.n	80068b8 <_malloc_r+0x1c>
 80068b4:	42a9      	cmp	r1, r5
 80068b6:	d905      	bls.n	80068c4 <_malloc_r+0x28>
 80068b8:	230c      	movs	r3, #12
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	2600      	movs	r6, #0
 80068be:	4630      	mov	r0, r6
 80068c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c4:	4e2e      	ldr	r6, [pc, #184]	; (8006980 <_malloc_r+0xe4>)
 80068c6:	f000 f89d 	bl	8006a04 <__malloc_lock>
 80068ca:	6833      	ldr	r3, [r6, #0]
 80068cc:	461c      	mov	r4, r3
 80068ce:	bb34      	cbnz	r4, 800691e <_malloc_r+0x82>
 80068d0:	4629      	mov	r1, r5
 80068d2:	4638      	mov	r0, r7
 80068d4:	f7ff ffc2 	bl	800685c <sbrk_aligned>
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	4604      	mov	r4, r0
 80068dc:	d14d      	bne.n	800697a <_malloc_r+0xde>
 80068de:	6834      	ldr	r4, [r6, #0]
 80068e0:	4626      	mov	r6, r4
 80068e2:	2e00      	cmp	r6, #0
 80068e4:	d140      	bne.n	8006968 <_malloc_r+0xcc>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	4631      	mov	r1, r6
 80068ea:	4638      	mov	r0, r7
 80068ec:	eb04 0803 	add.w	r8, r4, r3
 80068f0:	f000 f878 	bl	80069e4 <_sbrk_r>
 80068f4:	4580      	cmp	r8, r0
 80068f6:	d13a      	bne.n	800696e <_malloc_r+0xd2>
 80068f8:	6821      	ldr	r1, [r4, #0]
 80068fa:	3503      	adds	r5, #3
 80068fc:	1a6d      	subs	r5, r5, r1
 80068fe:	f025 0503 	bic.w	r5, r5, #3
 8006902:	3508      	adds	r5, #8
 8006904:	2d0c      	cmp	r5, #12
 8006906:	bf38      	it	cc
 8006908:	250c      	movcc	r5, #12
 800690a:	4629      	mov	r1, r5
 800690c:	4638      	mov	r0, r7
 800690e:	f7ff ffa5 	bl	800685c <sbrk_aligned>
 8006912:	3001      	adds	r0, #1
 8006914:	d02b      	beq.n	800696e <_malloc_r+0xd2>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	442b      	add	r3, r5
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	e00e      	b.n	800693c <_malloc_r+0xa0>
 800691e:	6822      	ldr	r2, [r4, #0]
 8006920:	1b52      	subs	r2, r2, r5
 8006922:	d41e      	bmi.n	8006962 <_malloc_r+0xc6>
 8006924:	2a0b      	cmp	r2, #11
 8006926:	d916      	bls.n	8006956 <_malloc_r+0xba>
 8006928:	1961      	adds	r1, r4, r5
 800692a:	42a3      	cmp	r3, r4
 800692c:	6025      	str	r5, [r4, #0]
 800692e:	bf18      	it	ne
 8006930:	6059      	strne	r1, [r3, #4]
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	bf08      	it	eq
 8006936:	6031      	streq	r1, [r6, #0]
 8006938:	5162      	str	r2, [r4, r5]
 800693a:	604b      	str	r3, [r1, #4]
 800693c:	4638      	mov	r0, r7
 800693e:	f104 060b 	add.w	r6, r4, #11
 8006942:	f000 f865 	bl	8006a10 <__malloc_unlock>
 8006946:	f026 0607 	bic.w	r6, r6, #7
 800694a:	1d23      	adds	r3, r4, #4
 800694c:	1af2      	subs	r2, r6, r3
 800694e:	d0b6      	beq.n	80068be <_malloc_r+0x22>
 8006950:	1b9b      	subs	r3, r3, r6
 8006952:	50a3      	str	r3, [r4, r2]
 8006954:	e7b3      	b.n	80068be <_malloc_r+0x22>
 8006956:	6862      	ldr	r2, [r4, #4]
 8006958:	42a3      	cmp	r3, r4
 800695a:	bf0c      	ite	eq
 800695c:	6032      	streq	r2, [r6, #0]
 800695e:	605a      	strne	r2, [r3, #4]
 8006960:	e7ec      	b.n	800693c <_malloc_r+0xa0>
 8006962:	4623      	mov	r3, r4
 8006964:	6864      	ldr	r4, [r4, #4]
 8006966:	e7b2      	b.n	80068ce <_malloc_r+0x32>
 8006968:	4634      	mov	r4, r6
 800696a:	6876      	ldr	r6, [r6, #4]
 800696c:	e7b9      	b.n	80068e2 <_malloc_r+0x46>
 800696e:	230c      	movs	r3, #12
 8006970:	603b      	str	r3, [r7, #0]
 8006972:	4638      	mov	r0, r7
 8006974:	f000 f84c 	bl	8006a10 <__malloc_unlock>
 8006978:	e7a1      	b.n	80068be <_malloc_r+0x22>
 800697a:	6025      	str	r5, [r4, #0]
 800697c:	e7de      	b.n	800693c <_malloc_r+0xa0>
 800697e:	bf00      	nop
 8006980:	20000550 	.word	0x20000550

08006984 <_realloc_r>:
 8006984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006988:	4680      	mov	r8, r0
 800698a:	4614      	mov	r4, r2
 800698c:	460e      	mov	r6, r1
 800698e:	b921      	cbnz	r1, 800699a <_realloc_r+0x16>
 8006990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006994:	4611      	mov	r1, r2
 8006996:	f7ff bf81 	b.w	800689c <_malloc_r>
 800699a:	b92a      	cbnz	r2, 80069a8 <_realloc_r+0x24>
 800699c:	f7ff ff12 	bl	80067c4 <_free_r>
 80069a0:	4625      	mov	r5, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a8:	f000 f838 	bl	8006a1c <_malloc_usable_size_r>
 80069ac:	4284      	cmp	r4, r0
 80069ae:	4607      	mov	r7, r0
 80069b0:	d802      	bhi.n	80069b8 <_realloc_r+0x34>
 80069b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069b6:	d812      	bhi.n	80069de <_realloc_r+0x5a>
 80069b8:	4621      	mov	r1, r4
 80069ba:	4640      	mov	r0, r8
 80069bc:	f7ff ff6e 	bl	800689c <_malloc_r>
 80069c0:	4605      	mov	r5, r0
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d0ed      	beq.n	80069a2 <_realloc_r+0x1e>
 80069c6:	42bc      	cmp	r4, r7
 80069c8:	4622      	mov	r2, r4
 80069ca:	4631      	mov	r1, r6
 80069cc:	bf28      	it	cs
 80069ce:	463a      	movcs	r2, r7
 80069d0:	f7ff fed0 	bl	8006774 <memcpy>
 80069d4:	4631      	mov	r1, r6
 80069d6:	4640      	mov	r0, r8
 80069d8:	f7ff fef4 	bl	80067c4 <_free_r>
 80069dc:	e7e1      	b.n	80069a2 <_realloc_r+0x1e>
 80069de:	4635      	mov	r5, r6
 80069e0:	e7df      	b.n	80069a2 <_realloc_r+0x1e>
	...

080069e4 <_sbrk_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4d06      	ldr	r5, [pc, #24]	; (8006a00 <_sbrk_r+0x1c>)
 80069e8:	2300      	movs	r3, #0
 80069ea:	4604      	mov	r4, r0
 80069ec:	4608      	mov	r0, r1
 80069ee:	602b      	str	r3, [r5, #0]
 80069f0:	f7fa fc6c 	bl	80012cc <_sbrk>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d102      	bne.n	80069fe <_sbrk_r+0x1a>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b103      	cbz	r3, 80069fe <_sbrk_r+0x1a>
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	20000558 	.word	0x20000558

08006a04 <__malloc_lock>:
 8006a04:	4801      	ldr	r0, [pc, #4]	; (8006a0c <__malloc_lock+0x8>)
 8006a06:	f000 b811 	b.w	8006a2c <__retarget_lock_acquire_recursive>
 8006a0a:	bf00      	nop
 8006a0c:	2000055c 	.word	0x2000055c

08006a10 <__malloc_unlock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__malloc_unlock+0x8>)
 8006a12:	f000 b80c 	b.w	8006a2e <__retarget_lock_release_recursive>
 8006a16:	bf00      	nop
 8006a18:	2000055c 	.word	0x2000055c

08006a1c <_malloc_usable_size_r>:
 8006a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a20:	1f18      	subs	r0, r3, #4
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bfbc      	itt	lt
 8006a26:	580b      	ldrlt	r3, [r1, r0]
 8006a28:	18c0      	addlt	r0, r0, r3
 8006a2a:	4770      	bx	lr

08006a2c <__retarget_lock_acquire_recursive>:
 8006a2c:	4770      	bx	lr

08006a2e <__retarget_lock_release_recursive>:
 8006a2e:	4770      	bx	lr

08006a30 <_init>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	bf00      	nop
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr

08006a3c <_fini>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	bf00      	nop
 8006a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a42:	bc08      	pop	{r3}
 8006a44:	469e      	mov	lr, r3
 8006a46:	4770      	bx	lr
