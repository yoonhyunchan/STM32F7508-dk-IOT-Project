
test5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006788  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bb8  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008510  08008510  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008518  08008518  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  2000007c  0800859c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  0800859c  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015aa7  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de1  00000000  00000000  00035b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00038938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  000399b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028203  00000000  00000000  0003a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014867  00000000  00000000  00062af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7114  00000000  00000000  0007735a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e46e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004838  00000000  00000000  0016e4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006940 	.word	0x08006940

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006940 	.word	0x08006940

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b0be      	sub	sp, #248	; 0xf8
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 fe15 	bl	80021e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f8f3 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fabf 	bl	8000b44 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80005c6:	f000 f97d 	bl	80008c4 <MX_DMA2D_Init>
  MX_QUADSPI_Init();
 80005ca:	f000 fa5f 	bl	8000a8c <MX_QUADSPI_Init>
  MX_USART6_UART_Init();
 80005ce:	f000 fa89 	bl	8000ae4 <MX_USART6_UART_Init>
  MX_CRC_Init();
 80005d2:	f000 f955 	bl	8000880 <MX_CRC_Init>
  MX_LTDC_Init();
 80005d6:	f000 f9a7 	bl	8000928 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */

  product p1 = {"product1", " 10000  ", " 1", "10000"};
 80005da:	4b61      	ldr	r3, [pc, #388]	; (8000760 <main+0x1ac>)
 80005dc:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  product p2 = {"product2", " 20000  ", " 2", "40000"};
 80005ee:	4b5d      	ldr	r3, [pc, #372]	; (8000764 <main+0x1b0>)
 80005f0:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  product p3 = {"product3", " 30000  ", " 3", "90000"};
 8000602:	4b59      	ldr	r3, [pc, #356]	; (8000768 <main+0x1b4>)
 8000604:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  product p4 = {"product4", " 40000  ", " 4", "160000"};
 8000616:	4b55      	ldr	r3, [pc, #340]	; (800076c <main+0x1b8>)
 8000618:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800061c:	461d      	mov	r5, r3
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000626:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   // 변수 값을 문자열로 변환
   char buffer1[30];
   sprintf(buffer1, " %s|%s|%s|%s", p1.name, p1.price, p1.quantity, p1.total_price);
 800062a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800062e:	f103 0109 	add.w	r1, r3, #9
 8000632:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8000636:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800063a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800063e:	3315      	adds	r3, #21
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000646:	3312      	adds	r3, #18
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	460b      	mov	r3, r1
 800064c:	4948      	ldr	r1, [pc, #288]	; (8000770 <main+0x1bc>)
 800064e:	f005 fd09 	bl	8006064 <siprintf>
   char buffer2[30];
   sprintf(buffer2, " %s|%s|%s|%s", p2.name, p2.price, p2.quantity, p2.total_price);
 8000652:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000656:	f103 0109 	add.w	r1, r3, #9
 800065a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800065e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000662:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000666:	3315      	adds	r3, #21
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800066e:	3312      	adds	r3, #18
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	460b      	mov	r3, r1
 8000674:	493e      	ldr	r1, [pc, #248]	; (8000770 <main+0x1bc>)
 8000676:	f005 fcf5 	bl	8006064 <siprintf>
   char buffer3[30];
   sprintf(buffer3, " %s|%s|%s|%s", p3.name, p3.price, p3.quantity, p3.total_price);
 800067a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800067e:	f103 0109 	add.w	r1, r3, #9
 8000682:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000686:	f107 0020 	add.w	r0, r7, #32
 800068a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800068e:	3315      	adds	r3, #21
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000696:	3312      	adds	r3, #18
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	460b      	mov	r3, r1
 800069c:	4934      	ldr	r1, [pc, #208]	; (8000770 <main+0x1bc>)
 800069e:	f005 fce1 	bl	8006064 <siprintf>
   char buffer4[30];
   sprintf(buffer4, " %s|%s|%s|%s", p4.name, p4.price, p4.quantity, p4.total_price);
 80006a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006a6:	f103 0109 	add.w	r1, r3, #9
 80006aa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80006ae:	4638      	mov	r0, r7
 80006b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006b4:	3315      	adds	r3, #21
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006bc:	3312      	adds	r3, #18
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	460b      	mov	r3, r1
 80006c2:	492b      	ldr	r1, [pc, #172]	; (8000770 <main+0x1bc>)
 80006c4:	f005 fcce 	bl	8006064 <siprintf>

  int i;
  LCD_Config();
 80006c8:	f000 f85a 	bl	8000780 <LCD_Config>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80006cc:	4829      	ldr	r0, [pc, #164]	; (8000774 <main+0x1c0>)
 80006ce:	f000 fefb 	bl	80014c8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80006d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006d6:	f000 ff0f 	bl	80014f8 <BSP_LCD_SetBackColor>
  BSP_LCD_DrawLine(10,10,470,10);
 80006da:	230a      	movs	r3, #10
 80006dc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80006e0:	210a      	movs	r1, #10
 80006e2:	200a      	movs	r0, #10
 80006e4:	f001 f89e 	bl	8001824 <BSP_LCD_DrawLine>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"SMART CART", CENTER_MODE);
 80006e8:	2301      	movs	r3, #1
 80006ea:	4a23      	ldr	r2, [pc, #140]	; (8000778 <main+0x1c4>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 ffb8 	bl	8001664 <BSP_LCD_DisplayStringAt>
//  for(i=2; i<10; i+=2){
//
//	  BSP_LCD_DisplayStringAtLine(i, (uint8_t*) " Product1| BTN    |ade |UT!");
//  }

  BSP_LCD_DisplayStringAtLine(2, buffer1);
 80006f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006f8:	4619      	mov	r1, r3
 80006fa:	2002      	movs	r0, #2
 80006fc:	f001 f87a 	bl	80017f4 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(4, buffer2);
 8000700:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000704:	4619      	mov	r1, r3
 8000706:	2004      	movs	r0, #4
 8000708:	f001 f874 	bl	80017f4 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(6, buffer3);
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4619      	mov	r1, r3
 8000712:	2006      	movs	r0, #6
 8000714:	f001 f86e 	bl	80017f4 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(8, buffer4);
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	2008      	movs	r0, #8
 800071e:	f001 f869 	bl	80017f4 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(10, " Total Price :        300000");
 8000722:	4916      	ldr	r1, [pc, #88]	; (800077c <main+0x1c8>)
 8000724:	200a      	movs	r0, #10
 8000726:	f001 f865 	bl	80017f4 <BSP_LCD_DisplayStringAtLine>
//  BSP_LCD_DisplayStringAtLine(i, buffer);
  BSP_LCD_DrawLine(10,10,10,260);
 800072a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800072e:	220a      	movs	r2, #10
 8000730:	210a      	movs	r1, #10
 8000732:	200a      	movs	r0, #10
 8000734:	f001 f876 	bl	8001824 <BSP_LCD_DrawLine>
  BSP_LCD_DrawLine(470,10,470,260);
 8000738:	f44f 7382 	mov.w	r3, #260	; 0x104
 800073c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8000740:	210a      	movs	r1, #10
 8000742:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8000746:	f001 f86d 	bl	8001824 <BSP_LCD_DrawLine>
  BSP_LCD_DrawLine(10,260,470,260);
 800074a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800074e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8000752:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000756:	200a      	movs	r0, #10
 8000758:	f001 f864 	bl	8001824 <BSP_LCD_DrawLine>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800075c:	e7fe      	b.n	800075c <main+0x1a8>
 800075e:	bf00      	nop
 8000760:	08006994 	.word	0x08006994
 8000764:	080069b0 	.word	0x080069b0
 8000768:	080069cc 	.word	0x080069cc
 800076c:	080069e8 	.word	0x080069e8
 8000770:	08006958 	.word	0x08006958
 8000774:	ff0000ff 	.word	0xff0000ff
 8000778:	08006968 	.word	0x08006968
 800077c:	08006974 	.word	0x08006974

08000780 <LCD_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

static void LCD_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* LCD Initialization */
  BSP_LCD_Init();
 8000784:	f000 fd98 	bl	80012b8 <BSP_LCD_Init>

  /* LCD Initialization */
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000788:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800078c:	2000      	movs	r0, #0
 800078e:	f000 fe2b 	bl	80013e8 <BSP_LCD_LayerDefaultInit>

  /* Enable the LCD */
  BSP_LCD_DisplayOn();
 8000792:	f001 f95b 	bl	8001a4c <BSP_LCD_DisplayOn>

  /* Select the LCD Background Layer  */
  BSP_LCD_SelectLayer(0);
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fe86 	bl	80014a8 <BSP_LCD_SelectLayer>

  /* Clear the Background Layer */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800079c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007a0:	f000 fef4 	bl	800158c <BSP_LCD_Clear>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <SystemClock_Config>:
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2230      	movs	r2, #48	; 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f005 fc4c 	bl	8006054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <SystemClock_Config+0xd0>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a29      	ldr	r2, [pc, #164]	; (8000878 <SystemClock_Config+0xd0>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b27      	ldr	r3, [pc, #156]	; (8000878 <SystemClock_Config+0xd0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <SystemClock_Config+0xd4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a24      	ldr	r2, [pc, #144]	; (800087c <SystemClock_Config+0xd4>)
 80007ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <SystemClock_Config+0xd4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000810:	2308      	movs	r3, #8
 8000812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000814:	23d8      	movs	r3, #216	; 0xd8
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800081c:	2309      	movs	r3, #9
 800081e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	4618      	mov	r0, r3
 8000826:	f003 f9d9 	bl	8003bdc <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000830:	f000 f9f4 	bl	8000c1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000834:	f003 f8c0 	bl	80039b8 <HAL_PWREx_EnableOverDrive>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800083e:	f000 f9ed 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000842:	230f      	movs	r3, #15
 8000844:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	2302      	movs	r3, #2
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800084e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000852:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2107      	movs	r1, #7
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fc5f 	bl	8004124 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800086c:	f000 f9d6 	bl	8000c1c <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3750      	adds	r7, #80	; 0x50
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000

08000880 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_CRC_Init+0x3c>)
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <MX_CRC_Init+0x40>)
 8000888:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_CRC_Init+0x3c>)
 800088c:	2200      	movs	r2, #0
 800088e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_CRC_Init+0x3c>)
 8000892:	2200      	movs	r2, #0
 8000894:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_CRC_Init+0x3c>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_CRC_Init+0x3c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_CRC_Init+0x3c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_CRC_Init+0x3c>)
 80008aa:	f001 fe31 	bl	8002510 <HAL_CRC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008b4:	f000 f9b2 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000098 	.word	0x20000098
 80008c0:	40023000 	.word	0x40023000

080008c4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <MX_DMA2D_Init+0x60>)
 80008cc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008fa:	f002 f943 	bl	8002b84 <HAL_DMA2D_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000904:	f000 f98a 	bl	8000c1c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000908:	2101      	movs	r1, #1
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_DMA2D_Init+0x5c>)
 800090c:	f002 fa98 	bl	8002e40 <HAL_DMA2D_ConfigLayer>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000916:	f000 f981 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000bc 	.word	0x200000bc
 8000924:	4002b000 	.word	0x4002b000

08000928 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09a      	sub	sp, #104	; 0x68
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800092e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000932:	2234      	movs	r2, #52	; 0x34
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f005 fb8c 	bl	8006054 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2234      	movs	r2, #52	; 0x34
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f005 fb86 	bl	8006054 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000948:	4b4e      	ldr	r3, [pc, #312]	; (8000a84 <MX_LTDC_Init+0x15c>)
 800094a:	4a4f      	ldr	r2, [pc, #316]	; (8000a88 <MX_LTDC_Init+0x160>)
 800094c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800094e:	4b4d      	ldr	r3, [pc, #308]	; (8000a84 <MX_LTDC_Init+0x15c>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000954:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <MX_LTDC_Init+0x15c>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800095a:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <MX_LTDC_Init+0x15c>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000960:	4b48      	ldr	r3, [pc, #288]	; (8000a84 <MX_LTDC_Init+0x15c>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000966:	4b47      	ldr	r3, [pc, #284]	; (8000a84 <MX_LTDC_Init+0x15c>)
 8000968:	2207      	movs	r2, #7
 800096a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800096c:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <MX_LTDC_Init+0x15c>)
 800096e:	2203      	movs	r2, #3
 8000970:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000972:	4b44      	ldr	r3, [pc, #272]	; (8000a84 <MX_LTDC_Init+0x15c>)
 8000974:	220e      	movs	r2, #14
 8000976:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000978:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <MX_LTDC_Init+0x15c>)
 800097a:	2205      	movs	r2, #5
 800097c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800097e:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <MX_LTDC_Init+0x15c>)
 8000980:	f240 228e 	movw	r2, #654	; 0x28e
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000986:	4b3f      	ldr	r3, [pc, #252]	; (8000a84 <MX_LTDC_Init+0x15c>)
 8000988:	f240 12e5 	movw	r2, #485	; 0x1e5
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800098e:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <MX_LTDC_Init+0x15c>)
 8000990:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <MX_LTDC_Init+0x15c>)
 8000998:	f240 12e7 	movw	r2, #487	; 0x1e7
 800099c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800099e:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <MX_LTDC_Init+0x15c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80009a6:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <MX_LTDC_Init+0x15c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80009ae:	4b35      	ldr	r3, [pc, #212]	; (8000a84 <MX_LTDC_Init+0x15c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009b6:	4833      	ldr	r0, [pc, #204]	; (8000a84 <MX_LTDC_Init+0x15c>)
 80009b8:	f002 fd36 	bl	8003428 <HAL_LTDC_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80009c2:	f000 f92b 	bl	8000c1c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009d6:	2302      	movs	r3, #2
 80009d8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009e8:	2305      	movs	r3, #5
 80009ea:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	481c      	ldr	r0, [pc, #112]	; (8000a84 <MX_LTDC_Init+0x15c>)
 8000a14:	f002 fde4 	bl	80035e0 <HAL_LTDC_ConfigLayer>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000a1e:	f000 f8fd 	bl	8000c1c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a32:	2302      	movs	r3, #2
 8000a34:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a42:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a44:	2305      	movs	r3, #5
 8000a46:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_LTDC_Init+0x15c>)
 8000a6e:	f002 fdb7 	bl	80035e0 <HAL_LTDC_ConfigLayer>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000a78:	f000 f8d0 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3768      	adds	r7, #104	; 0x68
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000fc 	.word	0x200000fc
 8000a88:	40016800 	.word	0x40016800

08000a8c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_QUADSPI_Init+0x54>)
 8000a94:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_QUADSPI_Init+0x50>)
 8000ac8:	f002 ffc6 	bl	8003a58 <HAL_QSPI_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000ad2:	f000 f8a3 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200001a4 	.word	0x200001a4
 8000ae0:	a0001000 	.word	0xa0001000

08000ae4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_USART6_UART_Init+0x58>)
 8000aea:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <MX_USART6_UART_Init+0x5c>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_USART6_UART_Init+0x58>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_USART6_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_USART6_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_USART6_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_USART6_UART_Init+0x58>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_USART6_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_USART6_UART_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_USART6_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_USART6_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_USART6_UART_Init+0x58>)
 8000b28:	f004 f95b 	bl	8004de2 <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000b32:	f000 f873 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200001f0 	.word	0x200001f0
 8000b40:	40011400 	.word	0x40011400

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4a:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a32      	ldr	r2, [pc, #200]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a2c      	ldr	r2, [pc, #176]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	210f      	movs	r1, #15
 8000c62:	f06f 0001 	mvn.w	r0, #1
 8000c66:	f001 fc1c 	bl	80024a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_CRC_MspInit+0x38>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d10b      	bne.n	8000ca2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_CRC_MspInit+0x3c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <HAL_CRC_MspInit+0x3c>)
 8000c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <HAL_CRC_MspInit+0x3c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40023000 	.word	0x40023000
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_DMA2D_MspInit+0x38>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d10b      	bne.n	8000ce2 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_DMA2D_MspInit+0x3c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_DMA2D_MspInit+0x3c>)
 8000cd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <HAL_DMA2D_MspInit+0x3c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	4002b000 	.word	0x4002b000
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0b0      	sub	sp, #192	; 0xc0
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d14:	2284      	movs	r2, #132	; 0x84
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f005 f99b 	bl	8006054 <memset>
  if(hltdc->Instance==LTDC)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a97      	ldr	r2, [pc, #604]	; (8000f80 <HAL_LTDC_MspInit+0x288>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	f040 8126 	bne.w	8000f76 <HAL_LTDC_MspInit+0x27e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000d2e:	2332      	movs	r3, #50	; 0x32
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d42:	2300      	movs	r3, #0
 8000d44:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 fbd0 	bl	80044f0 <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8000d56:	f7ff ff61 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d5a:	4b8a      	ldr	r3, [pc, #552]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a89      	ldr	r2, [pc, #548]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b87      	ldr	r3, [pc, #540]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b84      	ldr	r3, [pc, #528]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a83      	ldr	r2, [pc, #524]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b81      	ldr	r3, [pc, #516]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
 8000d88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8a:	4b7e      	ldr	r3, [pc, #504]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a7d      	ldr	r2, [pc, #500]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b7b      	ldr	r3, [pc, #492]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9e:	61fb      	str	r3, [r7, #28]
 8000da0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b78      	ldr	r3, [pc, #480]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a77      	ldr	r2, [pc, #476]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b75      	ldr	r3, [pc, #468]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dba:	4b72      	ldr	r3, [pc, #456]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a71      	ldr	r2, [pc, #452]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b6f      	ldr	r3, [pc, #444]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000dd2:	4b6c      	ldr	r3, [pc, #432]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a6b      	ldr	r2, [pc, #428]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000dd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b69      	ldr	r3, [pc, #420]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	4b66      	ldr	r3, [pc, #408]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a65      	ldr	r2, [pc, #404]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b63      	ldr	r3, [pc, #396]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	4b60      	ldr	r3, [pc, #384]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a5f      	ldr	r2, [pc, #380]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b5d      	ldr	r3, [pc, #372]	; (8000f84 <HAL_LTDC_MspInit+0x28c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> LTDC_R6
    PI14     ------> LTDC_CLK
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e34:	230e      	movs	r3, #14
 8000e36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4851      	ldr	r0, [pc, #324]	; (8000f88 <HAL_LTDC_MspInit+0x290>)
 8000e42:	f002 f92b 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8000e46:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e60:	230e      	movs	r3, #14
 8000e62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4847      	ldr	r0, [pc, #284]	; (8000f8c <HAL_LTDC_MspInit+0x294>)
 8000e6e:	f002 f915 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 8000e72:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000e76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e8c:	230e      	movs	r3, #14
 8000e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e96:	4619      	mov	r1, r3
 8000e98:	483d      	ldr	r0, [pc, #244]	; (8000f90 <HAL_LTDC_MspInit+0x298>)
 8000e9a:	f002 f8ff 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_1
 8000e9e:	f244 6333 	movw	r3, #17971	; 0x4633
 8000ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb8:	230e      	movs	r3, #14
 8000eba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ebe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4833      	ldr	r0, [pc, #204]	; (8000f94 <HAL_LTDC_MspInit+0x29c>)
 8000ec6:	f002 f8e9 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ee2:	230e      	movs	r3, #14
 8000ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ee8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000eec:	4619      	mov	r1, r3
 8000eee:	482a      	ldr	r0, [pc, #168]	; (8000f98 <HAL_LTDC_MspInit+0x2a0>)
 8000ef0:	f002 f8d4 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481c      	ldr	r0, [pc, #112]	; (8000f8c <HAL_LTDC_MspInit+0x294>)
 8000f1c:	f002 f8be 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f20:	2308      	movs	r3, #8
 8000f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f38:	230e      	movs	r3, #14
 8000f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f42:	4619      	mov	r1, r3
 8000f44:	4815      	ldr	r0, [pc, #84]	; (8000f9c <HAL_LTDC_MspInit+0x2a4>)
 8000f46:	f002 f8a9 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 8000f4a:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8000f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f64:	230e      	movs	r3, #14
 8000f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <HAL_LTDC_MspInit+0x2a8>)
 8000f72:	f002 f893 	bl	800309c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	37c0      	adds	r7, #192	; 0xc0
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40016800 	.word	0x40016800
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40021800 	.word	0x40021800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40022000 	.word	0x40022000
 8000f98:	40022800 	.word	0x40022800
 8000f9c:	40020c00 	.word	0x40020c00
 8000fa0:	40021c00 	.word	0x40021c00

08000fa4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	; 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a33      	ldr	r2, [pc, #204]	; (8001090 <HAL_QSPI_MspInit+0xec>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d160      	bne.n	8001088 <HAL_QSPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000fc6:	4b33      	ldr	r3, [pc, #204]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 8000fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fca:	4a32      	ldr	r2, [pc, #200]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6393      	str	r3, [r2, #56]	; 0x38
 8000fd2:	4b30      	ldr	r3, [pc, #192]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 8000fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a2c      	ldr	r2, [pc, #176]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a26      	ldr	r2, [pc, #152]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 8000ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a20      	ldr	r2, [pc, #128]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_QSPI_MspInit+0xf0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> QUADSPI_BK2_NCS
    PH3     ------> QUADSPI_BK2_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001026:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001038:	2309      	movs	r3, #9
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4815      	ldr	r0, [pc, #84]	; (8001098 <HAL_QSPI_MspInit+0xf4>)
 8001044:	f002 f82a 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001048:	230c      	movs	r3, #12
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001058:	2309      	movs	r3, #9
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <HAL_QSPI_MspInit+0xf8>)
 8001064:	f002 f81a 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001068:	2304      	movs	r3, #4
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001078:	2309      	movs	r3, #9
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <HAL_QSPI_MspInit+0xfc>)
 8001084:	f002 f80a 	bl	800309c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001088:	bf00      	nop
 800108a:	3730      	adds	r7, #48	; 0x30
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	a0001000 	.word	0xa0001000
 8001094:	40023800 	.word	0x40023800
 8001098:	40020800 	.word	0x40020800
 800109c:	40021c00 	.word	0x40021c00
 80010a0:	40020400 	.word	0x40020400

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0aa      	sub	sp, #168	; 0xa8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2284      	movs	r2, #132	; 0x84
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f004 ffc5 	bl	8006054 <memset>
  if(huart->Instance==USART6)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a26      	ldr	r2, [pc, #152]	; (8001168 <HAL_UART_MspInit+0xc4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d144      	bne.n	800115e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80010d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80010da:	2300      	movs	r3, #0
 80010dc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fa04 	bl	80044f0 <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010ee:	f7ff fd95 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_UART_MspInit+0xc8>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_UART_MspInit+0xc8>)
 80010f8:	f043 0320 	orr.w	r3, r3, #32
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_UART_MspInit+0xc8>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f003 0320 	and.w	r3, r3, #32
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_UART_MspInit+0xc8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_UART_MspInit+0xc8>)
 8001110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_UART_MspInit+0xc8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8001122:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800113c:	2308      	movs	r3, #8
 800113e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001142:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001146:	4619      	mov	r1, r3
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <HAL_UART_MspInit+0xcc>)
 800114a:	f001 ffa7 	bl	800309c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2047      	movs	r0, #71	; 0x47
 8001154:	f001 f9a5 	bl	80024a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001158:	2047      	movs	r0, #71	; 0x47
 800115a:	f001 f9be 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	37a8      	adds	r7, #168	; 0xa8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40011400 	.word	0x40011400
 800116c:	40023800 	.word	0x40023800
 8001170:	40021800 	.word	0x40021800

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <NMI_Handler+0x4>

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c0:	f001 f850 	bl	8002264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <USART6_IRQHandler+0x10>)
 80011ce:	f003 fe57 	bl	8004e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200001f0 	.word	0x200001f0

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f004 fef8 	bl	8006000 <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20050000 	.word	0x20050000
 800123c:	00000400 	.word	0x00000400
 8001240:	20000278 	.word	0x20000278
 8001244:	200004d8 	.word	0x200004d8

08001248 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126e:	490d      	ldr	r1, [pc, #52]	; (80012a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001284:	4c0a      	ldr	r4, [pc, #40]	; (80012b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001292:	f7ff ffd9 	bl	8001248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f004 feb9 	bl	800600c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff f98b 	bl	80005b4 <main>
  bx  lr    
 800129e:	4770      	bx	lr
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80012a8:	08008520 	.word	0x08008520
  ldr r2, =_sbss
 80012ac:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80012b0:	200004d8 	.word	0x200004d8

080012b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC_IRQHandler>
	...

080012b8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80012bc:	4b31      	ldr	r3, [pc, #196]	; (8001384 <BSP_LCD_Init+0xcc>)
 80012be:	2228      	movs	r2, #40	; 0x28
 80012c0:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80012c2:	4b30      	ldr	r3, [pc, #192]	; (8001384 <BSP_LCD_Init+0xcc>)
 80012c4:	2209      	movs	r2, #9
 80012c6:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80012c8:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <BSP_LCD_Init+0xcc>)
 80012ca:	2235      	movs	r2, #53	; 0x35
 80012cc:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <BSP_LCD_Init+0xcc>)
 80012d0:	220b      	movs	r2, #11
 80012d2:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <BSP_LCD_Init+0xcc>)
 80012d6:	f240 121b 	movw	r2, #283	; 0x11b
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <BSP_LCD_Init+0xcc>)
 80012de:	f240 2215 	movw	r2, #533	; 0x215
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <BSP_LCD_Init+0xcc>)
 80012e6:	f240 121d 	movw	r2, #285	; 0x11d
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80012ec:	4b25      	ldr	r3, [pc, #148]	; (8001384 <BSP_LCD_Init+0xcc>)
 80012ee:	f240 2235 	movw	r2, #565	; 0x235
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80012f4:	2100      	movs	r1, #0
 80012f6:	4823      	ldr	r0, [pc, #140]	; (8001384 <BSP_LCD_Init+0xcc>)
 80012f8:	f000 fca0 	bl	8001c3c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <BSP_LCD_Init+0xcc>)
 80012fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001302:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <BSP_LCD_Init+0xcc>)
 8001306:	f44f 7288 	mov.w	r2, #272	; 0x110
 800130a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <BSP_LCD_Init+0xcc>)
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <BSP_LCD_Init+0xcc>)
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <BSP_LCD_Init+0xcc>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <BSP_LCD_Init+0xcc>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <BSP_LCD_Init+0xcc>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <BSP_LCD_Init+0xcc>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <BSP_LCD_Init+0xcc>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <BSP_LCD_Init+0xcc>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <BSP_LCD_Init+0xd0>)
 8001340:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001342:	4810      	ldr	r0, [pc, #64]	; (8001384 <BSP_LCD_Init+0xcc>)
 8001344:	f002 f98a 	bl	800365c <HAL_LTDC_GetState>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d103      	bne.n	8001356 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800134e:	2100      	movs	r1, #0
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <BSP_LCD_Init+0xcc>)
 8001352:	f000 fb99 	bl	8001a88 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <BSP_LCD_Init+0xcc>)
 8001358:	f002 f866 	bl	8003428 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <BSP_LCD_Init+0xd4>)
 8001364:	f002 f846 	bl	80033f4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2108      	movs	r1, #8
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <BSP_LCD_Init+0xd8>)
 800136e:	f002 f841 	bl	80033f4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001372:	f000 fd83 	bl	8001e7c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <BSP_LCD_Init+0xdc>)
 8001378:	f000 f8d8 	bl	800152c <BSP_LCD_SetFont>
  
  return LCD_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000027c 	.word	0x2000027c
 8001388:	40016800 	.word	0x40016800
 800138c:	40022000 	.word	0x40022000
 8001390:	40022800 	.word	0x40022800
 8001394:	20000004 	.word	0x20000004

08001398 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <BSP_LCD_GetXSize+0x20>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <BSP_LCD_GetXSize+0x24>)
 80013a2:	2134      	movs	r1, #52	; 0x34
 80013a4:	fb01 f303 	mul.w	r3, r1, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	3360      	adds	r3, #96	; 0x60
 80013ac:	681b      	ldr	r3, [r3, #0]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	20000364 	.word	0x20000364
 80013bc:	2000027c 	.word	0x2000027c

080013c0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <BSP_LCD_GetYSize+0x20>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <BSP_LCD_GetYSize+0x24>)
 80013ca:	2134      	movs	r1, #52	; 0x34
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	3364      	adds	r3, #100	; 0x64
 80013d4:	681b      	ldr	r3, [r3, #0]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	20000364 	.word	0x20000364
 80013e4:	2000027c 	.word	0x2000027c

080013e8 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b090      	sub	sp, #64	; 0x40
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80013f8:	f7ff ffce 	bl	8001398 <BSP_LCD_GetXSize>
 80013fc:	4603      	mov	r3, r0
 80013fe:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001404:	f7ff ffdc 	bl	80013c0 <BSP_LCD_GetYSize>
 8001408:	4603      	mov	r3, r0
 800140a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8001414:	23ff      	movs	r3, #255	; 0xff
 8001416:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800142e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001434:	2307      	movs	r3, #7
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001438:	f7ff ffae 	bl	8001398 <BSP_LCD_GetXSize>
 800143c:	4603      	mov	r3, r0
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001440:	f7ff ffbe 	bl	80013c0 <BSP_LCD_GetYSize>
 8001444:	4603      	mov	r3, r0
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001448:	88fa      	ldrh	r2, [r7, #6]
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4619      	mov	r1, r3
 8001450:	4812      	ldr	r0, [pc, #72]	; (800149c <BSP_LCD_LayerDefaultInit+0xb4>)
 8001452:	f002 f8c5 	bl	80035e0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001456:	88fa      	ldrh	r2, [r7, #6]
 8001458:	4911      	ldr	r1, [pc, #68]	; (80014a0 <BSP_LCD_LayerDefaultInit+0xb8>)
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3304      	adds	r3, #4
 8001466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800146a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800146c:	88fa      	ldrh	r2, [r7, #6]
 800146e:	490c      	ldr	r1, [pc, #48]	; (80014a0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	3308      	adds	r3, #8
 800147c:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <BSP_LCD_LayerDefaultInit+0xbc>)
 800147e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001480:	88fa      	ldrh	r2, [r7, #6]
 8001482:	4907      	ldr	r1, [pc, #28]	; (80014a0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001492:	601a      	str	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	3740      	adds	r7, #64	; 0x40
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000027c 	.word	0x2000027c
 80014a0:	20000368 	.word	0x20000368
 80014a4:	20000004 	.word	0x20000004

080014a8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <BSP_LCD_SelectLayer+0x1c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
} 
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000364 	.word	0x20000364

080014c8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <BSP_LCD_SetTextColor+0x28>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4907      	ldr	r1, [pc, #28]	; (80014f4 <BSP_LCD_SetTextColor+0x2c>)
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	20000364 	.word	0x20000364
 80014f4:	20000368 	.word	0x20000368

080014f8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <BSP_LCD_SetBackColor+0x2c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4908      	ldr	r1, [pc, #32]	; (8001528 <BSP_LCD_SetBackColor+0x30>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	3304      	adds	r3, #4
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000364 	.word	0x20000364
 8001528:	20000368 	.word	0x20000368

0800152c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <BSP_LCD_SetFont+0x2c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4908      	ldr	r1, [pc, #32]	; (800155c <BSP_LCD_SetFont+0x30>)
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3308      	adds	r3, #8
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000364 	.word	0x20000364
 800155c:	20000368 	.word	0x20000368

08001560 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <BSP_LCD_GetFont+0x24>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4907      	ldr	r1, [pc, #28]	; (8001588 <BSP_LCD_GetFont+0x28>)
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3308      	adds	r3, #8
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000364 	.word	0x20000364
 8001588:	20000368 	.word	0x20000368

0800158c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	b085      	sub	sp, #20
 8001590:	af02      	add	r7, sp, #8
 8001592:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <BSP_LCD_Clear+0x48>)
 8001596:	681c      	ldr	r4, [r3, #0]
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <BSP_LCD_Clear+0x48>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <BSP_LCD_Clear+0x4c>)
 800159e:	2134      	movs	r1, #52	; 0x34
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	335c      	adds	r3, #92	; 0x5c
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461e      	mov	r6, r3
 80015ac:	f7ff fef4 	bl	8001398 <BSP_LCD_GetXSize>
 80015b0:	4605      	mov	r5, r0
 80015b2:	f7ff ff05 	bl	80013c0 <BSP_LCD_GetYSize>
 80015b6:	4602      	mov	r2, r0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4613      	mov	r3, r2
 80015c2:	462a      	mov	r2, r5
 80015c4:	4631      	mov	r1, r6
 80015c6:	4620      	mov	r0, r4
 80015c8:	f000 fc0c 	bl	8001de4 <LL_FillBuffer>
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d4:	20000364 	.word	0x20000364
 80015d8:	2000027c 	.word	0x2000027c

080015dc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
 80015e6:	460b      	mov	r3, r1
 80015e8:	80bb      	strh	r3, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <BSP_LCD_DisplayChar+0x80>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	491b      	ldr	r1, [pc, #108]	; (8001660 <BSP_LCD_DisplayChar+0x84>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	3308      	adds	r3, #8
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6819      	ldr	r1, [r3, #0]
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <BSP_LCD_DisplayChar+0x80>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4c14      	ldr	r4, [pc, #80]	; (8001660 <BSP_LCD_DisplayChar+0x84>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4423      	add	r3, r4
 800161a:	3308      	adds	r3, #8
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001620:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <BSP_LCD_DisplayChar+0x80>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4c0d      	ldr	r4, [pc, #52]	; (8001660 <BSP_LCD_DisplayChar+0x84>)
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4423      	add	r3, r4
 8001634:	3308      	adds	r3, #8
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	889b      	ldrh	r3, [r3, #4]
 800163a:	3307      	adds	r3, #7
 800163c:	2b00      	cmp	r3, #0
 800163e:	da00      	bge.n	8001642 <BSP_LCD_DisplayChar+0x66>
 8001640:	3307      	adds	r3, #7
 8001642:	10db      	asrs	r3, r3, #3
 8001644:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001648:	18ca      	adds	r2, r1, r3
 800164a:	88b9      	ldrh	r1, [r7, #4]
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fb10 	bl	8001c74 <DrawChar>
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}
 800165c:	20000364 	.word	0x20000364
 8001660:	20000368 	.word	0x20000368

08001664 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	60ba      	str	r2, [r7, #8]
 800166c:	461a      	mov	r2, r3
 800166e:	4603      	mov	r3, r0
 8001670:	81fb      	strh	r3, [r7, #14]
 8001672:	460b      	mov	r3, r1
 8001674:	81bb      	strh	r3, [r7, #12]
 8001676:	4613      	mov	r3, r2
 8001678:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800167a:	2301      	movs	r3, #1
 800167c:	83fb      	strh	r3, [r7, #30]
 800167e:	2300      	movs	r3, #0
 8001680:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800168e:	e002      	b.n	8001696 <BSP_LCD_DisplayStringAt+0x32>
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	3301      	adds	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	617a      	str	r2, [r7, #20]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f6      	bne.n	8001690 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80016a2:	f7ff fe79 	bl	8001398 <BSP_LCD_GetXSize>
 80016a6:	4601      	mov	r1, r0
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4850      	ldr	r0, [pc, #320]	; (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4403      	add	r3, r0
 80016b8:	3308      	adds	r3, #8
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	889b      	ldrh	r3, [r3, #4]
 80016be:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d01c      	beq.n	8001704 <BSP_LCD_DisplayStringAt+0xa0>
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	dc33      	bgt.n	8001736 <BSP_LCD_DisplayStringAt+0xd2>
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d002      	beq.n	80016d8 <BSP_LCD_DisplayStringAt+0x74>
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d019      	beq.n	800170a <BSP_LCD_DisplayStringAt+0xa6>
 80016d6:	e02e      	b.n	8001736 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	1ad1      	subs	r1, r2, r3
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4843      	ldr	r0, [pc, #268]	; (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4403      	add	r3, r0
 80016ee:	3308      	adds	r3, #8
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	889b      	ldrh	r3, [r3, #4]
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	89fb      	ldrh	r3, [r7, #14]
 80016fe:	4413      	add	r3, r2
 8001700:	83fb      	strh	r3, [r7, #30]
      break;
 8001702:	e01b      	b.n	800173c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8001704:	89fb      	ldrh	r3, [r7, #14]
 8001706:	83fb      	strh	r3, [r7, #30]
      break;
 8001708:	e018      	b.n	800173c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	b299      	uxth	r1, r3
 8001712:	4b36      	ldr	r3, [pc, #216]	; (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4836      	ldr	r0, [pc, #216]	; (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4403      	add	r3, r0
 8001722:	3308      	adds	r3, #8
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	889b      	ldrh	r3, [r3, #4]
 8001728:	fb11 f303 	smulbb	r3, r1, r3
 800172c:	b29a      	uxth	r2, r3
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	83fb      	strh	r3, [r7, #30]
      break;
 8001734:	e002      	b.n	800173c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8001736:	89fb      	ldrh	r3, [r7, #14]
 8001738:	83fb      	strh	r3, [r7, #30]
      break;
 800173a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800173c:	8bfb      	ldrh	r3, [r7, #30]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <BSP_LCD_DisplayStringAt+0xe6>
 8001742:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001746:	2b00      	cmp	r3, #0
 8001748:	da1d      	bge.n	8001786 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800174a:	2301      	movs	r3, #1
 800174c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800174e:	e01a      	b.n	8001786 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	89b9      	ldrh	r1, [r7, #12]
 8001756:	8bfb      	ldrh	r3, [r7, #30]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff3f 	bl	80015dc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4923      	ldr	r1, [pc, #140]	; (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	3308      	adds	r3, #8
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	889a      	ldrh	r2, [r3, #4]
 8001774:	8bfb      	ldrh	r3, [r7, #30]
 8001776:	4413      	add	r3, r2
 8001778:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3301      	adds	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
    i++;
 8001780:	8bbb      	ldrh	r3, [r7, #28]
 8001782:	3301      	adds	r3, #1
 8001784:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf14      	ite	ne
 800178e:	2301      	movne	r3, #1
 8001790:	2300      	moveq	r3, #0
 8001792:	b2dc      	uxtb	r4, r3
 8001794:	f7ff fe00 	bl	8001398 <BSP_LCD_GetXSize>
 8001798:	8bb9      	ldrh	r1, [r7, #28]
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4d14      	ldr	r5, [pc, #80]	; (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	442b      	add	r3, r5
 80017aa:	3308      	adds	r3, #8
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	889b      	ldrh	r3, [r3, #4]
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	1ac3      	subs	r3, r0, r3
 80017b6:	b299      	uxth	r1, r3
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <BSP_LCD_DisplayStringAt+0x188>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <BSP_LCD_DisplayStringAt+0x18c>)
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4403      	add	r3, r0
 80017c8:	3308      	adds	r3, #8
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	889b      	ldrh	r3, [r3, #4]
 80017ce:	4299      	cmp	r1, r3
 80017d0:	bf2c      	ite	cs
 80017d2:	2301      	movcs	r3, #1
 80017d4:	2300      	movcc	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	4023      	ands	r3, r4
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1b7      	bne.n	8001750 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000364 	.word	0x20000364
 80017f0:	20000368 	.word	0x20000368

080017f4 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001800:	f7ff feae 	bl	8001560 <BSP_LCD_GetFont>
 8001804:	4603      	mov	r3, r0
 8001806:	88db      	ldrh	r3, [r3, #6]
 8001808:	88fa      	ldrh	r2, [r7, #6]
 800180a:	fb12 f303 	smulbb	r3, r2, r3
 800180e:	b299      	uxth	r1, r3
 8001810:	2303      	movs	r3, #3
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff ff25 	bl	8001664 <BSP_LCD_DisplayStringAt>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b08b      	sub	sp, #44	; 0x2c
 8001828:	af00      	add	r7, sp, #0
 800182a:	4604      	mov	r4, r0
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4623      	mov	r3, r4
 8001834:	80fb      	strh	r3, [r7, #6]
 8001836:	4603      	mov	r3, r0
 8001838:	80bb      	strh	r3, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	807b      	strh	r3, [r7, #2]
 800183e:	4613      	mov	r3, r2
 8001840:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8001842:	2300      	movs	r3, #0
 8001844:	823b      	strh	r3, [r7, #16]
 8001846:	2300      	movs	r3, #0
 8001848:	81fb      	strh	r3, [r7, #14]
 800184a:	2300      	movs	r3, #0
 800184c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800184e:	2300      	movs	r3, #0
 8001850:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001852:	2300      	movs	r3, #0
 8001854:	847b      	strh	r3, [r7, #34]	; 0x22
 8001856:	2300      	movs	r3, #0
 8001858:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 800185a:	2300      	movs	r3, #0
 800185c:	83fb      	strh	r3, [r7, #30]
 800185e:	2300      	movs	r3, #0
 8001860:	83bb      	strh	r3, [r7, #28]
 8001862:	2300      	movs	r3, #0
 8001864:	837b      	strh	r3, [r7, #26]
 8001866:	2300      	movs	r3, #0
 8001868:	833b      	strh	r3, [r7, #24]
 800186a:	2300      	movs	r3, #0
 800186c:	82fb      	strh	r3, [r7, #22]
 800186e:	2300      	movs	r3, #0
 8001870:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	bfb8      	it	lt
 8001880:	425b      	neglt	r3, r3
 8001882:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8001884:	883a      	ldrh	r2, [r7, #0]
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	bfb8      	it	lt
 800188e:	425b      	neglt	r3, r3
 8001890:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d304      	bcc.n	80018ac <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	843b      	strh	r3, [r7, #32]
 80018aa:	e005      	b.n	80018b8 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80018ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80018b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b6:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80018b8:	883a      	ldrh	r2, [r7, #0]
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d304      	bcc.n	80018ca <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	83bb      	strh	r3, [r7, #28]
 80018c8:	e005      	b.n	80018d6 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80018ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ce:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80018d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80018d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80018da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018de:	429a      	cmp	r2, r3
 80018e0:	db11      	blt.n	8001906 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80018e2:	2300      	movs	r3, #0
 80018e4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80018e6:	2300      	movs	r3, #0
 80018e8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80018ea:	8a3b      	ldrh	r3, [r7, #16]
 80018ec:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80018ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	da00      	bge.n	80018f8 <BSP_LCD_DrawLine+0xd4>
 80018f6:	3301      	adds	r3, #1
 80018f8:	105b      	asrs	r3, r3, #1
 80018fa:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80018fc:	89fb      	ldrh	r3, [r7, #14]
 80018fe:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8001900:	8a3b      	ldrh	r3, [r7, #16]
 8001902:	82bb      	strh	r3, [r7, #20]
 8001904:	e010      	b.n	8001928 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8001906:	2300      	movs	r3, #0
 8001908:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800190a:	2300      	movs	r3, #0
 800190c:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8001912:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da00      	bge.n	800191c <BSP_LCD_DrawLine+0xf8>
 800191a:	3301      	adds	r3, #1
 800191c:	105b      	asrs	r3, r3, #1
 800191e:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8001920:	8a3b      	ldrh	r3, [r7, #16]
 8001922:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8001924:	89fb      	ldrh	r3, [r7, #14]
 8001926:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8001928:	2300      	movs	r3, #0
 800192a:	827b      	strh	r3, [r7, #18]
 800192c:	e037      	b.n	800199e <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800192e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001930:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <BSP_LCD_DrawLine+0x190>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4c20      	ldr	r4, [pc, #128]	; (80019b8 <BSP_LCD_DrawLine+0x194>)
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4423      	add	r3, r4
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	f000 f839 	bl	80019bc <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800194a:	8b3a      	ldrh	r2, [r7, #24]
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8001954:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001958:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800195c:	429a      	cmp	r2, r3
 800195e:	db0e      	blt.n	800197e <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8001960:	8b3a      	ldrh	r2, [r7, #24]
 8001962:	8b7b      	ldrh	r3, [r7, #26]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800196a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800196c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800196e:	4413      	add	r3, r2
 8001970:	b29b      	uxth	r3, r3
 8001972:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8001974:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001976:	8bfb      	ldrh	r3, [r7, #30]
 8001978:	4413      	add	r3, r2
 800197a:	b29b      	uxth	r3, r3
 800197c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800197e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001980:	8c3b      	ldrh	r3, [r7, #32]
 8001982:	4413      	add	r3, r2
 8001984:	b29b      	uxth	r3, r3
 8001986:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8001988:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800198a:	8bbb      	ldrh	r3, [r7, #28]
 800198c:	4413      	add	r3, r2
 800198e:	b29b      	uxth	r3, r3
 8001990:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8001992:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001996:	b29b      	uxth	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	b29b      	uxth	r3, r3
 800199c:	827b      	strh	r3, [r7, #18]
 800199e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	ddc1      	ble.n	800192e <BSP_LCD_DrawLine+0x10a>
  }
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	372c      	adds	r7, #44	; 0x2c
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	20000364 	.word	0x20000364
 80019b8:	20000368 	.word	0x20000368

080019bc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80019bc:	b5b0      	push	{r4, r5, r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	603a      	str	r2, [r7, #0]
 80019c6:	80fb      	strh	r3, [r7, #6]
 80019c8:	460b      	mov	r3, r1
 80019ca:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <BSP_LCD_DrawPixel+0x88>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <BSP_LCD_DrawPixel+0x8c>)
 80019d2:	2134      	movs	r1, #52	; 0x34
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	3348      	adds	r3, #72	; 0x48
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d116      	bne.n	8001a10 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <BSP_LCD_DrawPixel+0x88>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <BSP_LCD_DrawPixel+0x8c>)
 80019e8:	2134      	movs	r1, #52	; 0x34
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	335c      	adds	r3, #92	; 0x5c
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	88bd      	ldrh	r5, [r7, #4]
 80019f6:	f7ff fccf 	bl	8001398 <BSP_LCD_GetXSize>
 80019fa:	4603      	mov	r3, r0
 80019fc:	fb03 f205 	mul.w	r2, r3, r5
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	4413      	add	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4423      	add	r3, r4
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	b292      	uxth	r2, r2
 8001a0c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8001a0e:	e015      	b.n	8001a3c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <BSP_LCD_DrawPixel+0x88>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <BSP_LCD_DrawPixel+0x8c>)
 8001a16:	2134      	movs	r1, #52	; 0x34
 8001a18:	fb01 f303 	mul.w	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	335c      	adds	r3, #92	; 0x5c
 8001a20:	681c      	ldr	r4, [r3, #0]
 8001a22:	88bd      	ldrh	r5, [r7, #4]
 8001a24:	f7ff fcb8 	bl	8001398 <BSP_LCD_GetXSize>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	fb03 f205 	mul.w	r2, r3, r5
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4423      	add	r3, r4
 8001a36:	461a      	mov	r2, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bdb0      	pop	{r4, r5, r7, pc}
 8001a44:	20000364 	.word	0x20000364
 8001a48:	2000027c 	.word	0x2000027c

08001a4c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <BSP_LCD_DisplayOn+0x30>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <BSP_LCD_DisplayOn+0x30>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001a60:	2201      	movs	r2, #1
 8001a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a66:	4806      	ldr	r0, [pc, #24]	; (8001a80 <BSP_LCD_DisplayOn+0x34>)
 8001a68:	f001 fcc4 	bl	80033f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2108      	movs	r1, #8
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <BSP_LCD_DisplayOn+0x38>)
 8001a72:	f001 fcbf 	bl	80033f4 <HAL_GPIO_WritePin>
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000027c 	.word	0x2000027c
 8001a80:	40022000 	.word	0x40022000
 8001a84:	40022800 	.word	0x40022800

08001a88 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b090      	sub	sp, #64	; 0x40
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001a92:	4b64      	ldr	r3, [pc, #400]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001a98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001aaa:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a5d      	ldr	r2, [pc, #372]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac2:	4b58      	ldr	r3, [pc, #352]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a57      	ldr	r2, [pc, #348]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001ac8:	f043 0310 	orr.w	r3, r3, #16
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b55      	ldr	r3, [pc, #340]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	623b      	str	r3, [r7, #32]
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ada:	4b52      	ldr	r3, [pc, #328]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a51      	ldr	r2, [pc, #324]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b4f      	ldr	r3, [pc, #316]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001af2:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b0a:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a45      	ldr	r2, [pc, #276]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b22:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a3f      	ldr	r2, [pc, #252]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a39      	ldr	r2, [pc, #228]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a33      	ldr	r2, [pc, #204]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <BSP_LCD_MspInit+0x19c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001b76:	2302      	movs	r3, #2
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001b7a:	230e      	movs	r3, #14
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	4828      	ldr	r0, [pc, #160]	; (8001c28 <BSP_LCD_MspInit+0x1a0>)
 8001b86:	f001 fa89 	bl	800309c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001b94:	2309      	movs	r3, #9
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4823      	ldr	r0, [pc, #140]	; (8001c2c <BSP_LCD_MspInit+0x1a4>)
 8001ba0:	f001 fa7c 	bl	800309c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8001ba4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001bae:	230e      	movs	r3, #14
 8001bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481d      	ldr	r0, [pc, #116]	; (8001c30 <BSP_LCD_MspInit+0x1a8>)
 8001bba:	f001 fa6f 	bl	800309c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001bbe:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001bc8:	230e      	movs	r3, #14
 8001bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4818      	ldr	r0, [pc, #96]	; (8001c34 <BSP_LCD_MspInit+0x1ac>)
 8001bd4:	f001 fa62 	bl	800309c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001bd8:	23f7      	movs	r3, #247	; 0xf7
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001be0:	230e      	movs	r3, #14
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be8:	4619      	mov	r1, r3
 8001bea:	4813      	ldr	r0, [pc, #76]	; (8001c38 <BSP_LCD_MspInit+0x1b0>)
 8001bec:	f001 fa56 	bl	800309c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480b      	ldr	r0, [pc, #44]	; (8001c30 <BSP_LCD_MspInit+0x1a8>)
 8001c02:	f001 fa4b 	bl	800309c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001c06:	2308      	movs	r3, #8
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c12:	4619      	mov	r1, r3
 8001c14:	4808      	ldr	r0, [pc, #32]	; (8001c38 <BSP_LCD_MspInit+0x1b0>)
 8001c16:	f001 fa41 	bl	800309c <HAL_GPIO_Init>
}
 8001c1a:	bf00      	nop
 8001c1c:	3740      	adds	r7, #64	; 0x40
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40021800 	.word	0x40021800
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40022400 	.word	0x40022400
 8001c38:	40022800 	.word	0x40022800

08001c3c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <BSP_LCD_ClockConfig+0x34>)
 8001c48:	2208      	movs	r2, #8
 8001c4a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <BSP_LCD_ClockConfig+0x34>)
 8001c4e:	22c0      	movs	r2, #192	; 0xc0
 8001c50:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <BSP_LCD_ClockConfig+0x34>)
 8001c54:	2205      	movs	r2, #5
 8001c56:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <BSP_LCD_ClockConfig+0x34>)
 8001c5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001c60:	4803      	ldr	r0, [pc, #12]	; (8001c70 <BSP_LCD_ClockConfig+0x34>)
 8001c62:	f002 fc45 	bl	80044f0 <HAL_RCCEx_PeriphCLKConfig>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000380 	.word	0x20000380

08001c74 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	603a      	str	r2, [r7, #0]
 8001c7e:	80fb      	strh	r3, [r7, #6]
 8001c80:	460b      	mov	r3, r1
 8001c82:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <DrawChar+0x168>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4953      	ldr	r1, [pc, #332]	; (8001de0 <DrawChar+0x16c>)
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3308      	adds	r3, #8
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	88db      	ldrh	r3, [r3, #6]
 8001ca2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001ca4:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <DrawChar+0x168>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	494d      	ldr	r1, [pc, #308]	; (8001de0 <DrawChar+0x16c>)
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	3308      	adds	r3, #8
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	889b      	ldrh	r3, [r3, #4]
 8001cba:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001cbc:	8a3b      	ldrh	r3, [r7, #16]
 8001cbe:	3307      	adds	r3, #7
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da00      	bge.n	8001cc6 <DrawChar+0x52>
 8001cc4:	3307      	adds	r3, #7
 8001cc6:	10db      	asrs	r3, r3, #3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	8a3b      	ldrh	r3, [r7, #16]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e076      	b.n	8001dca <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001cdc:	8a3b      	ldrh	r3, [r7, #16]
 8001cde:	3307      	adds	r3, #7
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	da00      	bge.n	8001ce6 <DrawChar+0x72>
 8001ce4:	3307      	adds	r3, #7
 8001ce6:	10db      	asrs	r3, r3, #3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001cf6:	8a3b      	ldrh	r3, [r7, #16]
 8001cf8:	3307      	adds	r3, #7
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da00      	bge.n	8001d00 <DrawChar+0x8c>
 8001cfe:	3307      	adds	r3, #7
 8001d00:	10db      	asrs	r3, r3, #3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d002      	beq.n	8001d0c <DrawChar+0x98>
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d004      	beq.n	8001d14 <DrawChar+0xa0>
 8001d0a:	e00c      	b.n	8001d26 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	617b      	str	r3, [r7, #20]
      break;
 8001d12:	e016      	b.n	8001d42 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	3201      	adds	r2, #1
 8001d1e:	7812      	ldrb	r2, [r2, #0]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
      break;
 8001d24:	e00d      	b.n	8001d42 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	041a      	lsls	r2, r3, #16
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	4313      	orrs	r3, r2
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	3202      	adds	r2, #2
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
      break;
 8001d40:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	e036      	b.n	8001db6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001d48:	8a3a      	ldrh	r2, [r7, #16]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	1ad2      	subs	r2, r2, r3
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	4413      	add	r3, r2
 8001d52:	3b01      	subs	r3, #1
 8001d54:	2201      	movs	r2, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d012      	beq.n	8001d8a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b298      	uxth	r0, r3
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <DrawChar+0x168>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	491b      	ldr	r1, [pc, #108]	; (8001de0 <DrawChar+0x16c>)
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	88bb      	ldrh	r3, [r7, #4]
 8001d82:	4619      	mov	r1, r3
 8001d84:	f7ff fe1a 	bl	80019bc <BSP_LCD_DrawPixel>
 8001d88:	e012      	b.n	8001db0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	4413      	add	r3, r2
 8001d92:	b298      	uxth	r0, r3
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <DrawChar+0x168>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4911      	ldr	r1, [pc, #68]	; (8001de0 <DrawChar+0x16c>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	3304      	adds	r3, #4
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	88bb      	ldrh	r3, [r7, #4]
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7ff fe06 	bl	80019bc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	3301      	adds	r3, #1
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	8a3b      	ldrh	r3, [r7, #16]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d3c4      	bcc.n	8001d48 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001dbe:	88bb      	ldrh	r3, [r7, #4]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	8a7b      	ldrh	r3, [r7, #18]
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d384      	bcc.n	8001cdc <DrawChar+0x68>
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000364 	.word	0x20000364
 8001de0:	20000368 	.word	0x20000368

08001de4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <LL_FillBuffer+0x88>)
 8001df4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001df8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <LL_FillBuffer+0x8c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <LL_FillBuffer+0x90>)
 8001e00:	2134      	movs	r1, #52	; 0x34
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	3348      	adds	r3, #72	; 0x48
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d103      	bne.n	8001e18 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001e10:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <LL_FillBuffer+0x88>)
 8001e12:	2202      	movs	r2, #2
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	e002      	b.n	8001e1e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <LL_FillBuffer+0x88>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001e1e:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <LL_FillBuffer+0x88>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <LL_FillBuffer+0x88>)
 8001e26:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <LL_FillBuffer+0x94>)
 8001e28:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001e2a:	4810      	ldr	r0, [pc, #64]	; (8001e6c <LL_FillBuffer+0x88>)
 8001e2c:	f000 feaa 	bl	8002b84 <HAL_DMA2D_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d115      	bne.n	8001e62 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001e36:	68f9      	ldr	r1, [r7, #12]
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <LL_FillBuffer+0x88>)
 8001e3a:	f001 f801 	bl	8002e40 <HAL_DMA2D_ConfigLayer>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10e      	bne.n	8001e62 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69f9      	ldr	r1, [r7, #28]
 8001e4e:	4807      	ldr	r0, [pc, #28]	; (8001e6c <LL_FillBuffer+0x88>)
 8001e50:	f000 fee2 	bl	8002c18 <HAL_DMA2D_Start>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001e5a:	210a      	movs	r1, #10
 8001e5c:	4803      	ldr	r0, [pc, #12]	; (8001e6c <LL_FillBuffer+0x88>)
 8001e5e:	f000 ff06 	bl	8002c6e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000324 	.word	0x20000324
 8001e70:	20000364 	.word	0x20000364
 8001e74:	2000027c 	.word	0x2000027c
 8001e78:	4002b000 	.word	0x4002b000

08001e7c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001e82:	4a2a      	ldr	r2, [pc, #168]	; (8001f2c <BSP_SDRAM_Init+0xb0>)
 8001e84:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <BSP_SDRAM_Init+0xb4>)
 8001e88:	2202      	movs	r2, #2
 8001e8a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001e8c:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <BSP_SDRAM_Init+0xb4>)
 8001e8e:	2207      	movs	r2, #7
 8001e90:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <BSP_SDRAM_Init+0xb4>)
 8001e94:	2204      	movs	r2, #4
 8001e96:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <BSP_SDRAM_Init+0xb4>)
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <BSP_SDRAM_Init+0xb4>)
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <BSP_SDRAM_Init+0xb4>)
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <BSP_SDRAM_Init+0xb4>)
 8001eac:	2202      	movs	r2, #2
 8001eae:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001eca:	2240      	movs	r2, #64	; 0x40
 8001ecc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ed4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001ede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001ee6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001ef6:	f000 f87f 	bl	8001ff8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001efa:	490d      	ldr	r1, [pc, #52]	; (8001f30 <BSP_SDRAM_Init+0xb4>)
 8001efc:	480a      	ldr	r0, [pc, #40]	; (8001f28 <BSP_SDRAM_Init+0xac>)
 8001efe:	f002 fee7 	bl	8004cd0 <HAL_SDRAM_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <BSP_SDRAM_Init+0xb8>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
 8001f0e:	e002      	b.n	8001f16 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <BSP_SDRAM_Init+0xb8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001f16:	f240 6003 	movw	r0, #1539	; 0x603
 8001f1a:	f000 f80d 	bl	8001f38 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <BSP_SDRAM_Init+0xb8>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000404 	.word	0x20000404
 8001f2c:	a0000140 	.word	0xa0000140
 8001f30:	20000438 	.word	0x20000438
 8001f34:	2000000c 	.word	0x2000000c

08001f38 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f4a:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f60:	4923      	ldr	r1, [pc, #140]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f62:	4824      	ldr	r0, [pc, #144]	; (8001ff4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f64:	f002 fef2 	bl	8004d4c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f000 f99b 	bl	80022a4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f70:	2202      	movs	r2, #2
 8001f72:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f76:	2210      	movs	r2, #16
 8001f78:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f8a:	4919      	ldr	r1, [pc, #100]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f8c:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f8e:	f002 fedd 	bl	8004d4c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f94:	2203      	movs	r2, #3
 8001f96:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fae:	4910      	ldr	r1, [pc, #64]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fb0:	4810      	ldr	r0, [pc, #64]	; (8001ff4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001fb2:	f002 fecb 	bl	8004d4c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001fb6:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001fba:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fd2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd8:	4905      	ldr	r1, [pc, #20]	; (8001ff0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fda:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001fdc:	f002 feb6 	bl	8004d4c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001fe4:	f002 fedd 	bl	8004da2 <HAL_SDRAM_ProgramRefreshRate>
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000454 	.word	0x20000454
 8001ff4:	20000404 	.word	0x20000404

08001ff8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b090      	sub	sp, #64	; 0x40
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002002:	4b70      	ldr	r3, [pc, #448]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	4a6f      	ldr	r2, [pc, #444]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6393      	str	r3, [r2, #56]	; 0x38
 800200e:	4b6d      	ldr	r3, [pc, #436]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
 8002018:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800201a:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a69      	ldr	r2, [pc, #420]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	4b64      	ldr	r3, [pc, #400]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a63      	ldr	r2, [pc, #396]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	623b      	str	r3, [r7, #32]
 8002048:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800204a:	4b5e      	ldr	r3, [pc, #376]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a5d      	ldr	r2, [pc, #372]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002062:	4b58      	ldr	r3, [pc, #352]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a57      	ldr	r2, [pc, #348]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002068:	f043 0310 	orr.w	r3, r3, #16
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b55      	ldr	r3, [pc, #340]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800207a:	4b52      	ldr	r3, [pc, #328]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a51      	ldr	r2, [pc, #324]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002080:	f043 0320 	orr.w	r3, r3, #32
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b4f      	ldr	r3, [pc, #316]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002092:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a4b      	ldr	r2, [pc, #300]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 8002098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b49      	ldr	r3, [pc, #292]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020aa:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a45      	ldr	r2, [pc, #276]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 80020b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <BSP_SDRAM_MspInit+0x1cc>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80020ca:	2302      	movs	r3, #2
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80020ce:	230c      	movs	r3, #12
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80020d2:	2308      	movs	r3, #8
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80020d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020da:	4619      	mov	r1, r3
 80020dc:	483a      	ldr	r0, [pc, #232]	; (80021c8 <BSP_SDRAM_MspInit+0x1d0>)
 80020de:	f000 ffdd 	bl	800309c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80020e2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80020e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ec:	4619      	mov	r1, r3
 80020ee:	4837      	ldr	r0, [pc, #220]	; (80021cc <BSP_SDRAM_MspInit+0x1d4>)
 80020f0:	f000 ffd4 	bl	800309c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80020f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80020fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020fe:	4619      	mov	r1, r3
 8002100:	4833      	ldr	r0, [pc, #204]	; (80021d0 <BSP_SDRAM_MspInit+0x1d8>)
 8002102:	f000 ffcb 	bl	800309c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002106:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800210c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002110:	4619      	mov	r1, r3
 8002112:	4830      	ldr	r0, [pc, #192]	; (80021d4 <BSP_SDRAM_MspInit+0x1dc>)
 8002114:	f000 ffc2 	bl	800309c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002118:	f248 1333 	movw	r3, #33075	; 0x8133
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800211e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002122:	4619      	mov	r1, r3
 8002124:	482c      	ldr	r0, [pc, #176]	; (80021d8 <BSP_SDRAM_MspInit+0x1e0>)
 8002126:	f000 ffb9 	bl	800309c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800212a:	2328      	movs	r3, #40	; 0x28
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800212e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002132:	4619      	mov	r1, r3
 8002134:	4829      	ldr	r0, [pc, #164]	; (80021dc <BSP_SDRAM_MspInit+0x1e4>)
 8002136:	f000 ffb1 	bl	800309c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 8002148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800214c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 8002150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002154:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002156:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 8002158:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800215c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 8002160:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002164:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 8002168:	2200      	movs	r2, #0
 800216a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 800216e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002172:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 800217c:	2203      	movs	r2, #3
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 8002182:	2200      	movs	r2, #0
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 8002188:	2200      	movs	r2, #0
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <BSP_SDRAM_MspInit+0x1ec>)
 8002190:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
 8002198:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800219e:	4810      	ldr	r0, [pc, #64]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 80021a0:	f000 fb4e 	bl	8002840 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80021a4:	480e      	ldr	r0, [pc, #56]	; (80021e0 <BSP_SDRAM_MspInit+0x1e8>)
 80021a6:	f000 fa9d 	bl	80026e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	210f      	movs	r1, #15
 80021ae:	2038      	movs	r0, #56	; 0x38
 80021b0:	f000 f977 	bl	80024a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80021b4:	2038      	movs	r0, #56	; 0x38
 80021b6:	f000 f990 	bl	80024da <HAL_NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3740      	adds	r7, #64	; 0x40
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40021400 	.word	0x40021400
 80021d8:	40021800 	.word	0x40021800
 80021dc:	40021c00 	.word	0x40021c00
 80021e0:	20000464 	.word	0x20000464
 80021e4:	40026410 	.word	0x40026410

080021e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 f94d 	bl	800248c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f000 f806 	bl	8002204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f8:	f7fe fd16 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_InitTick+0x54>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_InitTick+0x58>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221a:	fbb3 f3f1 	udiv	r3, r3, r1
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f967 	bl	80024f6 <HAL_SYSTICK_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e00e      	b.n	8002250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b0f      	cmp	r3, #15
 8002236:	d80a      	bhi.n	800224e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002238:	2200      	movs	r2, #0
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002240:	f000 f92f 	bl	80024a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002244:	4a06      	ldr	r2, [pc, #24]	; (8002260 <HAL_InitTick+0x5c>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000000 	.word	0x20000000
 800225c:	20000014 	.word	0x20000014
 8002260:	20000010 	.word	0x20000010

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000014 	.word	0x20000014
 8002288:	200004c4 	.word	0x200004c4

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	200004c4 	.word	0x200004c4

080022a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff ffee 	bl	800228c <HAL_GetTick>
 80022b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022bc:	d005      	beq.n	80022ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_Delay+0x44>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ca:	bf00      	nop
 80022cc:	f7ff ffde 	bl	800228c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d8f7      	bhi.n	80022cc <HAL_Delay+0x28>
  {
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000014 	.word	0x20000014

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <__NVIC_SetPriorityGrouping+0x40>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002316:	4313      	orrs	r3, r2
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	; (800232c <__NVIC_SetPriorityGrouping+0x40>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	05fa0000 	.word	0x05fa0000

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db0b      	blt.n	800237a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4907      	ldr	r1, [pc, #28]	; (8002388 <__NVIC_EnableIRQ+0x38>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002458:	d301      	bcc.n	800245e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245a:	2301      	movs	r3, #1
 800245c:	e00f      	b.n	800247e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <SysTick_Config+0x40>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002466:	210f      	movs	r1, #15
 8002468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800246c:	f7ff ff8e 	bl	800238c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <SysTick_Config+0x40>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <SysTick_Config+0x40>)
 8002478:	2207      	movs	r2, #7
 800247a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	e000e010 	.word	0xe000e010

0800248c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff29 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b4:	f7ff ff3e 	bl	8002334 <__NVIC_GetPriorityGrouping>
 80024b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7ff ff8e 	bl	80023e0 <NVIC_EncodePriority>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff5d 	bl	800238c <__NVIC_SetPriority>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff31 	bl	8002350 <__NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ffa2 	bl	8002448 <SysTick_Config>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e054      	b.n	80025cc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7f5b      	ldrb	r3, [r3, #29]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fba0 	bl	8000c78 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	791b      	ldrb	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a22      	ldr	r2, [pc, #136]	; (80025d4 <HAL_CRC_Init+0xc4>)
 800254c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0218 	bic.w	r2, r2, #24
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	e00c      	b.n	800257a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	461a      	mov	r2, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f834 	bl	80025d8 <HAL_CRCEx_Polynomial_Set>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e028      	b.n	80025cc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	795b      	ldrb	r3, [r3, #5]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800258a:	611a      	str	r2, [r3, #16]
 800258c:	e004      	b.n	8002598 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6912      	ldr	r2, [r2, #16]
 8002596:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	04c11db7 	.word	0x04c11db7

080025d8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80025e8:	231f      	movs	r3, #31
 80025ea:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80025ec:	bf00      	nop
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1e5a      	subs	r2, r3, #1
 80025f2:	613a      	str	r2, [r7, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <HAL_CRCEx_Polynomial_Set+0x34>
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b18      	cmp	r3, #24
 8002610:	d846      	bhi.n	80026a0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002612:	a201      	add	r2, pc, #4	; (adr r2, 8002618 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	080026a7 	.word	0x080026a7
 800261c:	080026a1 	.word	0x080026a1
 8002620:	080026a1 	.word	0x080026a1
 8002624:	080026a1 	.word	0x080026a1
 8002628:	080026a1 	.word	0x080026a1
 800262c:	080026a1 	.word	0x080026a1
 8002630:	080026a1 	.word	0x080026a1
 8002634:	080026a1 	.word	0x080026a1
 8002638:	08002695 	.word	0x08002695
 800263c:	080026a1 	.word	0x080026a1
 8002640:	080026a1 	.word	0x080026a1
 8002644:	080026a1 	.word	0x080026a1
 8002648:	080026a1 	.word	0x080026a1
 800264c:	080026a1 	.word	0x080026a1
 8002650:	080026a1 	.word	0x080026a1
 8002654:	080026a1 	.word	0x080026a1
 8002658:	08002689 	.word	0x08002689
 800265c:	080026a1 	.word	0x080026a1
 8002660:	080026a1 	.word	0x080026a1
 8002664:	080026a1 	.word	0x080026a1
 8002668:	080026a1 	.word	0x080026a1
 800266c:	080026a1 	.word	0x080026a1
 8002670:	080026a1 	.word	0x080026a1
 8002674:	080026a1 	.word	0x080026a1
 8002678:	0800267d 	.word	0x0800267d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b06      	cmp	r3, #6
 8002680:	d913      	bls.n	80026aa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002686:	e010      	b.n	80026aa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b07      	cmp	r3, #7
 800268c:	d90f      	bls.n	80026ae <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002692:	e00c      	b.n	80026ae <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	2b0f      	cmp	r3, #15
 8002698:	d90b      	bls.n	80026b2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800269e:	e008      	b.n	80026b2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	75fb      	strb	r3, [r7, #23]
      break;
 80026a4:	e006      	b.n	80026b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80026a6:	bf00      	nop
 80026a8:	e004      	b.n	80026b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80026aa:	bf00      	nop
 80026ac:	e002      	b.n	80026b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80026b2:	bf00      	nop
  }
  if (status == HAL_OK)
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10d      	bne.n	80026d6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 0118 	bic.w	r1, r3, #24
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	371c      	adds	r7, #28
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7ff fdcc 	bl	800228c <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e099      	b.n	8002834 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002720:	e00f      	b.n	8002742 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002722:	f7ff fdb3 	bl	800228c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b05      	cmp	r3, #5
 800272e:	d908      	bls.n	8002742 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2203      	movs	r2, #3
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e078      	b.n	8002834 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1e8      	bne.n	8002722 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <HAL_DMA_Init+0x158>)
 800275c:	4013      	ands	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b04      	cmp	r3, #4
 800279a:	d107      	bne.n	80027ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	4313      	orrs	r3, r2
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0307 	bic.w	r3, r3, #7
 80027c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d117      	bne.n	8002806 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00e      	beq.n	8002806 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f94f 	bl	8002a8c <DMA_CheckFifoParam>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2240      	movs	r2, #64	; 0x40
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002802:	2301      	movs	r3, #1
 8002804:	e016      	b.n	8002834 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f906 	bl	8002a20 <DMA_CalcBaseAndBitshift>
 8002814:	4603      	mov	r3, r0
 8002816:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	223f      	movs	r2, #63	; 0x3f
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	f010803f 	.word	0xf010803f

08002840 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e050      	b.n	80028f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d101      	bne.n	8002862 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	e048      	b.n	80028f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2221      	movs	r2, #33	; 0x21
 80028a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8bc 	bl	8002a20 <DMA_CalcBaseAndBitshift>
 80028a8:	4603      	mov	r3, r0
 80028aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	223f      	movs	r2, #63	; 0x3f
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800290a:	f7ff fcbf 	bl	800228c <HAL_GetTick>
 800290e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d008      	beq.n	800292e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e052      	b.n	80029d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0216 	bic.w	r2, r2, #22
 800293c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <HAL_DMA_Abort+0x62>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0208 	bic.w	r2, r2, #8
 800296c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297e:	e013      	b.n	80029a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002980:	f7ff fc84 	bl	800228c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b05      	cmp	r3, #5
 800298c:	d90c      	bls.n	80029a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2203      	movs	r2, #3
 8002998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e015      	b.n	80029d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e4      	bne.n	8002980 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	223f      	movs	r2, #63	; 0x3f
 80029bc:	409a      	lsls	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d004      	beq.n	80029fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2280      	movs	r2, #128	; 0x80
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00c      	b.n	8002a14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2205      	movs	r2, #5
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	3b10      	subs	r3, #16
 8002a30:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <DMA_CalcBaseAndBitshift+0x60>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a3a:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <DMA_CalcBaseAndBitshift+0x64>)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d908      	bls.n	8002a60 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <DMA_CalcBaseAndBitshift+0x68>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	1d1a      	adds	r2, r3, #4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a5e:	e006      	b.n	8002a6e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <DMA_CalcBaseAndBitshift+0x68>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	aaaaaaab 	.word	0xaaaaaaab
 8002a84:	080084d4 	.word	0x080084d4
 8002a88:	fffffc00 	.word	0xfffffc00

08002a8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d11f      	bne.n	8002ae6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d856      	bhi.n	8002b5a <DMA_CheckFifoParam+0xce>
 8002aac:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <DMA_CheckFifoParam+0x28>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ac5 	.word	0x08002ac5
 8002ab8:	08002ad7 	.word	0x08002ad7
 8002abc:	08002ac5 	.word	0x08002ac5
 8002ac0:	08002b5b 	.word	0x08002b5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d046      	beq.n	8002b5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad4:	e043      	b.n	8002b5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ade:	d140      	bne.n	8002b62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae4:	e03d      	b.n	8002b62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aee:	d121      	bne.n	8002b34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d837      	bhi.n	8002b66 <DMA_CheckFifoParam+0xda>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <DMA_CheckFifoParam+0x70>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b0d 	.word	0x08002b0d
 8002b00:	08002b13 	.word	0x08002b13
 8002b04:	08002b0d 	.word	0x08002b0d
 8002b08:	08002b25 	.word	0x08002b25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b10:	e030      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d025      	beq.n	8002b6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b22:	e022      	b.n	8002b6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b2c:	d11f      	bne.n	8002b6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b32:	e01c      	b.n	8002b6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d903      	bls.n	8002b42 <DMA_CheckFifoParam+0xb6>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d003      	beq.n	8002b48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b40:	e018      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
      break;
 8002b46:	e015      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00e      	beq.n	8002b72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      break;
 8002b58:	e00b      	b.n	8002b72 <DMA_CheckFifoParam+0xe6>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e00a      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e008      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e006      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
 8002b68:	e004      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e002      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b6e:	bf00      	nop
 8002b70:	e000      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b72:	bf00      	nop
    }
  } 
  
  return status; 
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop

08002b84 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e039      	b.n	8002c0a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe f884 	bl	8000cb8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd4:	f023 0107 	bic.w	r1, r3, #7
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_DMA2D_Init+0x90>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68d1      	ldr	r1, [r2, #12]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	ffffc000 	.word	0xffffc000

08002c18 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_DMA2D_Start+0x1c>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e018      	b.n	8002c66 <HAL_DMA2D_Start+0x4e>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f988 	bl	8002f64 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d056      	beq.n	8002d38 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c8a:	f7ff faff 	bl	800228c <HAL_GetTick>
 8002c8e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002c90:	e04b      	b.n	8002d2a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d023      	beq.n	8002cec <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	f043 0202 	orr.w	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2221      	movs	r2, #33	; 0x21
 8002cd6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0a5      	b.n	8002e38 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf2:	d01a      	beq.n	8002d2a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cf4:	f7ff faca 	bl	800228c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d302      	bcc.n	8002d0a <HAL_DMA2D_PollForTransfer+0x9c>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10f      	bne.n	8002d2a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e086      	b.n	8002e38 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ac      	beq.n	8002c92 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d061      	beq.n	8002e1e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d5a:	f7ff fa97 	bl	800228c <HAL_GetTick>
 8002d5e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002d60:	e056      	b.n	8002e10 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d02e      	beq.n	8002dd2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	f043 0204 	orr.w	r2, r3, #4
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	f043 0202 	orr.w	r2, r3, #2
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2229      	movs	r2, #41	; 0x29
 8002dbc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e032      	b.n	8002e38 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd8:	d01a      	beq.n	8002e10 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7ff fa57 	bl	800228c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <HAL_DMA2D_PollForTransfer+0x182>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10f      	bne.n	8002e10 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2203      	movs	r2, #3
 8002e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e013      	b.n	8002e38 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0a1      	beq.n	8002d62 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2212      	movs	r2, #18
 8002e24:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_DMA2D_ConfigLayer+0x20>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e079      	b.n	8002f54 <HAL_DMA2D_ConfigLayer+0x114>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	3318      	adds	r3, #24
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002e8a:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <HAL_DMA2D_ConfigLayer+0x120>)
 8002e8c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b0a      	cmp	r3, #10
 8002e94:	d003      	beq.n	8002e9e <HAL_DMA2D_ConfigLayer+0x5e>
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b09      	cmp	r3, #9
 8002e9c:	d107      	bne.n	8002eae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e005      	b.n	8002eba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	061b      	lsls	r3, r3, #24
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d120      	bne.n	8002f02 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	ea02 0103 	and.w	r1, r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b0a      	cmp	r3, #10
 8002ee8:	d003      	beq.n	8002ef2 <HAL_DMA2D_ConfigLayer+0xb2>
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	d127      	bne.n	8002f42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
 8002f00:	e01f      	b.n	8002f42 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	ea02 0103 	and.w	r1, r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b0a      	cmp	r3, #10
 8002f2a:	d003      	beq.n	8002f34 <HAL_DMA2D_ConfigLayer+0xf4>
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b09      	cmp	r3, #9
 8002f32:	d106      	bne.n	8002f42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f40:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	ff03000f 	.word	0xff03000f

08002f64 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b08b      	sub	sp, #44	; 0x2c
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	041a      	lsls	r2, r3, #16
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	431a      	orrs	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f9c:	d174      	bne.n	8003088 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002fa4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002fb4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d108      	bne.n	8002fd6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd4:	e053      	b.n	800307e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d106      	bne.n	8002fec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	e048      	b.n	800307e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d111      	bne.n	8003018 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	0cdb      	lsrs	r3, r3, #19
 8002ff8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	0a9b      	lsrs	r3, r3, #10
 8002ffe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	08db      	lsrs	r3, r3, #3
 8003004:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	02db      	lsls	r3, r3, #11
 800300e:	4313      	orrs	r3, r2
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	e032      	b.n	800307e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d117      	bne.n	8003050 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	0fdb      	lsrs	r3, r3, #31
 8003024:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	0cdb      	lsrs	r3, r3, #19
 800302a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	0adb      	lsrs	r3, r3, #11
 8003030:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	08db      	lsrs	r3, r3, #3
 8003036:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	029b      	lsls	r3, r3, #10
 8003040:	431a      	orrs	r2, r3
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	03db      	lsls	r3, r3, #15
 8003046:	4313      	orrs	r3, r2
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
 800304e:	e016      	b.n	800307e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	0f1b      	lsrs	r3, r3, #28
 8003054:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	0d1b      	lsrs	r3, r3, #20
 800305a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	0b1b      	lsrs	r3, r3, #12
 8003060:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	011a      	lsls	r2, r3, #4
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	431a      	orrs	r2, r3
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	031b      	lsls	r3, r3, #12
 8003076:	4313      	orrs	r3, r2
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003086:	e003      	b.n	8003090 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	60da      	str	r2, [r3, #12]
}
 8003090:	bf00      	nop
 8003092:	372c      	adds	r7, #44	; 0x2c
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e175      	b.n	80033a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030bc:	2201      	movs	r2, #1
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	f040 8164 	bne.w	80033a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d005      	beq.n	80030f2 <HAL_GPIO_Init+0x56>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d130      	bne.n	8003154 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2203      	movs	r2, #3
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003128:	2201      	movs	r2, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 0201 	and.w	r2, r3, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b03      	cmp	r3, #3
 800315e:	d017      	beq.n	8003190 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d123      	bne.n	80031e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	08da      	lsrs	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3208      	adds	r2, #8
 80031a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	220f      	movs	r2, #15
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	08da      	lsrs	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3208      	adds	r2, #8
 80031de:	69b9      	ldr	r1, [r7, #24]
 80031e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0203 	and.w	r2, r3, #3
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80be 	beq.w	80033a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003226:	4b66      	ldr	r3, [pc, #408]	; (80033c0 <HAL_GPIO_Init+0x324>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	4a65      	ldr	r2, [pc, #404]	; (80033c0 <HAL_GPIO_Init+0x324>)
 800322c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003230:	6453      	str	r3, [r2, #68]	; 0x44
 8003232:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <HAL_GPIO_Init+0x324>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800323e:	4a61      	ldr	r2, [pc, #388]	; (80033c4 <HAL_GPIO_Init+0x328>)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	3302      	adds	r3, #2
 8003246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	220f      	movs	r2, #15
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <HAL_GPIO_Init+0x32c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d037      	beq.n	80032da <HAL_GPIO_Init+0x23e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a57      	ldr	r2, [pc, #348]	; (80033cc <HAL_GPIO_Init+0x330>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d031      	beq.n	80032d6 <HAL_GPIO_Init+0x23a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a56      	ldr	r2, [pc, #344]	; (80033d0 <HAL_GPIO_Init+0x334>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d02b      	beq.n	80032d2 <HAL_GPIO_Init+0x236>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a55      	ldr	r2, [pc, #340]	; (80033d4 <HAL_GPIO_Init+0x338>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d025      	beq.n	80032ce <HAL_GPIO_Init+0x232>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a54      	ldr	r2, [pc, #336]	; (80033d8 <HAL_GPIO_Init+0x33c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01f      	beq.n	80032ca <HAL_GPIO_Init+0x22e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a53      	ldr	r2, [pc, #332]	; (80033dc <HAL_GPIO_Init+0x340>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d019      	beq.n	80032c6 <HAL_GPIO_Init+0x22a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a52      	ldr	r2, [pc, #328]	; (80033e0 <HAL_GPIO_Init+0x344>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_GPIO_Init+0x226>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a51      	ldr	r2, [pc, #324]	; (80033e4 <HAL_GPIO_Init+0x348>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00d      	beq.n	80032be <HAL_GPIO_Init+0x222>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a50      	ldr	r2, [pc, #320]	; (80033e8 <HAL_GPIO_Init+0x34c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <HAL_GPIO_Init+0x21e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4f      	ldr	r2, [pc, #316]	; (80033ec <HAL_GPIO_Init+0x350>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <HAL_GPIO_Init+0x21a>
 80032b2:	2309      	movs	r3, #9
 80032b4:	e012      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032b6:	230a      	movs	r3, #10
 80032b8:	e010      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032ba:	2308      	movs	r3, #8
 80032bc:	e00e      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032be:	2307      	movs	r3, #7
 80032c0:	e00c      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032c2:	2306      	movs	r3, #6
 80032c4:	e00a      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032c6:	2305      	movs	r3, #5
 80032c8:	e008      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032ce:	2303      	movs	r3, #3
 80032d0:	e004      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_GPIO_Init+0x240>
 80032da:	2300      	movs	r3, #0
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	f002 0203 	and.w	r2, r2, #3
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	4093      	lsls	r3, r2
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032ec:	4935      	ldr	r1, [pc, #212]	; (80033c4 <HAL_GPIO_Init+0x328>)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	3302      	adds	r3, #2
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fa:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <HAL_GPIO_Init+0x354>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800331e:	4a34      	ldr	r2, [pc, #208]	; (80033f0 <HAL_GPIO_Init+0x354>)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003324:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <HAL_GPIO_Init+0x354>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003348:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <HAL_GPIO_Init+0x354>)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800334e:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_GPIO_Init+0x354>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003372:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <HAL_GPIO_Init+0x354>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_GPIO_Init+0x354>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800339c:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <HAL_GPIO_Init+0x354>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	f67f ae86 	bls.w	80030bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40021400 	.word	0x40021400
 80033e0:	40021800 	.word	0x40021800
 80033e4:	40021c00 	.word	0x40021c00
 80033e8:	40022000 	.word	0x40022000
 80033ec:	40022400 	.word	0x40022400
 80033f0:	40013c00 	.word	0x40013c00

080033f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
 8003400:	4613      	mov	r3, r2
 8003402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003404:	787b      	ldrb	r3, [r7, #1]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003410:	e003      	b.n	800341a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003412:	887b      	ldrh	r3, [r7, #2]
 8003414:	041a      	lsls	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	619a      	str	r2, [r3, #24]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0c7      	b.n	80035d2 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fc4e 	bl	8000cf8 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003472:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6999      	ldr	r1, [r3, #24]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003488:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6899      	ldr	r1, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b4e      	ldr	r3, [pc, #312]	; (80035dc <HAL_LTDC_Init+0x1b4>)
 80034a4:	400b      	ands	r3, r1
 80034a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6899      	ldr	r1, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68d9      	ldr	r1, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b42      	ldr	r3, [pc, #264]	; (80035dc <HAL_LTDC_Init+0x1b4>)
 80034d2:	400b      	ands	r3, r1
 80034d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68d9      	ldr	r1, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6919      	ldr	r1, [r3, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b37      	ldr	r3, [pc, #220]	; (80035dc <HAL_LTDC_Init+0x1b4>)
 8003500:	400b      	ands	r3, r1
 8003502:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6919      	ldr	r1, [r3, #16]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6959      	ldr	r1, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_LTDC_Init+0x1b4>)
 800352e:	400b      	ands	r3, r1
 8003530:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	041b      	lsls	r3, r3, #16
 8003538:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6959      	ldr	r1, [r3, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0204 	orr.w	r2, r2, #4
 800359e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0202 	orr.w	r2, r2, #2
 80035ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	f000f800 	.word	0xf000f800

080035e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_LTDC_ConfigLayer+0x1a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e02c      	b.n	8003654 <HAL_LTDC_ConfigLayer+0x74>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2134      	movs	r1, #52	; 0x34
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4614      	mov	r4, r2
 800361e:	461d      	mov	r5, r3
 8003620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800362a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f81f 	bl	8003678 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2201      	movs	r2, #1
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bdb0      	pop	{r4, r5, r7, pc}

0800365c <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800366a:	b2db      	uxtb	r3, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003678:	b480      	push	{r7}
 800367a:	b089      	sub	sp, #36	; 0x24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	0c1b      	lsrs	r3, r3, #16
 800369c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a0:	4413      	add	r3, r2
 80036a2:	041b      	lsls	r3, r3, #16
 80036a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	01db      	lsls	r3, r3, #7
 80036b0:	4413      	add	r3, r2
 80036b2:	3384      	adds	r3, #132	; 0x84
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	4611      	mov	r1, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	01d2      	lsls	r2, r2, #7
 80036c0:	440a      	add	r2, r1
 80036c2:	3284      	adds	r2, #132	; 0x84
 80036c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80036c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036da:	4413      	add	r3, r2
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4619      	mov	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	01db      	lsls	r3, r3, #7
 80036e8:	440b      	add	r3, r1
 80036ea:	3384      	adds	r3, #132	; 0x84
 80036ec:	4619      	mov	r1, r3
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003702:	4413      	add	r3, r2
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	01db      	lsls	r3, r3, #7
 8003712:	4413      	add	r3, r2
 8003714:	3384      	adds	r3, #132	; 0x84
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	4611      	mov	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	01d2      	lsls	r2, r2, #7
 8003722:	440a      	add	r2, r1
 8003724:	3284      	adds	r2, #132	; 0x84
 8003726:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800372a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800373a:	4413      	add	r3, r2
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4619      	mov	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	01db      	lsls	r3, r3, #7
 8003748:	440b      	add	r3, r1
 800374a:	3384      	adds	r3, #132	; 0x84
 800374c:	4619      	mov	r1, r3
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	01db      	lsls	r3, r3, #7
 800375e:	4413      	add	r3, r2
 8003760:	3384      	adds	r3, #132	; 0x84
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	4611      	mov	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	01d2      	lsls	r2, r2, #7
 800376e:	440a      	add	r2, r1
 8003770:	3284      	adds	r2, #132	; 0x84
 8003772:	f023 0307 	bic.w	r3, r3, #7
 8003776:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	01db      	lsls	r3, r3, #7
 8003782:	4413      	add	r3, r2
 8003784:	3384      	adds	r3, #132	; 0x84
 8003786:	461a      	mov	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	061b      	lsls	r3, r3, #24
 80037a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	01db      	lsls	r3, r3, #7
 80037b4:	4413      	add	r3, r2
 80037b6:	3384      	adds	r3, #132	; 0x84
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	01db      	lsls	r3, r3, #7
 80037c4:	4413      	add	r3, r2
 80037c6:	3384      	adds	r3, #132	; 0x84
 80037c8:	461a      	mov	r2, r3
 80037ca:	2300      	movs	r3, #0
 80037cc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037d4:	461a      	mov	r2, r3
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	431a      	orrs	r2, r3
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	431a      	orrs	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4619      	mov	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	01db      	lsls	r3, r3, #7
 80037e8:	440b      	add	r3, r1
 80037ea:	3384      	adds	r3, #132	; 0x84
 80037ec:	4619      	mov	r1, r3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	01db      	lsls	r3, r3, #7
 80037fe:	4413      	add	r3, r2
 8003800:	3384      	adds	r3, #132	; 0x84
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	4611      	mov	r1, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	01d2      	lsls	r2, r2, #7
 800380e:	440a      	add	r2, r1
 8003810:	3284      	adds	r2, #132	; 0x84
 8003812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003816:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	01db      	lsls	r3, r3, #7
 8003822:	4413      	add	r3, r2
 8003824:	3384      	adds	r3, #132	; 0x84
 8003826:	461a      	mov	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	01db      	lsls	r3, r3, #7
 8003838:	4413      	add	r3, r2
 800383a:	3384      	adds	r3, #132	; 0x84
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4619      	mov	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	01db      	lsls	r3, r3, #7
 8003848:	440b      	add	r3, r1
 800384a:	3384      	adds	r3, #132	; 0x84
 800384c:	4619      	mov	r1, r3
 800384e:	4b58      	ldr	r3, [pc, #352]	; (80039b0 <LTDC_SetConfig+0x338>)
 8003850:	4013      	ands	r3, r2
 8003852:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	68f9      	ldr	r1, [r7, #12]
 800385e:	6809      	ldr	r1, [r1, #0]
 8003860:	4608      	mov	r0, r1
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	01c9      	lsls	r1, r1, #7
 8003866:	4401      	add	r1, r0
 8003868:	3184      	adds	r1, #132	; 0x84
 800386a:	4313      	orrs	r3, r2
 800386c:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	01db      	lsls	r3, r3, #7
 8003878:	4413      	add	r3, r2
 800387a:	3384      	adds	r3, #132	; 0x84
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	01db      	lsls	r3, r3, #7
 8003888:	4413      	add	r3, r2
 800388a:	3384      	adds	r3, #132	; 0x84
 800388c:	461a      	mov	r2, r3
 800388e:	2300      	movs	r3, #0
 8003890:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	01db      	lsls	r3, r3, #7
 800389c:	4413      	add	r3, r2
 800389e:	3384      	adds	r3, #132	; 0x84
 80038a0:	461a      	mov	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 80038b0:	2304      	movs	r3, #4
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e01b      	b.n	80038ee <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 80038be:	2303      	movs	r3, #3
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	e014      	b.n	80038ee <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d00b      	beq.n	80038e4 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d007      	beq.n	80038e4 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d003      	beq.n	80038e4 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80038e0:	2b07      	cmp	r3, #7
 80038e2:	d102      	bne.n	80038ea <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 80038e4:	2302      	movs	r3, #2
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	e001      	b.n	80038ee <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 80038ea:	2301      	movs	r3, #1
 80038ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	01db      	lsls	r3, r3, #7
 80038f8:	4413      	add	r3, r2
 80038fa:	3384      	adds	r3, #132	; 0x84
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	4611      	mov	r1, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	01d2      	lsls	r2, r2, #7
 8003908:	440a      	add	r2, r1
 800390a:	3284      	adds	r2, #132	; 0x84
 800390c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003910:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	fb02 f303 	mul.w	r3, r2, r3
 800391c:	041a      	lsls	r2, r3, #16
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	6859      	ldr	r1, [r3, #4]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	1acb      	subs	r3, r1, r3
 8003928:	69f9      	ldr	r1, [r7, #28]
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	3303      	adds	r3, #3
 8003930:	68f9      	ldr	r1, [r7, #12]
 8003932:	6809      	ldr	r1, [r1, #0]
 8003934:	4608      	mov	r0, r1
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	01c9      	lsls	r1, r1, #7
 800393a:	4401      	add	r1, r0
 800393c:	3184      	adds	r1, #132	; 0x84
 800393e:	4313      	orrs	r3, r2
 8003940:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	01db      	lsls	r3, r3, #7
 800394c:	4413      	add	r3, r2
 800394e:	3384      	adds	r3, #132	; 0x84
 8003950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4619      	mov	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	01db      	lsls	r3, r3, #7
 800395c:	440b      	add	r3, r1
 800395e:	3384      	adds	r3, #132	; 0x84
 8003960:	4619      	mov	r1, r3
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <LTDC_SetConfig+0x33c>)
 8003964:	4013      	ands	r3, r2
 8003966:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	01db      	lsls	r3, r3, #7
 8003972:	4413      	add	r3, r2
 8003974:	3384      	adds	r3, #132	; 0x84
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	01db      	lsls	r3, r3, #7
 8003988:	4413      	add	r3, r2
 800398a:	3384      	adds	r3, #132	; 0x84
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	4611      	mov	r1, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	01d2      	lsls	r2, r2, #7
 8003998:	440a      	add	r2, r1
 800399a:	3284      	adds	r2, #132	; 0x84
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6013      	str	r3, [r2, #0]
}
 80039a2:	bf00      	nop
 80039a4:	3724      	adds	r7, #36	; 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	fffff8f8 	.word	0xfffff8f8
 80039b4:	fffff800 	.word	0xfffff800

080039b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80039c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039cc:	6413      	str	r3, [r2, #64]	; 0x40
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039da:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039e6:	f7fe fc51 	bl	800228c <HAL_GetTick>
 80039ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ec:	e009      	b.n	8003a02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039ee:	f7fe fc4d 	bl	800228c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039fc:	d901      	bls.n	8003a02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e022      	b.n	8003a48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a02:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0e:	d1ee      	bne.n	80039ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a10:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a1c:	f7fe fc36 	bl	800228c <HAL_GetTick>
 8003a20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a22:	e009      	b.n	8003a38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a24:	f7fe fc32 	bl	800228c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a32:	d901      	bls.n	8003a38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e007      	b.n	8003a48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a44:	d1ee      	bne.n	8003a24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40007000 	.word	0x40007000

08003a58 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003a60:	f7fe fc14 	bl	800228c <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e067      	b.n	8003b40 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fd fa8d 	bl	8000fa4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003a8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f85e 	bl	8003b50 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	021a      	lsls	r2, r3, #8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2120      	movs	r1, #32
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f856 	bl	8003b6c <QSPI_WaitFlagStateUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003ac4:	7afb      	ldrb	r3, [r7, #11]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d135      	bne.n	8003b36 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <HAL_QSPI_Init+0xf0>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6852      	ldr	r2, [r2, #4]
 8003ad8:	0611      	lsls	r1, r2, #24
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68d2      	ldr	r2, [r2, #12]
 8003ade:	4311      	orrs	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	69d2      	ldr	r2, [r2, #28]
 8003ae4:	4311      	orrs	r1, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6a12      	ldr	r2, [r2, #32]
 8003aea:	4311      	orrs	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_QSPI_Init+0xf4>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6912      	ldr	r2, [r2, #16]
 8003b02:	0411      	lsls	r1, r2, #16
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6952      	ldr	r2, [r2, #20]
 8003b08:	4311      	orrs	r1, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6992      	ldr	r2, [r2, #24]
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003b3e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	00ffff2f 	.word	0x00ffff2f
 8003b4c:	ffe0f8fe 	.word	0xffe0f8fe

08003b50 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b7c:	e01a      	b.n	8003bb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b84:	d016      	beq.n	8003bb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b86:	f7fe fb81 	bl	800228c <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d302      	bcc.n	8003b9c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba8:	f043 0201 	orr.w	r2, r3, #1
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e00e      	b.n	8003bd2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d1d6      	bne.n	8003b7e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003be4:	2300      	movs	r3, #0
 8003be6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e291      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8087 	beq.w	8003d0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c00:	4b96      	ldr	r3, [pc, #600]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d00c      	beq.n	8003c26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0c:	4b93      	ldr	r3, [pc, #588]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d112      	bne.n	8003c3e <HAL_RCC_OscConfig+0x62>
 8003c18:	4b90      	ldr	r3, [pc, #576]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c24:	d10b      	bne.n	8003c3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c26:	4b8d      	ldr	r3, [pc, #564]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d06c      	beq.n	8003d0c <HAL_RCC_OscConfig+0x130>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d168      	bne.n	8003d0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e26b      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x7a>
 8003c48:	4b84      	ldr	r3, [pc, #528]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a83      	ldr	r2, [pc, #524]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	e02e      	b.n	8003cb4 <HAL_RCC_OscConfig+0xd8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x9c>
 8003c5e:	4b7f      	ldr	r3, [pc, #508]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a7e      	ldr	r2, [pc, #504]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b7c      	ldr	r3, [pc, #496]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a7b      	ldr	r2, [pc, #492]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e01d      	b.n	8003cb4 <HAL_RCC_OscConfig+0xd8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c80:	d10c      	bne.n	8003c9c <HAL_RCC_OscConfig+0xc0>
 8003c82:	4b76      	ldr	r3, [pc, #472]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a75      	ldr	r2, [pc, #468]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	4b73      	ldr	r3, [pc, #460]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a72      	ldr	r2, [pc, #456]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e00b      	b.n	8003cb4 <HAL_RCC_OscConfig+0xd8>
 8003c9c:	4b6f      	ldr	r3, [pc, #444]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a6e      	ldr	r2, [pc, #440]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	4b6c      	ldr	r3, [pc, #432]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a6b      	ldr	r2, [pc, #428]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d013      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fe fae6 	bl	800228c <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fe fae2 	bl	800228c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	; 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e21f      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	4b61      	ldr	r3, [pc, #388]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0xe8>
 8003ce2:	e014      	b.n	8003d0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fad2 	bl	800228c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fe face 	bl	800228c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e20b      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfe:	4b57      	ldr	r3, [pc, #348]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x110>
 8003d0a:	e000      	b.n	8003d0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d069      	beq.n	8003dee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d1a:	4b50      	ldr	r3, [pc, #320]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00b      	beq.n	8003d3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d26:	4b4d      	ldr	r3, [pc, #308]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d11c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x190>
 8003d32:	4b4a      	ldr	r3, [pc, #296]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d116      	bne.n	8003d6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	4b47      	ldr	r3, [pc, #284]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_RCC_OscConfig+0x17a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d001      	beq.n	8003d56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e1df      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d56:	4b41      	ldr	r3, [pc, #260]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	493d      	ldr	r1, [pc, #244]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6a:	e040      	b.n	8003dee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d023      	beq.n	8003dbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d74:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a38      	ldr	r2, [pc, #224]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe fa84 	bl	800228c <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d88:	f7fe fa80 	bl	800228c <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e1bd      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9a:	4b30      	ldr	r3, [pc, #192]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da6:	4b2d      	ldr	r3, [pc, #180]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4929      	ldr	r1, [pc, #164]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
 8003dba:	e018      	b.n	8003dee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dbc:	4b27      	ldr	r3, [pc, #156]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fa60 	bl	800228c <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd0:	f7fe fa5c 	bl	800228c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e199      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de2:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d038      	beq.n	8003e6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d019      	beq.n	8003e36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e02:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e06:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0e:	f7fe fa3d 	bl	800228c <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e16:	f7fe fa39 	bl	800228c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e176      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x23a>
 8003e34:	e01a      	b.n	8003e6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e36:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3a:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <HAL_RCC_OscConfig+0x280>)
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fe fa23 	bl	800228c <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4a:	f7fe fa1f 	bl	800228c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d903      	bls.n	8003e60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e15c      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
 8003e5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e60:	4b91      	ldr	r3, [pc, #580]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ee      	bne.n	8003e4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80a4 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e7a:	4b8b      	ldr	r3, [pc, #556]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10d      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	4b88      	ldr	r3, [pc, #544]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	4a87      	ldr	r2, [pc, #540]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6413      	str	r3, [r2, #64]	; 0x40
 8003e92:	4b85      	ldr	r3, [pc, #532]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea2:	4b82      	ldr	r3, [pc, #520]	; (80040ac <HAL_RCC_OscConfig+0x4d0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d118      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003eae:	4b7f      	ldr	r3, [pc, #508]	; (80040ac <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a7e      	ldr	r2, [pc, #504]	; (80040ac <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eba:	f7fe f9e7 	bl	800228c <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec2:	f7fe f9e3 	bl	800228c <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b64      	cmp	r3, #100	; 0x64
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e120      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed4:	4b75      	ldr	r3, [pc, #468]	; (80040ac <HAL_RCC_OscConfig+0x4d0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d106      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x31a>
 8003ee8:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a6e      	ldr	r2, [pc, #440]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef4:	e02d      	b.n	8003f52 <HAL_RCC_OscConfig+0x376>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x33c>
 8003efe:	4b6a      	ldr	r3, [pc, #424]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	4a69      	ldr	r2, [pc, #420]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0a:	4b67      	ldr	r3, [pc, #412]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	4a66      	ldr	r2, [pc, #408]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f10:	f023 0304 	bic.w	r3, r3, #4
 8003f14:	6713      	str	r3, [r2, #112]	; 0x70
 8003f16:	e01c      	b.n	8003f52 <HAL_RCC_OscConfig+0x376>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b05      	cmp	r3, #5
 8003f1e:	d10c      	bne.n	8003f3a <HAL_RCC_OscConfig+0x35e>
 8003f20:	4b61      	ldr	r3, [pc, #388]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4a60      	ldr	r2, [pc, #384]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f26:	f043 0304 	orr.w	r3, r3, #4
 8003f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2c:	4b5e      	ldr	r3, [pc, #376]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	4a5d      	ldr	r2, [pc, #372]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6713      	str	r3, [r2, #112]	; 0x70
 8003f38:	e00b      	b.n	8003f52 <HAL_RCC_OscConfig+0x376>
 8003f3a:	4b5b      	ldr	r3, [pc, #364]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4a5a      	ldr	r2, [pc, #360]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6713      	str	r3, [r2, #112]	; 0x70
 8003f46:	4b58      	ldr	r3, [pc, #352]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a57      	ldr	r2, [pc, #348]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d015      	beq.n	8003f86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fe f997 	bl	800228c <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fe f993 	bl	800228c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e0ce      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f78:	4b4b      	ldr	r3, [pc, #300]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ee      	beq.n	8003f62 <HAL_RCC_OscConfig+0x386>
 8003f84:	e014      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f86:	f7fe f981 	bl	800228c <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fe f97d 	bl	800228c <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e0b8      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa4:	4b40      	ldr	r3, [pc, #256]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ee      	bne.n	8003f8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d105      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb6:	4b3c      	ldr	r3, [pc, #240]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80a4 	beq.w	8004114 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fcc:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d06b      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d149      	bne.n	8004074 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8003fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fe f94e 	bl	800228c <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fe f94a 	bl	800228c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e087      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	4b28      	ldr	r3, [pc, #160]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69da      	ldr	r2, [r3, #28]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	019b      	lsls	r3, r3, #6
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	3b01      	subs	r3, #1
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	4313      	orrs	r3, r2
 8004038:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 800403a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800403e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8004046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800404a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fe f91e 	bl	800228c <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004054:	f7fe f91a 	bl	800228c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e057      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x478>
 8004072:	e04f      	b.n	8004114 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 800407a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800407e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fe f904 	bl	800228c <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004088:	f7fe f900 	bl	800228c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e03d      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <HAL_RCC_OscConfig+0x4cc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x4ac>
 80040a6:	e035      	b.n	8004114 <HAL_RCC_OscConfig+0x538>
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040b0:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_RCC_OscConfig+0x544>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d028      	beq.n	8004110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d121      	bne.n	8004110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d11a      	bne.n	8004110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040e0:	4013      	ands	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d111      	bne.n	8004110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	085b      	lsrs	r3, r3, #1
 80040f8:	3b01      	subs	r3, #1
 80040fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d107      	bne.n	8004110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800

08004124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0d0      	b.n	80042de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800413c:	4b6a      	ldr	r3, [pc, #424]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d910      	bls.n	800416c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b67      	ldr	r3, [pc, #412]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 020f 	bic.w	r2, r3, #15
 8004152:	4965      	ldr	r1, [pc, #404]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0b8      	b.n	80042de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004184:	4b59      	ldr	r3, [pc, #356]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a58      	ldr	r2, [pc, #352]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 800418a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800418e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800419c:	4b53      	ldr	r3, [pc, #332]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a52      	ldr	r2, [pc, #328]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80041a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b50      	ldr	r3, [pc, #320]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	494d      	ldr	r1, [pc, #308]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d040      	beq.n	8004248 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	4b47      	ldr	r3, [pc, #284]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d115      	bne.n	8004206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e07f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b41      	ldr	r3, [pc, #260]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e073      	b.n	80042de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f6:	4b3d      	ldr	r3, [pc, #244]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e06b      	b.n	80042de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4936      	ldr	r1, [pc, #216]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 8004214:	4313      	orrs	r3, r2
 8004216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004218:	f7fe f838 	bl	800228c <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	e00a      	b.n	8004236 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004220:	f7fe f834 	bl	800228c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e053      	b.n	80042de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	4b2d      	ldr	r3, [pc, #180]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 020c 	and.w	r2, r3, #12
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	d1eb      	bne.n	8004220 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004248:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d210      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 020f 	bic.w	r2, r3, #15
 800425e:	4922      	ldr	r1, [pc, #136]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e032      	b.n	80042de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4916      	ldr	r1, [pc, #88]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	490e      	ldr	r1, [pc, #56]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042b6:	f000 f821 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	490a      	ldr	r1, [pc, #40]	; (80042f0 <HAL_RCC_ClockConfig+0x1cc>)
 80042c8:	5ccb      	ldrb	r3, [r1, r3]
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1d0>)
 80042d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1d4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd ff94 	bl	8002204 <HAL_InitTick>

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023c00 	.word	0x40023c00
 80042ec:	40023800 	.word	0x40023800
 80042f0:	08006a04 	.word	0x08006a04
 80042f4:	20000000 	.word	0x20000000
 80042f8:	20000010 	.word	0x20000010

080042fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004300:	b090      	sub	sp, #64	; 0x40
 8004302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
 8004308:	2300      	movs	r3, #0
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800430c:	2300      	movs	r3, #0
 800430e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004314:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b08      	cmp	r3, #8
 800431e:	d00d      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x40>
 8004320:	2b08      	cmp	r3, #8
 8004322:	f200 80a1 	bhi.w	8004468 <HAL_RCC_GetSysClockFreq+0x16c>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x34>
 800432a:	2b04      	cmp	r3, #4
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x3a>
 800432e:	e09b      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004330:	4b53      	ldr	r3, [pc, #332]	; (8004480 <HAL_RCC_GetSysClockFreq+0x184>)
 8004332:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004334:	e09b      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004336:	4b53      	ldr	r3, [pc, #332]	; (8004484 <HAL_RCC_GetSysClockFreq+0x188>)
 8004338:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800433a:	e098      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800433c:	4b4f      	ldr	r3, [pc, #316]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004346:	4b4d      	ldr	r3, [pc, #308]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d028      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004352:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	2200      	movs	r2, #0
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	627a      	str	r2, [r7, #36]	; 0x24
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004364:	2100      	movs	r1, #0
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_RCC_GetSysClockFreq+0x188>)
 8004368:	fb03 f201 	mul.w	r2, r3, r1
 800436c:	2300      	movs	r3, #0
 800436e:	fb00 f303 	mul.w	r3, r0, r3
 8004372:	4413      	add	r3, r2
 8004374:	4a43      	ldr	r2, [pc, #268]	; (8004484 <HAL_RCC_GetSysClockFreq+0x188>)
 8004376:	fba0 1202 	umull	r1, r2, r0, r2
 800437a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800437c:	460a      	mov	r2, r1
 800437e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004382:	4413      	add	r3, r2
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004388:	2200      	movs	r2, #0
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	61fa      	str	r2, [r7, #28]
 800438e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004392:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004396:	f7fb ff8b 	bl	80002b0 <__aeabi_uldivmod>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4613      	mov	r3, r2
 80043a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a2:	e053      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a4:	4b35      	ldr	r3, [pc, #212]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	2200      	movs	r2, #0
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	617a      	str	r2, [r7, #20]
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043b6:	f04f 0b00 	mov.w	fp, #0
 80043ba:	4652      	mov	r2, sl
 80043bc:	465b      	mov	r3, fp
 80043be:	f04f 0000 	mov.w	r0, #0
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	0159      	lsls	r1, r3, #5
 80043c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043cc:	0150      	lsls	r0, r2, #5
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	ebb2 080a 	subs.w	r8, r2, sl
 80043d6:	eb63 090b 	sbc.w	r9, r3, fp
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043ee:	ebb2 0408 	subs.w	r4, r2, r8
 80043f2:	eb63 0509 	sbc.w	r5, r3, r9
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	00eb      	lsls	r3, r5, #3
 8004400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004404:	00e2      	lsls	r2, r4, #3
 8004406:	4614      	mov	r4, r2
 8004408:	461d      	mov	r5, r3
 800440a:	eb14 030a 	adds.w	r3, r4, sl
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	eb45 030b 	adc.w	r3, r5, fp
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004422:	4629      	mov	r1, r5
 8004424:	028b      	lsls	r3, r1, #10
 8004426:	4621      	mov	r1, r4
 8004428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800442c:	4621      	mov	r1, r4
 800442e:	028a      	lsls	r2, r1, #10
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004436:	2200      	movs	r2, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	60fa      	str	r2, [r7, #12]
 800443c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004440:	f7fb ff36 	bl	80002b0 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_GetSysClockFreq+0x180>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800445c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004466:	e002      	b.n	800446e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetSysClockFreq+0x184>)
 800446a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800446c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004470:	4618      	mov	r0, r3
 8004472:	3740      	adds	r7, #64	; 0x40
 8004474:	46bd      	mov	sp, r7
 8004476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800
 8004480:	00f42400 	.word	0x00f42400
 8004484:	017d7840 	.word	0x017d7840

08004488 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_RCC_GetHCLKFreq+0x14>)
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000000 	.word	0x20000000

080044a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044a4:	f7ff fff0 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0a9b      	lsrs	r3, r3, #10
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4903      	ldr	r1, [pc, #12]	; (80044c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40023800 	.word	0x40023800
 80044c4:	08006a14 	.word	0x08006a14

080044c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044cc:	f7ff ffdc 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0b5b      	lsrs	r3, r3, #13
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4903      	ldr	r1, [pc, #12]	; (80044ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40023800 	.word	0x40023800
 80044ec:	08006a14 	.word	0x08006a14

080044f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d012      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004518:	4b69      	ldr	r3, [pc, #420]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a68      	ldr	r2, [pc, #416]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004522:	6093      	str	r3, [r2, #8]
 8004524:	4b66      	ldr	r3, [pc, #408]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452c:	4964      	ldr	r1, [pc, #400]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800453a:	2301      	movs	r3, #1
 800453c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d017      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800454a:	4b5d      	ldr	r3, [pc, #372]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	4959      	ldr	r1, [pc, #356]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004568:	d101      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800456a:	2301      	movs	r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d017      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004586:	4b4e      	ldr	r3, [pc, #312]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800458c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	494a      	ldr	r1, [pc, #296]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a4:	d101      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045c2:	2301      	movs	r3, #1
 80045c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 808b 	beq.w	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045d4:	4b3a      	ldr	r3, [pc, #232]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	4a39      	ldr	r2, [pc, #228]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045de:	6413      	str	r3, [r2, #64]	; 0x40
 80045e0:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045ec:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f8:	f7fd fe48 	bl	800228c <HAL_GetTick>
 80045fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004600:	f7fd fe44 	bl	800228c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	; 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e357      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004612:	4b2c      	ldr	r3, [pc, #176]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800461e:	4b28      	ldr	r3, [pc, #160]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004626:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d035      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	429a      	cmp	r2, r3
 800463a:	d02e      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800463c:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004644:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004646:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004650:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004652:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	4a1a      	ldr	r2, [pc, #104]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004664:	4b16      	ldr	r3, [pc, #88]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b01      	cmp	r3, #1
 800466e:	d114      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd fe0c 	bl	800228c <HAL_GetTick>
 8004674:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	e00a      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fd fe08 	bl	800228c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e319      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0ee      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a6:	d111      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046b6:	400b      	ands	r3, r1
 80046b8:	4901      	ldr	r1, [pc, #4]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
 80046be:	e00b      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046c0:	40023800 	.word	0x40023800
 80046c4:	40007000 	.word	0x40007000
 80046c8:	0ffffcff 	.word	0x0ffffcff
 80046cc:	4baa      	ldr	r3, [pc, #680]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4aa9      	ldr	r2, [pc, #676]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046d6:	6093      	str	r3, [r2, #8]
 80046d8:	4ba7      	ldr	r3, [pc, #668]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e4:	49a4      	ldr	r1, [pc, #656]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d010      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046f6:	4ba0      	ldr	r3, [pc, #640]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046fc:	4a9e      	ldr	r2, [pc, #632]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004702:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004706:	4b9c      	ldr	r3, [pc, #624]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004708:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	4999      	ldr	r1, [pc, #612]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004724:	4b94      	ldr	r3, [pc, #592]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004732:	4991      	ldr	r1, [pc, #580]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004746:	4b8c      	ldr	r3, [pc, #560]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004754:	4988      	ldr	r1, [pc, #544]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004768:	4b83      	ldr	r3, [pc, #524]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004776:	4980      	ldr	r1, [pc, #512]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800478a:	4b7b      	ldr	r3, [pc, #492]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	4977      	ldr	r1, [pc, #476]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ac:	4b72      	ldr	r3, [pc, #456]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	496f      	ldr	r1, [pc, #444]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047ce:	4b6a      	ldr	r3, [pc, #424]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	f023 020c 	bic.w	r2, r3, #12
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047dc:	4966      	ldr	r1, [pc, #408]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047f0:	4b61      	ldr	r3, [pc, #388]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fe:	495e      	ldr	r1, [pc, #376]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004812:	4b59      	ldr	r3, [pc, #356]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004820:	4955      	ldr	r1, [pc, #340]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004834:	4b50      	ldr	r3, [pc, #320]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	494d      	ldr	r1, [pc, #308]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004856:	4b48      	ldr	r3, [pc, #288]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	4944      	ldr	r1, [pc, #272]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004878:	4b3f      	ldr	r3, [pc, #252]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004886:	493c      	ldr	r1, [pc, #240]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800489a:	4b37      	ldr	r3, [pc, #220]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a8:	4933      	ldr	r1, [pc, #204]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048bc:	4b2e      	ldr	r3, [pc, #184]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ca:	492b      	ldr	r1, [pc, #172]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d011      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ec:	4922      	ldr	r1, [pc, #136]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fc:	d101      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048fe:	2301      	movs	r3, #1
 8004900:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800490e:	2301      	movs	r3, #1
 8004910:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004924:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492c:	4912      	ldr	r1, [pc, #72]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004950:	4909      	ldr	r1, [pc, #36]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d006      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80d9 	beq.w	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800496c:	4b02      	ldr	r3, [pc, #8]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a01      	ldr	r2, [pc, #4]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004972:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004976:	e001      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004978:	40023800 	.word	0x40023800
 800497c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800497e:	f7fd fc85 	bl	800228c <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004986:	f7fd fc81 	bl	800228c <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b64      	cmp	r3, #100	; 0x64
 8004992:	d901      	bls.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e194      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004998:	4b6c      	ldr	r3, [pc, #432]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f0      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d021      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11d      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049b8:	4b64      	ldr	r3, [pc, #400]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049c6:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049cc:	0e1b      	lsrs	r3, r3, #24
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	019a      	lsls	r2, r3, #6
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	431a      	orrs	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	061b      	lsls	r3, r3, #24
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	071b      	lsls	r3, r3, #28
 80049ec:	4957      	ldr	r1, [pc, #348]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d02e      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a1e:	d129      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a20:	4b4a      	ldr	r3, [pc, #296]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a26:	0c1b      	lsrs	r3, r3, #16
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a2e:	4b47      	ldr	r3, [pc, #284]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a34:	0f1b      	lsrs	r3, r3, #28
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	019a      	lsls	r2, r3, #6
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	071b      	lsls	r3, r3, #28
 8004a54:	493d      	ldr	r1, [pc, #244]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a5c:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a62:	f023 021f 	bic.w	r2, r3, #31
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	4937      	ldr	r1, [pc, #220]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01d      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a80:	4b32      	ldr	r3, [pc, #200]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a86:	0e1b      	lsrs	r3, r3, #24
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a8e:	4b2f      	ldr	r3, [pc, #188]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a94:	0f1b      	lsrs	r3, r3, #28
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	019a      	lsls	r2, r3, #6
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	041b      	lsls	r3, r3, #16
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	071b      	lsls	r3, r3, #28
 8004ab4:	4925      	ldr	r1, [pc, #148]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d011      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	019a      	lsls	r2, r3, #6
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	061b      	lsls	r3, r3, #24
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	071b      	lsls	r3, r3, #28
 8004ae4:	4919      	ldr	r1, [pc, #100]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aec:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af8:	f7fd fbc8 	bl	800228c <HAL_GetTick>
 8004afc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b00:	f7fd fbc4 	bl	800228c <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b64      	cmp	r3, #100	; 0x64
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0d7      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b12:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	f040 80cd 	bne.w	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b26:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b32:	f7fd fbab 	bl	800228c <HAL_GetTick>
 8004b36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b38:	e00a      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b3a:	f7fd fba7 	bl	800228c <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b64      	cmp	r3, #100	; 0x64
 8004b46:	d903      	bls.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0ba      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b50:	4b5e      	ldr	r3, [pc, #376]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5c:	d0ed      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d009      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d02e      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d12a      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b86:	4b51      	ldr	r3, [pc, #324]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b94:	4b4d      	ldr	r3, [pc, #308]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	0f1b      	lsrs	r3, r3, #28
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	019a      	lsls	r2, r3, #6
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	041b      	lsls	r3, r3, #16
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	071b      	lsls	r3, r3, #28
 8004bba:	4944      	ldr	r1, [pc, #272]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bc2:	4b42      	ldr	r3, [pc, #264]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	493d      	ldr	r1, [pc, #244]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d022      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bf0:	d11d      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	0e1b      	lsrs	r3, r3, #24
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c00:	4b32      	ldr	r3, [pc, #200]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	0f1b      	lsrs	r3, r3, #28
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	019a      	lsls	r2, r3, #6
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	071b      	lsls	r3, r3, #28
 8004c26:	4929      	ldr	r1, [pc, #164]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d028      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	0e1b      	lsrs	r3, r3, #24
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c48:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	0c1b      	lsrs	r3, r3, #16
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	019a      	lsls	r2, r3, #6
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	431a      	orrs	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	071b      	lsls	r3, r3, #28
 8004c6e:	4917      	ldr	r1, [pc, #92]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c76:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	4911      	ldr	r1, [pc, #68]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a0e      	ldr	r2, [pc, #56]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fd faf8 	bl	800228c <HAL_GetTick>
 8004c9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ca0:	f7fd faf4 	bl	800228c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	; 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e007      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cbe:	d1ef      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800

08004cd0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e025      	b.n	8004d30 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f81d 	bl	8004d38 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f001 f84f 	bl	8005db4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	f001 f8b9 	bl	8005e98 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d101      	bne.n	8004d68 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
 8004d66:	e018      	b.n	8004d9a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f001 f90d 	bl	8005f98 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d104      	bne.n	8004d90 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2205      	movs	r2, #5
 8004d8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004d8e:	e003      	b.n	8004d98 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d101      	bne.n	8004dbc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
 8004dba:	e00e      	b.n	8004dda <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 f905 	bl	8005fda <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e040      	b.n	8004e76 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fc f94d 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2224      	movs	r2, #36	; 0x24
 8004e0e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fb1f 	bl	8005464 <UART_SetConfig>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e022      	b.n	8004e76 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fd77 	bl	800592c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f042 0201 	orr.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fdfe 	bl	8005a70 <UART_CheckIdleState>
 8004e74:	4603      	mov	r3, r0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b0ba      	sub	sp, #232	; 0xe8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004eaa:	f640 030f 	movw	r3, #2063	; 0x80f
 8004eae:	4013      	ands	r3, r2
 8004eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d115      	bne.n	8004ee8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00f      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d009      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8297 	beq.w	800540c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	4798      	blx	r3
      }
      return;
 8004ee6:	e291      	b.n	800540c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8117 	beq.w	8005120 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004efe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f02:	4b85      	ldr	r3, [pc, #532]	; (8005118 <HAL_UART_IRQHandler+0x298>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 810a 	beq.w	8005120 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d011      	beq.n	8004f3c <HAL_UART_IRQHandler+0xbc>
 8004f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00b      	beq.n	8004f3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f32:	f043 0201 	orr.w	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d011      	beq.n	8004f6c <HAL_UART_IRQHandler+0xec>
 8004f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00b      	beq.n	8004f6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f62:	f043 0204 	orr.w	r2, r3, #4
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d011      	beq.n	8004f9c <HAL_UART_IRQHandler+0x11c>
 8004f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00b      	beq.n	8004f9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2204      	movs	r2, #4
 8004f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f92:	f043 0202 	orr.w	r2, r3, #2
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d017      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00b      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fce:	f043 0208 	orr.w	r2, r3, #8
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d012      	beq.n	800500a <HAL_UART_IRQHandler+0x18a>
 8004fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00c      	beq.n	800500a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ff8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005000:	f043 0220 	orr.w	r2, r3, #32
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 81fd 	beq.w	8005410 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005044:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005052:	2b40      	cmp	r3, #64	; 0x40
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800505a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800505e:	2b00      	cmp	r3, #0
 8005060:	d04f      	beq.n	8005102 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fe01 	bl	8005c6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	d141      	bne.n	80050fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3308      	adds	r3, #8
 800507c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800508c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3308      	adds	r3, #8
 800509e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1d9      	bne.n	8005076 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d013      	beq.n	80050f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ce:	4a13      	ldr	r2, [pc, #76]	; (800511c <HAL_UART_IRQHandler+0x29c>)
 80050d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fd fc80 	bl	80029dc <HAL_DMA_Abort_IT>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d017      	beq.n	8005112 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050ec:	4610      	mov	r0, r2
 80050ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	e00f      	b.n	8005112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9a0 	bl	8005438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	e00b      	b.n	8005112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f99c 	bl	8005438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	e007      	b.n	8005112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f998 	bl	8005438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005110:	e17e      	b.n	8005410 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005112:	bf00      	nop
    return;
 8005114:	e17c      	b.n	8005410 <HAL_UART_IRQHandler+0x590>
 8005116:	bf00      	nop
 8005118:	04000120 	.word	0x04000120
 800511c:	08005d33 	.word	0x08005d33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005124:	2b01      	cmp	r3, #1
 8005126:	f040 814c 	bne.w	80053c2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800512a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8145 	beq.w	80053c2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 813e 	beq.w	80053c2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2210      	movs	r2, #16
 800514c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	f040 80b6 	bne.w	80052ca <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800516a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8150 	beq.w	8005414 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800517a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800517e:	429a      	cmp	r2, r3
 8005180:	f080 8148 	bcs.w	8005414 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800518a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005198:	f000 8086 	beq.w	80052a8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1da      	bne.n	800519c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3308      	adds	r3, #8
 80051ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800520a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800520e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005212:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800521c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e1      	bne.n	80051e6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005248:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800524c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e3      	bne.n	8005222 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005278:	f023 0310 	bic.w	r3, r3, #16
 800527c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800528a:	65bb      	str	r3, [r7, #88]	; 0x58
 800528c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e4      	bne.n	8005268 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fd fb2a 	bl	80028fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	b29b      	uxth	r3, r3
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f8c2 	bl	800544c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052c8:	e0a4      	b.n	8005414 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 8096 	beq.w	8005418 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80052ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8091 	beq.w	8005418 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800530a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005318:	647b      	str	r3, [r7, #68]	; 0x44
 800531a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800531e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e4      	bne.n	80052f6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	623b      	str	r3, [r7, #32]
   return(result);
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	f023 0301 	bic.w	r3, r3, #1
 8005342:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3308      	adds	r3, #8
 800534c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005350:	633a      	str	r2, [r7, #48]	; 0x30
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e3      	bne.n	800532c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	60fb      	str	r3, [r7, #12]
   return(result);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f023 0310 	bic.w	r3, r3, #16
 800538c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	69b9      	ldr	r1, [r7, #24]
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	617b      	str	r3, [r7, #20]
   return(result);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e4      	bne.n	8005378 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f846 	bl	800544c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053c0:	e02a      	b.n	8005418 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00e      	beq.n	80053ec <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d01c      	beq.n	800541c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
    }
    return;
 80053ea:	e017      	b.n	800541c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d012      	beq.n	800541e <HAL_UART_IRQHandler+0x59e>
 80053f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00c      	beq.n	800541e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fcaa 	bl	8005d5e <UART_EndTransmit_IT>
    return;
 800540a:	e008      	b.n	800541e <HAL_UART_IRQHandler+0x59e>
      return;
 800540c:	bf00      	nop
 800540e:	e006      	b.n	800541e <HAL_UART_IRQHandler+0x59e>
    return;
 8005410:	bf00      	nop
 8005412:	e004      	b.n	800541e <HAL_UART_IRQHandler+0x59e>
      return;
 8005414:	bf00      	nop
 8005416:	e002      	b.n	800541e <HAL_UART_IRQHandler+0x59e>
      return;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <HAL_UART_IRQHandler+0x59e>
    return;
 800541c:	bf00      	nop
  }

}
 800541e:	37e8      	adds	r7, #232	; 0xe8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4ba6      	ldr	r3, [pc, #664]	; (8005728 <UART_SetConfig+0x2c4>)
 8005490:	4013      	ands	r3, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	6979      	ldr	r1, [r7, #20]
 8005498:	430b      	orrs	r3, r1
 800549a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a94      	ldr	r2, [pc, #592]	; (800572c <UART_SetConfig+0x2c8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d120      	bne.n	8005522 <UART_SetConfig+0xbe>
 80054e0:	4b93      	ldr	r3, [pc, #588]	; (8005730 <UART_SetConfig+0x2cc>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d816      	bhi.n	800551c <UART_SetConfig+0xb8>
 80054ee:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <UART_SetConfig+0x90>)
 80054f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f4:	08005505 	.word	0x08005505
 80054f8:	08005511 	.word	0x08005511
 80054fc:	0800550b 	.word	0x0800550b
 8005500:	08005517 	.word	0x08005517
 8005504:	2301      	movs	r3, #1
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e150      	b.n	80057ac <UART_SetConfig+0x348>
 800550a:	2302      	movs	r3, #2
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e14d      	b.n	80057ac <UART_SetConfig+0x348>
 8005510:	2304      	movs	r3, #4
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e14a      	b.n	80057ac <UART_SetConfig+0x348>
 8005516:	2308      	movs	r3, #8
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e147      	b.n	80057ac <UART_SetConfig+0x348>
 800551c:	2310      	movs	r3, #16
 800551e:	77fb      	strb	r3, [r7, #31]
 8005520:	e144      	b.n	80057ac <UART_SetConfig+0x348>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a83      	ldr	r2, [pc, #524]	; (8005734 <UART_SetConfig+0x2d0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d132      	bne.n	8005592 <UART_SetConfig+0x12e>
 800552c:	4b80      	ldr	r3, [pc, #512]	; (8005730 <UART_SetConfig+0x2cc>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b0c      	cmp	r3, #12
 8005538:	d828      	bhi.n	800558c <UART_SetConfig+0x128>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <UART_SetConfig+0xdc>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005575 	.word	0x08005575
 8005544:	0800558d 	.word	0x0800558d
 8005548:	0800558d 	.word	0x0800558d
 800554c:	0800558d 	.word	0x0800558d
 8005550:	08005581 	.word	0x08005581
 8005554:	0800558d 	.word	0x0800558d
 8005558:	0800558d 	.word	0x0800558d
 800555c:	0800558d 	.word	0x0800558d
 8005560:	0800557b 	.word	0x0800557b
 8005564:	0800558d 	.word	0x0800558d
 8005568:	0800558d 	.word	0x0800558d
 800556c:	0800558d 	.word	0x0800558d
 8005570:	08005587 	.word	0x08005587
 8005574:	2300      	movs	r3, #0
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e118      	b.n	80057ac <UART_SetConfig+0x348>
 800557a:	2302      	movs	r3, #2
 800557c:	77fb      	strb	r3, [r7, #31]
 800557e:	e115      	b.n	80057ac <UART_SetConfig+0x348>
 8005580:	2304      	movs	r3, #4
 8005582:	77fb      	strb	r3, [r7, #31]
 8005584:	e112      	b.n	80057ac <UART_SetConfig+0x348>
 8005586:	2308      	movs	r3, #8
 8005588:	77fb      	strb	r3, [r7, #31]
 800558a:	e10f      	b.n	80057ac <UART_SetConfig+0x348>
 800558c:	2310      	movs	r3, #16
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	e10c      	b.n	80057ac <UART_SetConfig+0x348>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a68      	ldr	r2, [pc, #416]	; (8005738 <UART_SetConfig+0x2d4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d120      	bne.n	80055de <UART_SetConfig+0x17a>
 800559c:	4b64      	ldr	r3, [pc, #400]	; (8005730 <UART_SetConfig+0x2cc>)
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055a6:	2b30      	cmp	r3, #48	; 0x30
 80055a8:	d013      	beq.n	80055d2 <UART_SetConfig+0x16e>
 80055aa:	2b30      	cmp	r3, #48	; 0x30
 80055ac:	d814      	bhi.n	80055d8 <UART_SetConfig+0x174>
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d009      	beq.n	80055c6 <UART_SetConfig+0x162>
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d810      	bhi.n	80055d8 <UART_SetConfig+0x174>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <UART_SetConfig+0x15c>
 80055ba:	2b10      	cmp	r3, #16
 80055bc:	d006      	beq.n	80055cc <UART_SetConfig+0x168>
 80055be:	e00b      	b.n	80055d8 <UART_SetConfig+0x174>
 80055c0:	2300      	movs	r3, #0
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e0f2      	b.n	80057ac <UART_SetConfig+0x348>
 80055c6:	2302      	movs	r3, #2
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e0ef      	b.n	80057ac <UART_SetConfig+0x348>
 80055cc:	2304      	movs	r3, #4
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e0ec      	b.n	80057ac <UART_SetConfig+0x348>
 80055d2:	2308      	movs	r3, #8
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e0e9      	b.n	80057ac <UART_SetConfig+0x348>
 80055d8:	2310      	movs	r3, #16
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e0e6      	b.n	80057ac <UART_SetConfig+0x348>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a56      	ldr	r2, [pc, #344]	; (800573c <UART_SetConfig+0x2d8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d120      	bne.n	800562a <UART_SetConfig+0x1c6>
 80055e8:	4b51      	ldr	r3, [pc, #324]	; (8005730 <UART_SetConfig+0x2cc>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055f2:	2bc0      	cmp	r3, #192	; 0xc0
 80055f4:	d013      	beq.n	800561e <UART_SetConfig+0x1ba>
 80055f6:	2bc0      	cmp	r3, #192	; 0xc0
 80055f8:	d814      	bhi.n	8005624 <UART_SetConfig+0x1c0>
 80055fa:	2b80      	cmp	r3, #128	; 0x80
 80055fc:	d009      	beq.n	8005612 <UART_SetConfig+0x1ae>
 80055fe:	2b80      	cmp	r3, #128	; 0x80
 8005600:	d810      	bhi.n	8005624 <UART_SetConfig+0x1c0>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <UART_SetConfig+0x1a8>
 8005606:	2b40      	cmp	r3, #64	; 0x40
 8005608:	d006      	beq.n	8005618 <UART_SetConfig+0x1b4>
 800560a:	e00b      	b.n	8005624 <UART_SetConfig+0x1c0>
 800560c:	2300      	movs	r3, #0
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e0cc      	b.n	80057ac <UART_SetConfig+0x348>
 8005612:	2302      	movs	r3, #2
 8005614:	77fb      	strb	r3, [r7, #31]
 8005616:	e0c9      	b.n	80057ac <UART_SetConfig+0x348>
 8005618:	2304      	movs	r3, #4
 800561a:	77fb      	strb	r3, [r7, #31]
 800561c:	e0c6      	b.n	80057ac <UART_SetConfig+0x348>
 800561e:	2308      	movs	r3, #8
 8005620:	77fb      	strb	r3, [r7, #31]
 8005622:	e0c3      	b.n	80057ac <UART_SetConfig+0x348>
 8005624:	2310      	movs	r3, #16
 8005626:	77fb      	strb	r3, [r7, #31]
 8005628:	e0c0      	b.n	80057ac <UART_SetConfig+0x348>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a44      	ldr	r2, [pc, #272]	; (8005740 <UART_SetConfig+0x2dc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d125      	bne.n	8005680 <UART_SetConfig+0x21c>
 8005634:	4b3e      	ldr	r3, [pc, #248]	; (8005730 <UART_SetConfig+0x2cc>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005642:	d017      	beq.n	8005674 <UART_SetConfig+0x210>
 8005644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005648:	d817      	bhi.n	800567a <UART_SetConfig+0x216>
 800564a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800564e:	d00b      	beq.n	8005668 <UART_SetConfig+0x204>
 8005650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005654:	d811      	bhi.n	800567a <UART_SetConfig+0x216>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <UART_SetConfig+0x1fe>
 800565a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800565e:	d006      	beq.n	800566e <UART_SetConfig+0x20a>
 8005660:	e00b      	b.n	800567a <UART_SetConfig+0x216>
 8005662:	2300      	movs	r3, #0
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e0a1      	b.n	80057ac <UART_SetConfig+0x348>
 8005668:	2302      	movs	r3, #2
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e09e      	b.n	80057ac <UART_SetConfig+0x348>
 800566e:	2304      	movs	r3, #4
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e09b      	b.n	80057ac <UART_SetConfig+0x348>
 8005674:	2308      	movs	r3, #8
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e098      	b.n	80057ac <UART_SetConfig+0x348>
 800567a:	2310      	movs	r3, #16
 800567c:	77fb      	strb	r3, [r7, #31]
 800567e:	e095      	b.n	80057ac <UART_SetConfig+0x348>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2f      	ldr	r2, [pc, #188]	; (8005744 <UART_SetConfig+0x2e0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d125      	bne.n	80056d6 <UART_SetConfig+0x272>
 800568a:	4b29      	ldr	r3, [pc, #164]	; (8005730 <UART_SetConfig+0x2cc>)
 800568c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005698:	d017      	beq.n	80056ca <UART_SetConfig+0x266>
 800569a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800569e:	d817      	bhi.n	80056d0 <UART_SetConfig+0x26c>
 80056a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a4:	d00b      	beq.n	80056be <UART_SetConfig+0x25a>
 80056a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056aa:	d811      	bhi.n	80056d0 <UART_SetConfig+0x26c>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <UART_SetConfig+0x254>
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b4:	d006      	beq.n	80056c4 <UART_SetConfig+0x260>
 80056b6:	e00b      	b.n	80056d0 <UART_SetConfig+0x26c>
 80056b8:	2301      	movs	r3, #1
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e076      	b.n	80057ac <UART_SetConfig+0x348>
 80056be:	2302      	movs	r3, #2
 80056c0:	77fb      	strb	r3, [r7, #31]
 80056c2:	e073      	b.n	80057ac <UART_SetConfig+0x348>
 80056c4:	2304      	movs	r3, #4
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e070      	b.n	80057ac <UART_SetConfig+0x348>
 80056ca:	2308      	movs	r3, #8
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e06d      	b.n	80057ac <UART_SetConfig+0x348>
 80056d0:	2310      	movs	r3, #16
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e06a      	b.n	80057ac <UART_SetConfig+0x348>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <UART_SetConfig+0x2e4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d138      	bne.n	8005752 <UART_SetConfig+0x2ee>
 80056e0:	4b13      	ldr	r3, [pc, #76]	; (8005730 <UART_SetConfig+0x2cc>)
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056ee:	d017      	beq.n	8005720 <UART_SetConfig+0x2bc>
 80056f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056f4:	d82a      	bhi.n	800574c <UART_SetConfig+0x2e8>
 80056f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fa:	d00b      	beq.n	8005714 <UART_SetConfig+0x2b0>
 80056fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005700:	d824      	bhi.n	800574c <UART_SetConfig+0x2e8>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <UART_SetConfig+0x2aa>
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570a:	d006      	beq.n	800571a <UART_SetConfig+0x2b6>
 800570c:	e01e      	b.n	800574c <UART_SetConfig+0x2e8>
 800570e:	2300      	movs	r3, #0
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e04b      	b.n	80057ac <UART_SetConfig+0x348>
 8005714:	2302      	movs	r3, #2
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e048      	b.n	80057ac <UART_SetConfig+0x348>
 800571a:	2304      	movs	r3, #4
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e045      	b.n	80057ac <UART_SetConfig+0x348>
 8005720:	2308      	movs	r3, #8
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e042      	b.n	80057ac <UART_SetConfig+0x348>
 8005726:	bf00      	nop
 8005728:	efff69f3 	.word	0xefff69f3
 800572c:	40011000 	.word	0x40011000
 8005730:	40023800 	.word	0x40023800
 8005734:	40004400 	.word	0x40004400
 8005738:	40004800 	.word	0x40004800
 800573c:	40004c00 	.word	0x40004c00
 8005740:	40005000 	.word	0x40005000
 8005744:	40011400 	.word	0x40011400
 8005748:	40007800 	.word	0x40007800
 800574c:	2310      	movs	r3, #16
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e02c      	b.n	80057ac <UART_SetConfig+0x348>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a72      	ldr	r2, [pc, #456]	; (8005920 <UART_SetConfig+0x4bc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d125      	bne.n	80057a8 <UART_SetConfig+0x344>
 800575c:	4b71      	ldr	r3, [pc, #452]	; (8005924 <UART_SetConfig+0x4c0>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005762:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005766:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800576a:	d017      	beq.n	800579c <UART_SetConfig+0x338>
 800576c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005770:	d817      	bhi.n	80057a2 <UART_SetConfig+0x33e>
 8005772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005776:	d00b      	beq.n	8005790 <UART_SetConfig+0x32c>
 8005778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800577c:	d811      	bhi.n	80057a2 <UART_SetConfig+0x33e>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <UART_SetConfig+0x326>
 8005782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005786:	d006      	beq.n	8005796 <UART_SetConfig+0x332>
 8005788:	e00b      	b.n	80057a2 <UART_SetConfig+0x33e>
 800578a:	2300      	movs	r3, #0
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e00d      	b.n	80057ac <UART_SetConfig+0x348>
 8005790:	2302      	movs	r3, #2
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e00a      	b.n	80057ac <UART_SetConfig+0x348>
 8005796:	2304      	movs	r3, #4
 8005798:	77fb      	strb	r3, [r7, #31]
 800579a:	e007      	b.n	80057ac <UART_SetConfig+0x348>
 800579c:	2308      	movs	r3, #8
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	e004      	b.n	80057ac <UART_SetConfig+0x348>
 80057a2:	2310      	movs	r3, #16
 80057a4:	77fb      	strb	r3, [r7, #31]
 80057a6:	e001      	b.n	80057ac <UART_SetConfig+0x348>
 80057a8:	2310      	movs	r3, #16
 80057aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b4:	d15b      	bne.n	800586e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80057b6:	7ffb      	ldrb	r3, [r7, #31]
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d828      	bhi.n	800580e <UART_SetConfig+0x3aa>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0x360>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	080057f1 	.word	0x080057f1
 80057cc:	080057f9 	.word	0x080057f9
 80057d0:	0800580f 	.word	0x0800580f
 80057d4:	080057ff 	.word	0x080057ff
 80057d8:	0800580f 	.word	0x0800580f
 80057dc:	0800580f 	.word	0x0800580f
 80057e0:	0800580f 	.word	0x0800580f
 80057e4:	08005807 	.word	0x08005807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e8:	f7fe fe5a 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 80057ec:	61b8      	str	r0, [r7, #24]
        break;
 80057ee:	e013      	b.n	8005818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f0:	f7fe fe6a 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 80057f4:	61b8      	str	r0, [r7, #24]
        break;
 80057f6:	e00f      	b.n	8005818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f8:	4b4b      	ldr	r3, [pc, #300]	; (8005928 <UART_SetConfig+0x4c4>)
 80057fa:	61bb      	str	r3, [r7, #24]
        break;
 80057fc:	e00c      	b.n	8005818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057fe:	f7fe fd7d 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 8005802:	61b8      	str	r0, [r7, #24]
        break;
 8005804:	e008      	b.n	8005818 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800580a:	61bb      	str	r3, [r7, #24]
        break;
 800580c:	e004      	b.n	8005818 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	77bb      	strb	r3, [r7, #30]
        break;
 8005816:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d074      	beq.n	8005908 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	005a      	lsls	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	441a      	add	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2b0f      	cmp	r3, #15
 8005838:	d916      	bls.n	8005868 <UART_SetConfig+0x404>
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005840:	d212      	bcs.n	8005868 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f023 030f 	bic.w	r3, r3, #15
 800584a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	b29b      	uxth	r3, r3
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	b29a      	uxth	r2, r3
 8005858:	89fb      	ldrh	r3, [r7, #14]
 800585a:	4313      	orrs	r3, r2
 800585c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	89fa      	ldrh	r2, [r7, #14]
 8005864:	60da      	str	r2, [r3, #12]
 8005866:	e04f      	b.n	8005908 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	77bb      	strb	r3, [r7, #30]
 800586c:	e04c      	b.n	8005908 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800586e:	7ffb      	ldrb	r3, [r7, #31]
 8005870:	2b08      	cmp	r3, #8
 8005872:	d828      	bhi.n	80058c6 <UART_SetConfig+0x462>
 8005874:	a201      	add	r2, pc, #4	; (adr r2, 800587c <UART_SetConfig+0x418>)
 8005876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587a:	bf00      	nop
 800587c:	080058a1 	.word	0x080058a1
 8005880:	080058a9 	.word	0x080058a9
 8005884:	080058b1 	.word	0x080058b1
 8005888:	080058c7 	.word	0x080058c7
 800588c:	080058b7 	.word	0x080058b7
 8005890:	080058c7 	.word	0x080058c7
 8005894:	080058c7 	.word	0x080058c7
 8005898:	080058c7 	.word	0x080058c7
 800589c:	080058bf 	.word	0x080058bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a0:	f7fe fdfe 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 80058a4:	61b8      	str	r0, [r7, #24]
        break;
 80058a6:	e013      	b.n	80058d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a8:	f7fe fe0e 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 80058ac:	61b8      	str	r0, [r7, #24]
        break;
 80058ae:	e00f      	b.n	80058d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b0:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <UART_SetConfig+0x4c4>)
 80058b2:	61bb      	str	r3, [r7, #24]
        break;
 80058b4:	e00c      	b.n	80058d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b6:	f7fe fd21 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80058ba:	61b8      	str	r0, [r7, #24]
        break;
 80058bc:	e008      	b.n	80058d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c2:	61bb      	str	r3, [r7, #24]
        break;
 80058c4:	e004      	b.n	80058d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	77bb      	strb	r3, [r7, #30]
        break;
 80058ce:	bf00      	nop
    }

    if (pclk != 0U)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d018      	beq.n	8005908 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	085a      	lsrs	r2, r3, #1
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	441a      	add	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b0f      	cmp	r3, #15
 80058ee:	d909      	bls.n	8005904 <UART_SetConfig+0x4a0>
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f6:	d205      	bcs.n	8005904 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60da      	str	r2, [r3, #12]
 8005902:	e001      	b.n	8005908 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005914:	7fbb      	ldrb	r3, [r7, #30]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40007c00 	.word	0x40007c00
 8005924:	40023800 	.word	0x40023800
 8005928:	00f42400 	.word	0x00f42400

0800592c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a2a:	d10a      	bne.n	8005a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a80:	f7fc fc04 	bl	800228c <HAL_GetTick>
 8005a84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d10e      	bne.n	8005ab2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f81b 	bl	8005ade <UART_WaitOnFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e011      	b.n	8005ad6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b09c      	sub	sp, #112	; 0x70
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	603b      	str	r3, [r7, #0]
 8005aea:	4613      	mov	r3, r2
 8005aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aee:	e0a7      	b.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005af6:	f000 80a3 	beq.w	8005c40 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afa:	f7fc fbc7 	bl	800228c <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d302      	bcc.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d13f      	bne.n	8005b90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b24:	667b      	str	r3, [r7, #100]	; 0x64
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e6      	bne.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3308      	adds	r3, #8
 8005b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	663b      	str	r3, [r7, #96]	; 0x60
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b62:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e5      	bne.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e068      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d050      	beq.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bac:	d148      	bne.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bb6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e6      	bne.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3308      	adds	r3, #8
 8005c08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c0a:	623a      	str	r2, [r7, #32]
 8005c0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	69f9      	ldr	r1, [r7, #28]
 8005c10:	6a3a      	ldr	r2, [r7, #32]
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e5      	bne.n	8005bea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e010      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69da      	ldr	r2, [r3, #28]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	f43f af48 	beq.w	8005af0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3770      	adds	r7, #112	; 0x70
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b095      	sub	sp, #84	; 0x54
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c90:	643b      	str	r3, [r7, #64]	; 0x40
 8005c92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e6      	bne.n	8005c72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e5      	bne.n	8005ca4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d118      	bne.n	8005d12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f023 0310 	bic.w	r3, r3, #16
 8005cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfe:	61bb      	str	r3, [r7, #24]
 8005d00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	6979      	ldr	r1, [r7, #20]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e6      	bne.n	8005ce0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d26:	bf00      	nop
 8005d28:	3754      	adds	r7, #84	; 0x54
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f7ff fb71 	bl	8005438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d56:	bf00      	nop
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b088      	sub	sp, #32
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6979      	ldr	r1, [r7, #20]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	613b      	str	r3, [r7, #16]
   return(result);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff fb3d 	bl	8005424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005daa:	bf00      	nop
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d027      	beq.n	8005e1e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <FMC_SDRAM_Init+0xe0>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005de4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005dea:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005df0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005df6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005dfc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005e02:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005e08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005e0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e032      	b.n	8005e84 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e2a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e34:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005e3a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	4b12      	ldr	r3, [pc, #72]	; (8005e94 <FMC_SDRAM_Init+0xe0>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e58:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005e5e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005e64:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005e6a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005e70:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	ffff8000 	.word	0xffff8000

08005e98 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d02e      	beq.n	8005f10 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ebe:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ece:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005ed8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005ee2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005eec:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005ef6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f00:	4313      	orrs	r3, r2
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	609a      	str	r2, [r3, #8]
 8005f0e:	e039      	b.n	8005f84 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4b1e      	ldr	r3, [pc, #120]	; (8005f94 <FMC_SDRAM_Timing_Init+0xfc>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f42:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f52:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005f5c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005f66:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f70:	4313      	orrs	r3, r2
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	ff0f0fff 	.word	0xff0f0fff

08005f98 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005fb0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005fba:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <__errno>:
 8006000:	4b01      	ldr	r3, [pc, #4]	; (8006008 <__errno+0x8>)
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000018 	.word	0x20000018

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4d0d      	ldr	r5, [pc, #52]	; (8006044 <__libc_init_array+0x38>)
 8006010:	4c0d      	ldr	r4, [pc, #52]	; (8006048 <__libc_init_array+0x3c>)
 8006012:	1b64      	subs	r4, r4, r5
 8006014:	10a4      	asrs	r4, r4, #2
 8006016:	2600      	movs	r6, #0
 8006018:	42a6      	cmp	r6, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	4d0b      	ldr	r5, [pc, #44]	; (800604c <__libc_init_array+0x40>)
 800601e:	4c0c      	ldr	r4, [pc, #48]	; (8006050 <__libc_init_array+0x44>)
 8006020:	f000 fc8e 	bl	8006940 <_init>
 8006024:	1b64      	subs	r4, r4, r5
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	2600      	movs	r6, #0
 800602a:	42a6      	cmp	r6, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	f855 3b04 	ldr.w	r3, [r5], #4
 8006034:	4798      	blx	r3
 8006036:	3601      	adds	r6, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	f855 3b04 	ldr.w	r3, [r5], #4
 800603e:	4798      	blx	r3
 8006040:	3601      	adds	r6, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	08008518 	.word	0x08008518
 8006048:	08008518 	.word	0x08008518
 800604c:	08008518 	.word	0x08008518
 8006050:	0800851c 	.word	0x0800851c

08006054 <memset>:
 8006054:	4402      	add	r2, r0
 8006056:	4603      	mov	r3, r0
 8006058:	4293      	cmp	r3, r2
 800605a:	d100      	bne.n	800605e <memset+0xa>
 800605c:	4770      	bx	lr
 800605e:	f803 1b01 	strb.w	r1, [r3], #1
 8006062:	e7f9      	b.n	8006058 <memset+0x4>

08006064 <siprintf>:
 8006064:	b40e      	push	{r1, r2, r3}
 8006066:	b500      	push	{lr}
 8006068:	b09c      	sub	sp, #112	; 0x70
 800606a:	ab1d      	add	r3, sp, #116	; 0x74
 800606c:	9002      	str	r0, [sp, #8]
 800606e:	9006      	str	r0, [sp, #24]
 8006070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006074:	4809      	ldr	r0, [pc, #36]	; (800609c <siprintf+0x38>)
 8006076:	9107      	str	r1, [sp, #28]
 8006078:	9104      	str	r1, [sp, #16]
 800607a:	4909      	ldr	r1, [pc, #36]	; (80060a0 <siprintf+0x3c>)
 800607c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006080:	9105      	str	r1, [sp, #20]
 8006082:	6800      	ldr	r0, [r0, #0]
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	a902      	add	r1, sp, #8
 8006088:	f000 f868 	bl	800615c <_svfiprintf_r>
 800608c:	9b02      	ldr	r3, [sp, #8]
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	b01c      	add	sp, #112	; 0x70
 8006094:	f85d eb04 	ldr.w	lr, [sp], #4
 8006098:	b003      	add	sp, #12
 800609a:	4770      	bx	lr
 800609c:	20000018 	.word	0x20000018
 80060a0:	ffff0208 	.word	0xffff0208

080060a4 <__ssputs_r>:
 80060a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	688e      	ldr	r6, [r1, #8]
 80060aa:	429e      	cmp	r6, r3
 80060ac:	4682      	mov	sl, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	4690      	mov	r8, r2
 80060b2:	461f      	mov	r7, r3
 80060b4:	d838      	bhi.n	8006128 <__ssputs_r+0x84>
 80060b6:	898a      	ldrh	r2, [r1, #12]
 80060b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060bc:	d032      	beq.n	8006124 <__ssputs_r+0x80>
 80060be:	6825      	ldr	r5, [r4, #0]
 80060c0:	6909      	ldr	r1, [r1, #16]
 80060c2:	eba5 0901 	sub.w	r9, r5, r1
 80060c6:	6965      	ldr	r5, [r4, #20]
 80060c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060d0:	3301      	adds	r3, #1
 80060d2:	444b      	add	r3, r9
 80060d4:	106d      	asrs	r5, r5, #1
 80060d6:	429d      	cmp	r5, r3
 80060d8:	bf38      	it	cc
 80060da:	461d      	movcc	r5, r3
 80060dc:	0553      	lsls	r3, r2, #21
 80060de:	d531      	bpl.n	8006144 <__ssputs_r+0xa0>
 80060e0:	4629      	mov	r1, r5
 80060e2:	f000 fb63 	bl	80067ac <_malloc_r>
 80060e6:	4606      	mov	r6, r0
 80060e8:	b950      	cbnz	r0, 8006100 <__ssputs_r+0x5c>
 80060ea:	230c      	movs	r3, #12
 80060ec:	f8ca 3000 	str.w	r3, [sl]
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006100:	6921      	ldr	r1, [r4, #16]
 8006102:	464a      	mov	r2, r9
 8006104:	f000 fabe 	bl	8006684 <memcpy>
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800610e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006112:	81a3      	strh	r3, [r4, #12]
 8006114:	6126      	str	r6, [r4, #16]
 8006116:	6165      	str	r5, [r4, #20]
 8006118:	444e      	add	r6, r9
 800611a:	eba5 0509 	sub.w	r5, r5, r9
 800611e:	6026      	str	r6, [r4, #0]
 8006120:	60a5      	str	r5, [r4, #8]
 8006122:	463e      	mov	r6, r7
 8006124:	42be      	cmp	r6, r7
 8006126:	d900      	bls.n	800612a <__ssputs_r+0x86>
 8006128:	463e      	mov	r6, r7
 800612a:	6820      	ldr	r0, [r4, #0]
 800612c:	4632      	mov	r2, r6
 800612e:	4641      	mov	r1, r8
 8006130:	f000 fab6 	bl	80066a0 <memmove>
 8006134:	68a3      	ldr	r3, [r4, #8]
 8006136:	1b9b      	subs	r3, r3, r6
 8006138:	60a3      	str	r3, [r4, #8]
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	4433      	add	r3, r6
 800613e:	6023      	str	r3, [r4, #0]
 8006140:	2000      	movs	r0, #0
 8006142:	e7db      	b.n	80060fc <__ssputs_r+0x58>
 8006144:	462a      	mov	r2, r5
 8006146:	f000 fba5 	bl	8006894 <_realloc_r>
 800614a:	4606      	mov	r6, r0
 800614c:	2800      	cmp	r0, #0
 800614e:	d1e1      	bne.n	8006114 <__ssputs_r+0x70>
 8006150:	6921      	ldr	r1, [r4, #16]
 8006152:	4650      	mov	r0, sl
 8006154:	f000 fabe 	bl	80066d4 <_free_r>
 8006158:	e7c7      	b.n	80060ea <__ssputs_r+0x46>
	...

0800615c <_svfiprintf_r>:
 800615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006160:	4698      	mov	r8, r3
 8006162:	898b      	ldrh	r3, [r1, #12]
 8006164:	061b      	lsls	r3, r3, #24
 8006166:	b09d      	sub	sp, #116	; 0x74
 8006168:	4607      	mov	r7, r0
 800616a:	460d      	mov	r5, r1
 800616c:	4614      	mov	r4, r2
 800616e:	d50e      	bpl.n	800618e <_svfiprintf_r+0x32>
 8006170:	690b      	ldr	r3, [r1, #16]
 8006172:	b963      	cbnz	r3, 800618e <_svfiprintf_r+0x32>
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	f000 fb19 	bl	80067ac <_malloc_r>
 800617a:	6028      	str	r0, [r5, #0]
 800617c:	6128      	str	r0, [r5, #16]
 800617e:	b920      	cbnz	r0, 800618a <_svfiprintf_r+0x2e>
 8006180:	230c      	movs	r3, #12
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006188:	e0d1      	b.n	800632e <_svfiprintf_r+0x1d2>
 800618a:	2340      	movs	r3, #64	; 0x40
 800618c:	616b      	str	r3, [r5, #20]
 800618e:	2300      	movs	r3, #0
 8006190:	9309      	str	r3, [sp, #36]	; 0x24
 8006192:	2320      	movs	r3, #32
 8006194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006198:	f8cd 800c 	str.w	r8, [sp, #12]
 800619c:	2330      	movs	r3, #48	; 0x30
 800619e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006348 <_svfiprintf_r+0x1ec>
 80061a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061a6:	f04f 0901 	mov.w	r9, #1
 80061aa:	4623      	mov	r3, r4
 80061ac:	469a      	mov	sl, r3
 80061ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061b2:	b10a      	cbz	r2, 80061b8 <_svfiprintf_r+0x5c>
 80061b4:	2a25      	cmp	r2, #37	; 0x25
 80061b6:	d1f9      	bne.n	80061ac <_svfiprintf_r+0x50>
 80061b8:	ebba 0b04 	subs.w	fp, sl, r4
 80061bc:	d00b      	beq.n	80061d6 <_svfiprintf_r+0x7a>
 80061be:	465b      	mov	r3, fp
 80061c0:	4622      	mov	r2, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	4638      	mov	r0, r7
 80061c6:	f7ff ff6d 	bl	80060a4 <__ssputs_r>
 80061ca:	3001      	adds	r0, #1
 80061cc:	f000 80aa 	beq.w	8006324 <_svfiprintf_r+0x1c8>
 80061d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d2:	445a      	add	r2, fp
 80061d4:	9209      	str	r2, [sp, #36]	; 0x24
 80061d6:	f89a 3000 	ldrb.w	r3, [sl]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80a2 	beq.w	8006324 <_svfiprintf_r+0x1c8>
 80061e0:	2300      	movs	r3, #0
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ea:	f10a 0a01 	add.w	sl, sl, #1
 80061ee:	9304      	str	r3, [sp, #16]
 80061f0:	9307      	str	r3, [sp, #28]
 80061f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061f6:	931a      	str	r3, [sp, #104]	; 0x68
 80061f8:	4654      	mov	r4, sl
 80061fa:	2205      	movs	r2, #5
 80061fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006200:	4851      	ldr	r0, [pc, #324]	; (8006348 <_svfiprintf_r+0x1ec>)
 8006202:	f7fa f805 	bl	8000210 <memchr>
 8006206:	9a04      	ldr	r2, [sp, #16]
 8006208:	b9d8      	cbnz	r0, 8006242 <_svfiprintf_r+0xe6>
 800620a:	06d0      	lsls	r0, r2, #27
 800620c:	bf44      	itt	mi
 800620e:	2320      	movmi	r3, #32
 8006210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006214:	0711      	lsls	r1, r2, #28
 8006216:	bf44      	itt	mi
 8006218:	232b      	movmi	r3, #43	; 0x2b
 800621a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800621e:	f89a 3000 	ldrb.w	r3, [sl]
 8006222:	2b2a      	cmp	r3, #42	; 0x2a
 8006224:	d015      	beq.n	8006252 <_svfiprintf_r+0xf6>
 8006226:	9a07      	ldr	r2, [sp, #28]
 8006228:	4654      	mov	r4, sl
 800622a:	2000      	movs	r0, #0
 800622c:	f04f 0c0a 	mov.w	ip, #10
 8006230:	4621      	mov	r1, r4
 8006232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006236:	3b30      	subs	r3, #48	; 0x30
 8006238:	2b09      	cmp	r3, #9
 800623a:	d94e      	bls.n	80062da <_svfiprintf_r+0x17e>
 800623c:	b1b0      	cbz	r0, 800626c <_svfiprintf_r+0x110>
 800623e:	9207      	str	r2, [sp, #28]
 8006240:	e014      	b.n	800626c <_svfiprintf_r+0x110>
 8006242:	eba0 0308 	sub.w	r3, r0, r8
 8006246:	fa09 f303 	lsl.w	r3, r9, r3
 800624a:	4313      	orrs	r3, r2
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	46a2      	mov	sl, r4
 8006250:	e7d2      	b.n	80061f8 <_svfiprintf_r+0x9c>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	1d19      	adds	r1, r3, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	9103      	str	r1, [sp, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	bfbb      	ittet	lt
 800625e:	425b      	neglt	r3, r3
 8006260:	f042 0202 	orrlt.w	r2, r2, #2
 8006264:	9307      	strge	r3, [sp, #28]
 8006266:	9307      	strlt	r3, [sp, #28]
 8006268:	bfb8      	it	lt
 800626a:	9204      	strlt	r2, [sp, #16]
 800626c:	7823      	ldrb	r3, [r4, #0]
 800626e:	2b2e      	cmp	r3, #46	; 0x2e
 8006270:	d10c      	bne.n	800628c <_svfiprintf_r+0x130>
 8006272:	7863      	ldrb	r3, [r4, #1]
 8006274:	2b2a      	cmp	r3, #42	; 0x2a
 8006276:	d135      	bne.n	80062e4 <_svfiprintf_r+0x188>
 8006278:	9b03      	ldr	r3, [sp, #12]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	9203      	str	r2, [sp, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	bfb8      	it	lt
 8006284:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006288:	3402      	adds	r4, #2
 800628a:	9305      	str	r3, [sp, #20]
 800628c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006358 <_svfiprintf_r+0x1fc>
 8006290:	7821      	ldrb	r1, [r4, #0]
 8006292:	2203      	movs	r2, #3
 8006294:	4650      	mov	r0, sl
 8006296:	f7f9 ffbb 	bl	8000210 <memchr>
 800629a:	b140      	cbz	r0, 80062ae <_svfiprintf_r+0x152>
 800629c:	2340      	movs	r3, #64	; 0x40
 800629e:	eba0 000a 	sub.w	r0, r0, sl
 80062a2:	fa03 f000 	lsl.w	r0, r3, r0
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	4303      	orrs	r3, r0
 80062aa:	3401      	adds	r4, #1
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b2:	4826      	ldr	r0, [pc, #152]	; (800634c <_svfiprintf_r+0x1f0>)
 80062b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062b8:	2206      	movs	r2, #6
 80062ba:	f7f9 ffa9 	bl	8000210 <memchr>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d038      	beq.n	8006334 <_svfiprintf_r+0x1d8>
 80062c2:	4b23      	ldr	r3, [pc, #140]	; (8006350 <_svfiprintf_r+0x1f4>)
 80062c4:	bb1b      	cbnz	r3, 800630e <_svfiprintf_r+0x1b2>
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	3307      	adds	r3, #7
 80062ca:	f023 0307 	bic.w	r3, r3, #7
 80062ce:	3308      	adds	r3, #8
 80062d0:	9303      	str	r3, [sp, #12]
 80062d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d4:	4433      	add	r3, r6
 80062d6:	9309      	str	r3, [sp, #36]	; 0x24
 80062d8:	e767      	b.n	80061aa <_svfiprintf_r+0x4e>
 80062da:	fb0c 3202 	mla	r2, ip, r2, r3
 80062de:	460c      	mov	r4, r1
 80062e0:	2001      	movs	r0, #1
 80062e2:	e7a5      	b.n	8006230 <_svfiprintf_r+0xd4>
 80062e4:	2300      	movs	r3, #0
 80062e6:	3401      	adds	r4, #1
 80062e8:	9305      	str	r3, [sp, #20]
 80062ea:	4619      	mov	r1, r3
 80062ec:	f04f 0c0a 	mov.w	ip, #10
 80062f0:	4620      	mov	r0, r4
 80062f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f6:	3a30      	subs	r2, #48	; 0x30
 80062f8:	2a09      	cmp	r2, #9
 80062fa:	d903      	bls.n	8006304 <_svfiprintf_r+0x1a8>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0c5      	beq.n	800628c <_svfiprintf_r+0x130>
 8006300:	9105      	str	r1, [sp, #20]
 8006302:	e7c3      	b.n	800628c <_svfiprintf_r+0x130>
 8006304:	fb0c 2101 	mla	r1, ip, r1, r2
 8006308:	4604      	mov	r4, r0
 800630a:	2301      	movs	r3, #1
 800630c:	e7f0      	b.n	80062f0 <_svfiprintf_r+0x194>
 800630e:	ab03      	add	r3, sp, #12
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	462a      	mov	r2, r5
 8006314:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <_svfiprintf_r+0x1f8>)
 8006316:	a904      	add	r1, sp, #16
 8006318:	4638      	mov	r0, r7
 800631a:	f3af 8000 	nop.w
 800631e:	1c42      	adds	r2, r0, #1
 8006320:	4606      	mov	r6, r0
 8006322:	d1d6      	bne.n	80062d2 <_svfiprintf_r+0x176>
 8006324:	89ab      	ldrh	r3, [r5, #12]
 8006326:	065b      	lsls	r3, r3, #25
 8006328:	f53f af2c 	bmi.w	8006184 <_svfiprintf_r+0x28>
 800632c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800632e:	b01d      	add	sp, #116	; 0x74
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006334:	ab03      	add	r3, sp, #12
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	462a      	mov	r2, r5
 800633a:	4b06      	ldr	r3, [pc, #24]	; (8006354 <_svfiprintf_r+0x1f8>)
 800633c:	a904      	add	r1, sp, #16
 800633e:	4638      	mov	r0, r7
 8006340:	f000 f87a 	bl	8006438 <_printf_i>
 8006344:	e7eb      	b.n	800631e <_svfiprintf_r+0x1c2>
 8006346:	bf00      	nop
 8006348:	080084dc 	.word	0x080084dc
 800634c:	080084e6 	.word	0x080084e6
 8006350:	00000000 	.word	0x00000000
 8006354:	080060a5 	.word	0x080060a5
 8006358:	080084e2 	.word	0x080084e2

0800635c <_printf_common>:
 800635c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006360:	4616      	mov	r6, r2
 8006362:	4699      	mov	r9, r3
 8006364:	688a      	ldr	r2, [r1, #8]
 8006366:	690b      	ldr	r3, [r1, #16]
 8006368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800636c:	4293      	cmp	r3, r2
 800636e:	bfb8      	it	lt
 8006370:	4613      	movlt	r3, r2
 8006372:	6033      	str	r3, [r6, #0]
 8006374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006378:	4607      	mov	r7, r0
 800637a:	460c      	mov	r4, r1
 800637c:	b10a      	cbz	r2, 8006382 <_printf_common+0x26>
 800637e:	3301      	adds	r3, #1
 8006380:	6033      	str	r3, [r6, #0]
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	0699      	lsls	r1, r3, #26
 8006386:	bf42      	ittt	mi
 8006388:	6833      	ldrmi	r3, [r6, #0]
 800638a:	3302      	addmi	r3, #2
 800638c:	6033      	strmi	r3, [r6, #0]
 800638e:	6825      	ldr	r5, [r4, #0]
 8006390:	f015 0506 	ands.w	r5, r5, #6
 8006394:	d106      	bne.n	80063a4 <_printf_common+0x48>
 8006396:	f104 0a19 	add.w	sl, r4, #25
 800639a:	68e3      	ldr	r3, [r4, #12]
 800639c:	6832      	ldr	r2, [r6, #0]
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	42ab      	cmp	r3, r5
 80063a2:	dc26      	bgt.n	80063f2 <_printf_common+0x96>
 80063a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063a8:	1e13      	subs	r3, r2, #0
 80063aa:	6822      	ldr	r2, [r4, #0]
 80063ac:	bf18      	it	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	0692      	lsls	r2, r2, #26
 80063b2:	d42b      	bmi.n	800640c <_printf_common+0xb0>
 80063b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063b8:	4649      	mov	r1, r9
 80063ba:	4638      	mov	r0, r7
 80063bc:	47c0      	blx	r8
 80063be:	3001      	adds	r0, #1
 80063c0:	d01e      	beq.n	8006400 <_printf_common+0xa4>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	68e5      	ldr	r5, [r4, #12]
 80063c6:	6832      	ldr	r2, [r6, #0]
 80063c8:	f003 0306 	and.w	r3, r3, #6
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	bf08      	it	eq
 80063d0:	1aad      	subeq	r5, r5, r2
 80063d2:	68a3      	ldr	r3, [r4, #8]
 80063d4:	6922      	ldr	r2, [r4, #16]
 80063d6:	bf0c      	ite	eq
 80063d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063dc:	2500      	movne	r5, #0
 80063de:	4293      	cmp	r3, r2
 80063e0:	bfc4      	itt	gt
 80063e2:	1a9b      	subgt	r3, r3, r2
 80063e4:	18ed      	addgt	r5, r5, r3
 80063e6:	2600      	movs	r6, #0
 80063e8:	341a      	adds	r4, #26
 80063ea:	42b5      	cmp	r5, r6
 80063ec:	d11a      	bne.n	8006424 <_printf_common+0xc8>
 80063ee:	2000      	movs	r0, #0
 80063f0:	e008      	b.n	8006404 <_printf_common+0xa8>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4652      	mov	r2, sl
 80063f6:	4649      	mov	r1, r9
 80063f8:	4638      	mov	r0, r7
 80063fa:	47c0      	blx	r8
 80063fc:	3001      	adds	r0, #1
 80063fe:	d103      	bne.n	8006408 <_printf_common+0xac>
 8006400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006408:	3501      	adds	r5, #1
 800640a:	e7c6      	b.n	800639a <_printf_common+0x3e>
 800640c:	18e1      	adds	r1, r4, r3
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	2030      	movs	r0, #48	; 0x30
 8006412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006416:	4422      	add	r2, r4
 8006418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800641c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006420:	3302      	adds	r3, #2
 8006422:	e7c7      	b.n	80063b4 <_printf_common+0x58>
 8006424:	2301      	movs	r3, #1
 8006426:	4622      	mov	r2, r4
 8006428:	4649      	mov	r1, r9
 800642a:	4638      	mov	r0, r7
 800642c:	47c0      	blx	r8
 800642e:	3001      	adds	r0, #1
 8006430:	d0e6      	beq.n	8006400 <_printf_common+0xa4>
 8006432:	3601      	adds	r6, #1
 8006434:	e7d9      	b.n	80063ea <_printf_common+0x8e>
	...

08006438 <_printf_i>:
 8006438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800643c:	7e0f      	ldrb	r7, [r1, #24]
 800643e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006440:	2f78      	cmp	r7, #120	; 0x78
 8006442:	4691      	mov	r9, r2
 8006444:	4680      	mov	r8, r0
 8006446:	460c      	mov	r4, r1
 8006448:	469a      	mov	sl, r3
 800644a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800644e:	d807      	bhi.n	8006460 <_printf_i+0x28>
 8006450:	2f62      	cmp	r7, #98	; 0x62
 8006452:	d80a      	bhi.n	800646a <_printf_i+0x32>
 8006454:	2f00      	cmp	r7, #0
 8006456:	f000 80d8 	beq.w	800660a <_printf_i+0x1d2>
 800645a:	2f58      	cmp	r7, #88	; 0x58
 800645c:	f000 80a3 	beq.w	80065a6 <_printf_i+0x16e>
 8006460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006468:	e03a      	b.n	80064e0 <_printf_i+0xa8>
 800646a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800646e:	2b15      	cmp	r3, #21
 8006470:	d8f6      	bhi.n	8006460 <_printf_i+0x28>
 8006472:	a101      	add	r1, pc, #4	; (adr r1, 8006478 <_printf_i+0x40>)
 8006474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006478:	080064d1 	.word	0x080064d1
 800647c:	080064e5 	.word	0x080064e5
 8006480:	08006461 	.word	0x08006461
 8006484:	08006461 	.word	0x08006461
 8006488:	08006461 	.word	0x08006461
 800648c:	08006461 	.word	0x08006461
 8006490:	080064e5 	.word	0x080064e5
 8006494:	08006461 	.word	0x08006461
 8006498:	08006461 	.word	0x08006461
 800649c:	08006461 	.word	0x08006461
 80064a0:	08006461 	.word	0x08006461
 80064a4:	080065f1 	.word	0x080065f1
 80064a8:	08006515 	.word	0x08006515
 80064ac:	080065d3 	.word	0x080065d3
 80064b0:	08006461 	.word	0x08006461
 80064b4:	08006461 	.word	0x08006461
 80064b8:	08006613 	.word	0x08006613
 80064bc:	08006461 	.word	0x08006461
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006461 	.word	0x08006461
 80064c8:	08006461 	.word	0x08006461
 80064cc:	080065db 	.word	0x080065db
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	1d1a      	adds	r2, r3, #4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	602a      	str	r2, [r5, #0]
 80064d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0a3      	b.n	800662c <_printf_i+0x1f4>
 80064e4:	6820      	ldr	r0, [r4, #0]
 80064e6:	6829      	ldr	r1, [r5, #0]
 80064e8:	0606      	lsls	r6, r0, #24
 80064ea:	f101 0304 	add.w	r3, r1, #4
 80064ee:	d50a      	bpl.n	8006506 <_printf_i+0xce>
 80064f0:	680e      	ldr	r6, [r1, #0]
 80064f2:	602b      	str	r3, [r5, #0]
 80064f4:	2e00      	cmp	r6, #0
 80064f6:	da03      	bge.n	8006500 <_printf_i+0xc8>
 80064f8:	232d      	movs	r3, #45	; 0x2d
 80064fa:	4276      	negs	r6, r6
 80064fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006500:	485e      	ldr	r0, [pc, #376]	; (800667c <_printf_i+0x244>)
 8006502:	230a      	movs	r3, #10
 8006504:	e019      	b.n	800653a <_printf_i+0x102>
 8006506:	680e      	ldr	r6, [r1, #0]
 8006508:	602b      	str	r3, [r5, #0]
 800650a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800650e:	bf18      	it	ne
 8006510:	b236      	sxthne	r6, r6
 8006512:	e7ef      	b.n	80064f4 <_printf_i+0xbc>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	6820      	ldr	r0, [r4, #0]
 8006518:	1d19      	adds	r1, r3, #4
 800651a:	6029      	str	r1, [r5, #0]
 800651c:	0601      	lsls	r1, r0, #24
 800651e:	d501      	bpl.n	8006524 <_printf_i+0xec>
 8006520:	681e      	ldr	r6, [r3, #0]
 8006522:	e002      	b.n	800652a <_printf_i+0xf2>
 8006524:	0646      	lsls	r6, r0, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0xe8>
 8006528:	881e      	ldrh	r6, [r3, #0]
 800652a:	4854      	ldr	r0, [pc, #336]	; (800667c <_printf_i+0x244>)
 800652c:	2f6f      	cmp	r7, #111	; 0x6f
 800652e:	bf0c      	ite	eq
 8006530:	2308      	moveq	r3, #8
 8006532:	230a      	movne	r3, #10
 8006534:	2100      	movs	r1, #0
 8006536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800653a:	6865      	ldr	r5, [r4, #4]
 800653c:	60a5      	str	r5, [r4, #8]
 800653e:	2d00      	cmp	r5, #0
 8006540:	bfa2      	ittt	ge
 8006542:	6821      	ldrge	r1, [r4, #0]
 8006544:	f021 0104 	bicge.w	r1, r1, #4
 8006548:	6021      	strge	r1, [r4, #0]
 800654a:	b90e      	cbnz	r6, 8006550 <_printf_i+0x118>
 800654c:	2d00      	cmp	r5, #0
 800654e:	d04d      	beq.n	80065ec <_printf_i+0x1b4>
 8006550:	4615      	mov	r5, r2
 8006552:	fbb6 f1f3 	udiv	r1, r6, r3
 8006556:	fb03 6711 	mls	r7, r3, r1, r6
 800655a:	5dc7      	ldrb	r7, [r0, r7]
 800655c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006560:	4637      	mov	r7, r6
 8006562:	42bb      	cmp	r3, r7
 8006564:	460e      	mov	r6, r1
 8006566:	d9f4      	bls.n	8006552 <_printf_i+0x11a>
 8006568:	2b08      	cmp	r3, #8
 800656a:	d10b      	bne.n	8006584 <_printf_i+0x14c>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	07de      	lsls	r6, r3, #31
 8006570:	d508      	bpl.n	8006584 <_printf_i+0x14c>
 8006572:	6923      	ldr	r3, [r4, #16]
 8006574:	6861      	ldr	r1, [r4, #4]
 8006576:	4299      	cmp	r1, r3
 8006578:	bfde      	ittt	le
 800657a:	2330      	movle	r3, #48	; 0x30
 800657c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006580:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006584:	1b52      	subs	r2, r2, r5
 8006586:	6122      	str	r2, [r4, #16]
 8006588:	f8cd a000 	str.w	sl, [sp]
 800658c:	464b      	mov	r3, r9
 800658e:	aa03      	add	r2, sp, #12
 8006590:	4621      	mov	r1, r4
 8006592:	4640      	mov	r0, r8
 8006594:	f7ff fee2 	bl	800635c <_printf_common>
 8006598:	3001      	adds	r0, #1
 800659a:	d14c      	bne.n	8006636 <_printf_i+0x1fe>
 800659c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065a0:	b004      	add	sp, #16
 80065a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a6:	4835      	ldr	r0, [pc, #212]	; (800667c <_printf_i+0x244>)
 80065a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065ac:	6829      	ldr	r1, [r5, #0]
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80065b4:	6029      	str	r1, [r5, #0]
 80065b6:	061d      	lsls	r5, r3, #24
 80065b8:	d514      	bpl.n	80065e4 <_printf_i+0x1ac>
 80065ba:	07df      	lsls	r7, r3, #31
 80065bc:	bf44      	itt	mi
 80065be:	f043 0320 	orrmi.w	r3, r3, #32
 80065c2:	6023      	strmi	r3, [r4, #0]
 80065c4:	b91e      	cbnz	r6, 80065ce <_printf_i+0x196>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	f023 0320 	bic.w	r3, r3, #32
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	2310      	movs	r3, #16
 80065d0:	e7b0      	b.n	8006534 <_printf_i+0xfc>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f043 0320 	orr.w	r3, r3, #32
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	2378      	movs	r3, #120	; 0x78
 80065dc:	4828      	ldr	r0, [pc, #160]	; (8006680 <_printf_i+0x248>)
 80065de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065e2:	e7e3      	b.n	80065ac <_printf_i+0x174>
 80065e4:	0659      	lsls	r1, r3, #25
 80065e6:	bf48      	it	mi
 80065e8:	b2b6      	uxthmi	r6, r6
 80065ea:	e7e6      	b.n	80065ba <_printf_i+0x182>
 80065ec:	4615      	mov	r5, r2
 80065ee:	e7bb      	b.n	8006568 <_printf_i+0x130>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	6826      	ldr	r6, [r4, #0]
 80065f4:	6961      	ldr	r1, [r4, #20]
 80065f6:	1d18      	adds	r0, r3, #4
 80065f8:	6028      	str	r0, [r5, #0]
 80065fa:	0635      	lsls	r5, r6, #24
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	d501      	bpl.n	8006604 <_printf_i+0x1cc>
 8006600:	6019      	str	r1, [r3, #0]
 8006602:	e002      	b.n	800660a <_printf_i+0x1d2>
 8006604:	0670      	lsls	r0, r6, #25
 8006606:	d5fb      	bpl.n	8006600 <_printf_i+0x1c8>
 8006608:	8019      	strh	r1, [r3, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	6123      	str	r3, [r4, #16]
 800660e:	4615      	mov	r5, r2
 8006610:	e7ba      	b.n	8006588 <_printf_i+0x150>
 8006612:	682b      	ldr	r3, [r5, #0]
 8006614:	1d1a      	adds	r2, r3, #4
 8006616:	602a      	str	r2, [r5, #0]
 8006618:	681d      	ldr	r5, [r3, #0]
 800661a:	6862      	ldr	r2, [r4, #4]
 800661c:	2100      	movs	r1, #0
 800661e:	4628      	mov	r0, r5
 8006620:	f7f9 fdf6 	bl	8000210 <memchr>
 8006624:	b108      	cbz	r0, 800662a <_printf_i+0x1f2>
 8006626:	1b40      	subs	r0, r0, r5
 8006628:	6060      	str	r0, [r4, #4]
 800662a:	6863      	ldr	r3, [r4, #4]
 800662c:	6123      	str	r3, [r4, #16]
 800662e:	2300      	movs	r3, #0
 8006630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006634:	e7a8      	b.n	8006588 <_printf_i+0x150>
 8006636:	6923      	ldr	r3, [r4, #16]
 8006638:	462a      	mov	r2, r5
 800663a:	4649      	mov	r1, r9
 800663c:	4640      	mov	r0, r8
 800663e:	47d0      	blx	sl
 8006640:	3001      	adds	r0, #1
 8006642:	d0ab      	beq.n	800659c <_printf_i+0x164>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	079b      	lsls	r3, r3, #30
 8006648:	d413      	bmi.n	8006672 <_printf_i+0x23a>
 800664a:	68e0      	ldr	r0, [r4, #12]
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	4298      	cmp	r0, r3
 8006650:	bfb8      	it	lt
 8006652:	4618      	movlt	r0, r3
 8006654:	e7a4      	b.n	80065a0 <_printf_i+0x168>
 8006656:	2301      	movs	r3, #1
 8006658:	4632      	mov	r2, r6
 800665a:	4649      	mov	r1, r9
 800665c:	4640      	mov	r0, r8
 800665e:	47d0      	blx	sl
 8006660:	3001      	adds	r0, #1
 8006662:	d09b      	beq.n	800659c <_printf_i+0x164>
 8006664:	3501      	adds	r5, #1
 8006666:	68e3      	ldr	r3, [r4, #12]
 8006668:	9903      	ldr	r1, [sp, #12]
 800666a:	1a5b      	subs	r3, r3, r1
 800666c:	42ab      	cmp	r3, r5
 800666e:	dcf2      	bgt.n	8006656 <_printf_i+0x21e>
 8006670:	e7eb      	b.n	800664a <_printf_i+0x212>
 8006672:	2500      	movs	r5, #0
 8006674:	f104 0619 	add.w	r6, r4, #25
 8006678:	e7f5      	b.n	8006666 <_printf_i+0x22e>
 800667a:	bf00      	nop
 800667c:	080084ed 	.word	0x080084ed
 8006680:	080084fe 	.word	0x080084fe

08006684 <memcpy>:
 8006684:	440a      	add	r2, r1
 8006686:	4291      	cmp	r1, r2
 8006688:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800668c:	d100      	bne.n	8006690 <memcpy+0xc>
 800668e:	4770      	bx	lr
 8006690:	b510      	push	{r4, lr}
 8006692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800669a:	4291      	cmp	r1, r2
 800669c:	d1f9      	bne.n	8006692 <memcpy+0xe>
 800669e:	bd10      	pop	{r4, pc}

080066a0 <memmove>:
 80066a0:	4288      	cmp	r0, r1
 80066a2:	b510      	push	{r4, lr}
 80066a4:	eb01 0402 	add.w	r4, r1, r2
 80066a8:	d902      	bls.n	80066b0 <memmove+0x10>
 80066aa:	4284      	cmp	r4, r0
 80066ac:	4623      	mov	r3, r4
 80066ae:	d807      	bhi.n	80066c0 <memmove+0x20>
 80066b0:	1e43      	subs	r3, r0, #1
 80066b2:	42a1      	cmp	r1, r4
 80066b4:	d008      	beq.n	80066c8 <memmove+0x28>
 80066b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066be:	e7f8      	b.n	80066b2 <memmove+0x12>
 80066c0:	4402      	add	r2, r0
 80066c2:	4601      	mov	r1, r0
 80066c4:	428a      	cmp	r2, r1
 80066c6:	d100      	bne.n	80066ca <memmove+0x2a>
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066d2:	e7f7      	b.n	80066c4 <memmove+0x24>

080066d4 <_free_r>:
 80066d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066d6:	2900      	cmp	r1, #0
 80066d8:	d044      	beq.n	8006764 <_free_r+0x90>
 80066da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066de:	9001      	str	r0, [sp, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f1a1 0404 	sub.w	r4, r1, #4
 80066e6:	bfb8      	it	lt
 80066e8:	18e4      	addlt	r4, r4, r3
 80066ea:	f000 f913 	bl	8006914 <__malloc_lock>
 80066ee:	4a1e      	ldr	r2, [pc, #120]	; (8006768 <_free_r+0x94>)
 80066f0:	9801      	ldr	r0, [sp, #4]
 80066f2:	6813      	ldr	r3, [r2, #0]
 80066f4:	b933      	cbnz	r3, 8006704 <_free_r+0x30>
 80066f6:	6063      	str	r3, [r4, #4]
 80066f8:	6014      	str	r4, [r2, #0]
 80066fa:	b003      	add	sp, #12
 80066fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006700:	f000 b90e 	b.w	8006920 <__malloc_unlock>
 8006704:	42a3      	cmp	r3, r4
 8006706:	d908      	bls.n	800671a <_free_r+0x46>
 8006708:	6825      	ldr	r5, [r4, #0]
 800670a:	1961      	adds	r1, r4, r5
 800670c:	428b      	cmp	r3, r1
 800670e:	bf01      	itttt	eq
 8006710:	6819      	ldreq	r1, [r3, #0]
 8006712:	685b      	ldreq	r3, [r3, #4]
 8006714:	1949      	addeq	r1, r1, r5
 8006716:	6021      	streq	r1, [r4, #0]
 8006718:	e7ed      	b.n	80066f6 <_free_r+0x22>
 800671a:	461a      	mov	r2, r3
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	b10b      	cbz	r3, 8006724 <_free_r+0x50>
 8006720:	42a3      	cmp	r3, r4
 8006722:	d9fa      	bls.n	800671a <_free_r+0x46>
 8006724:	6811      	ldr	r1, [r2, #0]
 8006726:	1855      	adds	r5, r2, r1
 8006728:	42a5      	cmp	r5, r4
 800672a:	d10b      	bne.n	8006744 <_free_r+0x70>
 800672c:	6824      	ldr	r4, [r4, #0]
 800672e:	4421      	add	r1, r4
 8006730:	1854      	adds	r4, r2, r1
 8006732:	42a3      	cmp	r3, r4
 8006734:	6011      	str	r1, [r2, #0]
 8006736:	d1e0      	bne.n	80066fa <_free_r+0x26>
 8006738:	681c      	ldr	r4, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	6053      	str	r3, [r2, #4]
 800673e:	4421      	add	r1, r4
 8006740:	6011      	str	r1, [r2, #0]
 8006742:	e7da      	b.n	80066fa <_free_r+0x26>
 8006744:	d902      	bls.n	800674c <_free_r+0x78>
 8006746:	230c      	movs	r3, #12
 8006748:	6003      	str	r3, [r0, #0]
 800674a:	e7d6      	b.n	80066fa <_free_r+0x26>
 800674c:	6825      	ldr	r5, [r4, #0]
 800674e:	1961      	adds	r1, r4, r5
 8006750:	428b      	cmp	r3, r1
 8006752:	bf04      	itt	eq
 8006754:	6819      	ldreq	r1, [r3, #0]
 8006756:	685b      	ldreq	r3, [r3, #4]
 8006758:	6063      	str	r3, [r4, #4]
 800675a:	bf04      	itt	eq
 800675c:	1949      	addeq	r1, r1, r5
 800675e:	6021      	streq	r1, [r4, #0]
 8006760:	6054      	str	r4, [r2, #4]
 8006762:	e7ca      	b.n	80066fa <_free_r+0x26>
 8006764:	b003      	add	sp, #12
 8006766:	bd30      	pop	{r4, r5, pc}
 8006768:	200004c8 	.word	0x200004c8

0800676c <sbrk_aligned>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	4e0e      	ldr	r6, [pc, #56]	; (80067a8 <sbrk_aligned+0x3c>)
 8006770:	460c      	mov	r4, r1
 8006772:	6831      	ldr	r1, [r6, #0]
 8006774:	4605      	mov	r5, r0
 8006776:	b911      	cbnz	r1, 800677e <sbrk_aligned+0x12>
 8006778:	f000 f8bc 	bl	80068f4 <_sbrk_r>
 800677c:	6030      	str	r0, [r6, #0]
 800677e:	4621      	mov	r1, r4
 8006780:	4628      	mov	r0, r5
 8006782:	f000 f8b7 	bl	80068f4 <_sbrk_r>
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	d00a      	beq.n	80067a0 <sbrk_aligned+0x34>
 800678a:	1cc4      	adds	r4, r0, #3
 800678c:	f024 0403 	bic.w	r4, r4, #3
 8006790:	42a0      	cmp	r0, r4
 8006792:	d007      	beq.n	80067a4 <sbrk_aligned+0x38>
 8006794:	1a21      	subs	r1, r4, r0
 8006796:	4628      	mov	r0, r5
 8006798:	f000 f8ac 	bl	80068f4 <_sbrk_r>
 800679c:	3001      	adds	r0, #1
 800679e:	d101      	bne.n	80067a4 <sbrk_aligned+0x38>
 80067a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80067a4:	4620      	mov	r0, r4
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	200004cc 	.word	0x200004cc

080067ac <_malloc_r>:
 80067ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b0:	1ccd      	adds	r5, r1, #3
 80067b2:	f025 0503 	bic.w	r5, r5, #3
 80067b6:	3508      	adds	r5, #8
 80067b8:	2d0c      	cmp	r5, #12
 80067ba:	bf38      	it	cc
 80067bc:	250c      	movcc	r5, #12
 80067be:	2d00      	cmp	r5, #0
 80067c0:	4607      	mov	r7, r0
 80067c2:	db01      	blt.n	80067c8 <_malloc_r+0x1c>
 80067c4:	42a9      	cmp	r1, r5
 80067c6:	d905      	bls.n	80067d4 <_malloc_r+0x28>
 80067c8:	230c      	movs	r3, #12
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	2600      	movs	r6, #0
 80067ce:	4630      	mov	r0, r6
 80067d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d4:	4e2e      	ldr	r6, [pc, #184]	; (8006890 <_malloc_r+0xe4>)
 80067d6:	f000 f89d 	bl	8006914 <__malloc_lock>
 80067da:	6833      	ldr	r3, [r6, #0]
 80067dc:	461c      	mov	r4, r3
 80067de:	bb34      	cbnz	r4, 800682e <_malloc_r+0x82>
 80067e0:	4629      	mov	r1, r5
 80067e2:	4638      	mov	r0, r7
 80067e4:	f7ff ffc2 	bl	800676c <sbrk_aligned>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	4604      	mov	r4, r0
 80067ec:	d14d      	bne.n	800688a <_malloc_r+0xde>
 80067ee:	6834      	ldr	r4, [r6, #0]
 80067f0:	4626      	mov	r6, r4
 80067f2:	2e00      	cmp	r6, #0
 80067f4:	d140      	bne.n	8006878 <_malloc_r+0xcc>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	4631      	mov	r1, r6
 80067fa:	4638      	mov	r0, r7
 80067fc:	eb04 0803 	add.w	r8, r4, r3
 8006800:	f000 f878 	bl	80068f4 <_sbrk_r>
 8006804:	4580      	cmp	r8, r0
 8006806:	d13a      	bne.n	800687e <_malloc_r+0xd2>
 8006808:	6821      	ldr	r1, [r4, #0]
 800680a:	3503      	adds	r5, #3
 800680c:	1a6d      	subs	r5, r5, r1
 800680e:	f025 0503 	bic.w	r5, r5, #3
 8006812:	3508      	adds	r5, #8
 8006814:	2d0c      	cmp	r5, #12
 8006816:	bf38      	it	cc
 8006818:	250c      	movcc	r5, #12
 800681a:	4629      	mov	r1, r5
 800681c:	4638      	mov	r0, r7
 800681e:	f7ff ffa5 	bl	800676c <sbrk_aligned>
 8006822:	3001      	adds	r0, #1
 8006824:	d02b      	beq.n	800687e <_malloc_r+0xd2>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	442b      	add	r3, r5
 800682a:	6023      	str	r3, [r4, #0]
 800682c:	e00e      	b.n	800684c <_malloc_r+0xa0>
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	1b52      	subs	r2, r2, r5
 8006832:	d41e      	bmi.n	8006872 <_malloc_r+0xc6>
 8006834:	2a0b      	cmp	r2, #11
 8006836:	d916      	bls.n	8006866 <_malloc_r+0xba>
 8006838:	1961      	adds	r1, r4, r5
 800683a:	42a3      	cmp	r3, r4
 800683c:	6025      	str	r5, [r4, #0]
 800683e:	bf18      	it	ne
 8006840:	6059      	strne	r1, [r3, #4]
 8006842:	6863      	ldr	r3, [r4, #4]
 8006844:	bf08      	it	eq
 8006846:	6031      	streq	r1, [r6, #0]
 8006848:	5162      	str	r2, [r4, r5]
 800684a:	604b      	str	r3, [r1, #4]
 800684c:	4638      	mov	r0, r7
 800684e:	f104 060b 	add.w	r6, r4, #11
 8006852:	f000 f865 	bl	8006920 <__malloc_unlock>
 8006856:	f026 0607 	bic.w	r6, r6, #7
 800685a:	1d23      	adds	r3, r4, #4
 800685c:	1af2      	subs	r2, r6, r3
 800685e:	d0b6      	beq.n	80067ce <_malloc_r+0x22>
 8006860:	1b9b      	subs	r3, r3, r6
 8006862:	50a3      	str	r3, [r4, r2]
 8006864:	e7b3      	b.n	80067ce <_malloc_r+0x22>
 8006866:	6862      	ldr	r2, [r4, #4]
 8006868:	42a3      	cmp	r3, r4
 800686a:	bf0c      	ite	eq
 800686c:	6032      	streq	r2, [r6, #0]
 800686e:	605a      	strne	r2, [r3, #4]
 8006870:	e7ec      	b.n	800684c <_malloc_r+0xa0>
 8006872:	4623      	mov	r3, r4
 8006874:	6864      	ldr	r4, [r4, #4]
 8006876:	e7b2      	b.n	80067de <_malloc_r+0x32>
 8006878:	4634      	mov	r4, r6
 800687a:	6876      	ldr	r6, [r6, #4]
 800687c:	e7b9      	b.n	80067f2 <_malloc_r+0x46>
 800687e:	230c      	movs	r3, #12
 8006880:	603b      	str	r3, [r7, #0]
 8006882:	4638      	mov	r0, r7
 8006884:	f000 f84c 	bl	8006920 <__malloc_unlock>
 8006888:	e7a1      	b.n	80067ce <_malloc_r+0x22>
 800688a:	6025      	str	r5, [r4, #0]
 800688c:	e7de      	b.n	800684c <_malloc_r+0xa0>
 800688e:	bf00      	nop
 8006890:	200004c8 	.word	0x200004c8

08006894 <_realloc_r>:
 8006894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006898:	4680      	mov	r8, r0
 800689a:	4614      	mov	r4, r2
 800689c:	460e      	mov	r6, r1
 800689e:	b921      	cbnz	r1, 80068aa <_realloc_r+0x16>
 80068a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068a4:	4611      	mov	r1, r2
 80068a6:	f7ff bf81 	b.w	80067ac <_malloc_r>
 80068aa:	b92a      	cbnz	r2, 80068b8 <_realloc_r+0x24>
 80068ac:	f7ff ff12 	bl	80066d4 <_free_r>
 80068b0:	4625      	mov	r5, r4
 80068b2:	4628      	mov	r0, r5
 80068b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b8:	f000 f838 	bl	800692c <_malloc_usable_size_r>
 80068bc:	4284      	cmp	r4, r0
 80068be:	4607      	mov	r7, r0
 80068c0:	d802      	bhi.n	80068c8 <_realloc_r+0x34>
 80068c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068c6:	d812      	bhi.n	80068ee <_realloc_r+0x5a>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4640      	mov	r0, r8
 80068cc:	f7ff ff6e 	bl	80067ac <_malloc_r>
 80068d0:	4605      	mov	r5, r0
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d0ed      	beq.n	80068b2 <_realloc_r+0x1e>
 80068d6:	42bc      	cmp	r4, r7
 80068d8:	4622      	mov	r2, r4
 80068da:	4631      	mov	r1, r6
 80068dc:	bf28      	it	cs
 80068de:	463a      	movcs	r2, r7
 80068e0:	f7ff fed0 	bl	8006684 <memcpy>
 80068e4:	4631      	mov	r1, r6
 80068e6:	4640      	mov	r0, r8
 80068e8:	f7ff fef4 	bl	80066d4 <_free_r>
 80068ec:	e7e1      	b.n	80068b2 <_realloc_r+0x1e>
 80068ee:	4635      	mov	r5, r6
 80068f0:	e7df      	b.n	80068b2 <_realloc_r+0x1e>
	...

080068f4 <_sbrk_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4d06      	ldr	r5, [pc, #24]	; (8006910 <_sbrk_r+0x1c>)
 80068f8:	2300      	movs	r3, #0
 80068fa:	4604      	mov	r4, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	f7fa fc6c 	bl	80011dc <_sbrk>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_sbrk_r+0x1a>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	b103      	cbz	r3, 800690e <_sbrk_r+0x1a>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	200004d0 	.word	0x200004d0

08006914 <__malloc_lock>:
 8006914:	4801      	ldr	r0, [pc, #4]	; (800691c <__malloc_lock+0x8>)
 8006916:	f000 b811 	b.w	800693c <__retarget_lock_acquire_recursive>
 800691a:	bf00      	nop
 800691c:	200004d4 	.word	0x200004d4

08006920 <__malloc_unlock>:
 8006920:	4801      	ldr	r0, [pc, #4]	; (8006928 <__malloc_unlock+0x8>)
 8006922:	f000 b80c 	b.w	800693e <__retarget_lock_release_recursive>
 8006926:	bf00      	nop
 8006928:	200004d4 	.word	0x200004d4

0800692c <_malloc_usable_size_r>:
 800692c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006930:	1f18      	subs	r0, r3, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	bfbc      	itt	lt
 8006936:	580b      	ldrlt	r3, [r1, r0]
 8006938:	18c0      	addlt	r0, r0, r3
 800693a:	4770      	bx	lr

0800693c <__retarget_lock_acquire_recursive>:
 800693c:	4770      	bx	lr

0800693e <__retarget_lock_release_recursive>:
 800693e:	4770      	bx	lr

08006940 <_init>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr

0800694c <_fini>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr
